GMP调度器
https://mp.weixin.qq.com/s/m_bqmJ8KF9v8-BW8lymlEQ
G (Goroutine) 是受管理的轻量级线程，协程，执行单元
P (Processor) 逻辑处理器 P队列：本地队列(等待运行的 G，不超过 256 个)和全局队列(存放等待运行的G)
M (Machine) 操作系统线程 G在M上执行 线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列拿一批 G 放到 P 的本地队列，或从其他 P 的本地队列偷一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去
P的数量 runtime.GOMAXPROCS(0)
M的数量 默认 10000

学习
https://github.com/luk4z7/go-concurrency-guide

mkdir workspace && cd workspace
go work init ./hello_work
go work use ./gomodtestc

go 1.18
use (
  ./gomodtestc
  ./hello_work
)

gvm
bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
gvm install go1.17
gvm use go1.17 [--default]
gvm list
gvm listall

goup
curl -sSf https://raw.githubusercontent.com/owenthereal/goup/master/install.sh | sh
goup install 1.17.5
goup install 1.18beta1
goup uninstall
go version
goup show
goup default

命令	作用
go mod init	生成 go.mod 文件
go mod download	下载 go.mod 文件中指明的所有依赖
go mod tidy	整理现有的依赖
go mod graph	查看现有的依赖结构
go mod edit	编辑 go.mod 文件
go mod vendor	导出项目所有的依赖到vendor目录
go mod verify	校验一个模块是否被篡改过
go mod why	查看为什么需要依赖某模块

主版本号：当你做了不兼容的 API 修改。
次版本号：当你做了向下兼容的功能性新增。
修订号：当你做了向下兼容的问题修正。

范型
https://mp.weixin.qq.com/s/FFxNpRVgs-v9cIKWCLeN4Q
https://mp.weixin.qq.com/s/_pJXLJ6W9BFZyWBud7agPQ
type Addable interface {
  int | int8 | int16 | int32 | int64 | uint | uint8 | uint16 | uint32 | uint64 | uintptr | float32 | float64 | complex64 | complex128 | string
}
func add[T int|float64](a, b T) T {
 return a + b
}
func add[T ~string](x, y T) T {
 return x + y
}
// 没有任何约束
func add[T any](x, y T) T
// 约束 Addble (需要单独定义)
func add[T Addble](x, y T) T
// 约束允许 int 或 float64 类型
func add[T int|float64](x, y T) T
// 约束允许底层类型是 string 的类型（包括 string 类型）
func add[T ~string](x, y T) T
func MakeChan[T chan bool | chan int](c T) {
  _ = make(T) // 错误
   _ = new(T) // 正确
  _ = len(c)  // 正确
}
// 以下代码无法编译：
// cannot range over c (variable of type T constrained by []string|map[int]string) (T has no structural type)
func ForEach[T []string | map[int]string](c T, f func(int, string)) {
 for i, v := range c {
  f(i, v)
 }
}

brew install go@1.16
brew install go@1.17
brew switch go 1.17

linq
https://github.com/solsw/go2linq
https://github.com/ahmetb/go-linq
https://github.com/life4/genesis
https://github.com/rakeeb-hossain/functools
https://github.com/Saza-ku/go-genq

1.18 算法
https://github.com/senghoo/golang-design-pattern
https://github.com/ua-nick/Data-Structures-and-Algorithms
https://github.com/avelino/awesome-go
https://github.com/samber/lo
https://github.com/samber/mo
https://github.com/samber/do
https://github.com/repeale/fp-go
https://github.com/sean-public/fast-skiplist
https://github.com/kevwan/stream
https://github.com/shoenig/test
https://github.com/gonum/gonum
https://github.com/zeromicro/zero-examples
https://github.com/kevwan/mapreduce #流程控制 并行
https://github.com/xxjwxc/uber_go_guide_cn
https://github.com/Workiva/go-datastructures
https://github.com/daichi-m/go18ds
https://github.com/barweiss/go-tuple
https://github.com/nwillc/genfuncs
https://github.com/repeale/fp-go
https://github.com/rjNemo/underscore
https://github.com/elliotchance/pie
https://github.com/bradenaw/juniper
统计库包
https://github.com/montanaflynn/stats

https://github.com/uber-go/atomic
https://github.com/chzyer/readline

转换三角化图片艺术照
https://github.com/esimov/triangle

https://github.com/zh-five/xdaemon
https://github.com/duolatech/xapimanager

web framework
https://github.com/smallnest/go-web-framework-benchmark
https://github.com/gofiber/fiber
https://github.com/gogearbox/gearbox
https://github.com/savsgio/atreugo
https://github.com/gin-gonic/gin
https://github.com/xinliangnote/go-gin-api
https://github.com/astaxie/beego
https://github.com/kataras/iris
https://github.com/labstack/echo
https://github.com/bmizerany/pat
https://github.com/julienschmidt/httprouter
https://github.com/zenazn/goji
https://github.com/revel/revel
https://github.com/valyala/fasthttp
https://github.com/plimble/ace
github.com/labstack/echo/v4
https://github.com/gobuffalo/buffalo
https://github.com/beego/beego
https://github.com/cloudwego/hertz
https://github.com/cloudwego/hertz-benchmark
https://github.com/hertz-contrib
https://www.cloudwego.io/zh/docs/hertz/tutorials/example/

API防火墙
https://github.com/wallarm/api-firewall
https://hub.docker.com/r/wallarm/api-firewall

ffmpeg
https://github.com/u2takey/ffmpeg-go
https://github.com/mowshon/moviego

动画库
https://github.com/charmbracelet/harmonica

版本
https://github.com/Masterminds/semver
https://github.com/blang/semver

https://github.com/caddyserver/caddy
https://caddyserver.com/
https://caddyserver.com/docs/

https://github.com/lunny/tango
https://github.com/go-martini/martini

http://www.golangnote.com/topic/87.html
https://github.com/stripe/einhorn

websocket
https://github.com/gorilla/websocket
https://github.com/gobwas/ws
https://github.com/joewalnes/websocketd
https://github.com/pojntfx/weron

net 一个高性能、轻量级、非阻塞的事件驱动
https://github.com/panjf2000/gnet
go get -u github.com/panjf2000/gnet/v2
https://github.com/Allenxuxu/gev
https://github.com/cloudwego/netpoll

tcp
https://github.com/aceld/zinx

openapi
https://github.com/google/gnostic

rpc
https://github.com/rookie-ninja/rk-gin
https://github.com/rookie-ninja/rk-grpc
https://github.com/bufbuild/connect-go #gRPC
https://github.com/smallnest/rpcx
https://doc.rpcx.io/
https://github.com/smallnest/rpcxdump

开源网络钓鱼工具包
https://github.com/gophish/gophish

优雅的 Golang 爬虫框架
https://github.com/gocolly/colly

REST Postman
https://www.postman.com/downloads/?utm_source=postman-home

GRPC Bloomrpc
brew install --cask bloomrpc
https://github.com/bloomrpc/bloomrpc

GraphQL Insomnia
https://insomnia.rest/download
https://github.com/Kong/insomnia
https://github.com/dgraph-io/dgraph
https://docs.github.com/en/graphql
https://docs.github.com/en/graphql/overview/explorer

graphdb
https://github.com/cayleygraph/cayley

https://github.com/eko/gocache
开源的本地缓存库中 bigcache、go-cache、freecache都实现了分片功能，bigcache的hash选择的是fnv64a算法、go-cache的hash选择的是djb2算法、freechache选择的是xxhash算法。这三种算法都是非加密哈希算法
https://github.com/allegro/bigcache
https://github.com/patrickmn/go-cache
https://github.com/coocood/freecache
https://github.com/golang/groupcache
https://github.com/Code-Hex/go-generics-cache
https://github.com/bluele/gcache
freecache、bigcache 比较适合 Feature 服务
bigcache 相对于 freecache 的优势之一是您不需要提前知道缓存的大小，因为当 bigcache 已满时，它可以为新条目分配额外的内存，而不是像 freecache 当前那样覆盖现有的

database kvdb cache
https://github.com/etcd-io/bbolt #key/value database
https://github.com/syndtr/goleveldb
https://github.com/facebook/rocksdb
https://github.com/golang/leveldb
https://github.com/google/leveldb
https://github.com/erthink/libmdbx
https://github.com/torquem-ch/mdbx-go
https://github.com/pmwkaa/sophia
https://github.com/wiredtiger/wiredtiger
https://github.com/facebook/rocksdb
https://github.com/couchbase/forestdb
https://github.com/mongodb/mongo-go-driver
https://github.com/FerretDB/FerretDB #开源 MongoDB 替代品
https://github.com/segmentio/kafka-go
https://github.com/codenotary/immudb #只读DB
https://github.com/go-mysql-org/go-mysql
https://github.com/alicebob/miniredis
https://github.com/alash3al/redix
https://github.com/cockroachdb/cockroach
https://www.cockroachlabs.com/docs/stable/start-a-local-cluster.html
cockroach sql --insecure --host=localhost:26257
CREATE DATABASE bank;
CREATE TABLE bank.accounts (id INT PRIMARY KEY, balance DECIMAL);
INSERT INTO bank.accounts VALUES (1, 1000.50);
SELECT * FROM bank.accounts;
\q
cockroach sql --insecure --host=localhost:26258
go get -u github.com/jackc/pgx
go get -u github.com/lib/pq
https://github.com/cockroachdb/pebble #CockroachDB
https://github.com/flower-corp/rosedb #类似REDIS
https://github.com/flower-corp/lotusdb

Vitess 是一个数据库集群系统，用于通过通用分片对 MySQL 进行水平扩展。
https://github.com/vitessio/vitess
https://vitess.io/zh/

矢量数据库
https://github.com/milvus-io/milvus
git clone https://github.com/milvus-io/milvus.git
cd milvus/ && ./scripts/install_deps.sh && make

./rosedb-server
cli-mac -p 5200
https://github.com/microsoft/go-mssqldb
https://github.com/denisenkom/go-mssqldb

MySQL Binlog 增量实时同步工具
https://github.com/wj596/go-mysql-transfer
https://www.kancloud.cn/wj596/go-mysql-transfer/2116627

mongo同步
https://github.com/alibaba/MongoShake
https://github.com/alibaba/MongoShake/releases
curl -s  http://127.0.0.1:9101/progress | python -m json.tool
curl -s http://127.0.0.1:9100/repl | python -m json.tool
./mongoshake-stat --port 8100

bitmap
https://github.com/RoaringBitmap/roaring
https://github.com/bits-and-blooms/bitset

Postgres 有线兼容 SQLite 代理
https://github.com/benbjohnson/postlite
postlite -data-dir /data
psql --host HOSTNAME my.db
go install -tags vtable ./cmd/postlite

分布式Sqlite
https://github.com/rqlite/rqlite
brew install rqlite
rqlited -node-id 1 ~/node.1
rqlited -node-id 2 -http-addr localhost:4003 -raft-addr localhost:4004 -join http://localhost:4001 ~/node.2
rqlited -node-id 3 -http-addr localhost:4005 -raft-addr localhost:4006 -join http://localhost:4001 ~/node.3

SQLite 的流式复制
https://github.com/benbjohnson/litestream
https://litestream.io/getting-started/
litestream replicate fruits.db s3://mybkt.localhost:9000/fruits.db


https://github.com/pingcap/tidb
https://docs.pingcap.com/tidb/stable/mysql-compatibility
https://docs.pingcap.com/tidb/stable/quick-start-with-tidb#deploy-a-local-test-environment-using-tiup-playground
curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
source .bash_profile
tiup playground
tiup playground v5.2.2 --db 2 --pd 3 --kv 3 --monitor
tiup list tidb
tiup client
mysql --host 127.0.0.1 --port 4000 -u root
mysql --comments --host 127.0.0.1 --port 4000 -u root -p
http://127.0.0.1:9090/ #Prometheus dashboard of TiDB
http://127.0.0.1:2379/dashboard #TiDB Dashboard root
http://127.0.0.1:3000 #Grafana dashboard admin/admin
tiup clean --all
https://docs.pingcap.com/tidb/stable/quick-start-with-tidb#Linux
curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
tiup cluster
tiup update --self && tiup update cluster
vi /etc/ssh/sshd_config
MaxSessions = 20
service sshd restart
vi topo.yaml
# # Global variables are applied to all deployments and used as the default value of
# # the deployments if a specific deployment value is missing.
global:
 user: "tidb"
 ssh_port: 22
 deploy_dir: "/tidb-deploy"
 data_dir: "/tidb-data"
# # Monitored variables are applied to all the machines.
monitored:
 node_exporter_port: 9100
 blackbox_exporter_port: 9115
server_configs:
 tidb:
   log.slow-threshold: 300
 tikv:
   readpool.storage.use-unified-pool: false
   readpool.coprocessor.use-unified-pool: true
 pd:
   replication.enable-placement-rules: true
   replication.location-labels: ["host"]
 tiflash:
   logger.level: "info"
pd_servers:
 - host: 10.0.1.1
tidb_servers:
 - host: 10.0.1.1
tikv_servers:
 - host: 10.0.1.1
   port: 20160
   status_port: 20180
   config:
     server.labels: { host: "logic-host-1" }
 - host: 10.0.1.1
   port: 20161
   status_port: 20181
   config:
     server.labels: { host: "logic-host-2" }
 - host: 10.0.1.1
   port: 20162
   status_port: 20182
   config:
     server.labels: { host: "logic-host-3" }
tiflash_servers:
 - host: 10.0.1.1
monitoring_servers:
 - host: 10.0.1.1
grafana_servers:
 - host: 10.0.1.1

tiup cluster deploy tidb v5.2.2 ./topo.yaml --user root -p
tiup cluster start tidb
tiup cluster list
tiup cluster display tidb
tiup --binary cluster
mysql -h 10.0.1.1 -P 4000 -u root

docker run -p 127.0.0.1:$LOCAL_PORT:4000 pingcap/tidb:v5.1.0

CREATE USER <username> IDENTIFIED BY <password>;
CREATE USER 'tiuser'@'localhost' IDENTIFIED BY '123456';
GRANT ALL ON gorm.* TO <username>;
GRANT SELECT ON samp_db.* TO 'tiuser'@'localhost';
SHOW GRANTS for tiuser@localhost;
DROP USER 'tiuser'@'localhost';

CREATE DATABASE tidb;
CREATE USER 'tiuser' IDENTIFIED BY '123456';
GRANT ALL ON tidb.* TO tiuser;


dsn := "tiuser:123456@tcp(localhost:4000)/tidb?charset=utf8&parseTime=True&loc=Local"

序列化 生成代码
https://github.com/alecthomas/go_serialization_benchmarks
https://github.com/200sc/bebop
https://github.com/valyala/musgo
https://github.com/pascaldekloe/colfer
https://github.com/calmh/xdr
https://github.com/gogo/protobuf
https://github.com/andyleap/gencode
https://github.com/mojura/enkodo #写流
https://github.com/shamaton/msgpackgen
https://github.com/tinylib/msgp
https://github.com/google/flatbuffers #写流
https://github.com/golang/protobuf

grpc Gateway
https://github.com/protocolbuffers/protobuf
https://github.com/protocolbuffers/protobuf-go
https://github.com/grpc-ecosystem/grpc-gateway
https://github.com/golang/protobuf
https://github.com/grpc/grpc-go
https://github.com/rmedvedev/grpcdump
https://github.com/TykTechnologies/tyk

go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@latest
// 使用的 protoc --version 为 libprotoc 3.18.1
// 使用的 protoc-gen-go --version 为 protoc-gen-go v1.27.1
// 使用的 protoc-gen-go-grpc --version 为 protoc-gen-go-grpc 1.1.0
// 使用的 protoc-gen-doc --version 为 protoc-gen-doc version 1.5.0
// 在根目录下执行 protoc 命令
protoc \
--go_out=helloworld/gen \
--go-grpc_out=helloworld/gen \
--doc_out=helloworld/doc \
--doc_opt=html,index.html \
helloworld/helloworld.proto

https://mp.weixin.qq.com/s/V9CjkANNS1ItZXj7FUKqYg
protoc -I . --go_out=xxx
protoc -I . --go-grpc_out=xxx
protoc --go_out=. xxx.proto
protoc --decode-raw req.pb
protoc --decode=com.xxx.TestRequest xxx.proto  < req.pb

microservices 微服务
https://mp.weixin.qq.com/s/4T9wHkXvl0p-GrfC2ksNrA
https://mp.weixin.qq.com/s/TJO1u8p5p81VnNfWe0wQkA
https://github.com/cloudwego/kitex
https://github.com/go-kit/kit
https://github.com/asim/go-micro
https://github.com/go-kratos/kratos
https://github.com/google/go-cloud
https://github.com/zeromicro/go-zero
go-zero MapReduce文档: https://go-zero.dev/cn/mapreduce.html
https://github.com/nytimes/gizmo
https://github.com/rsms/gotalk 异步对等通信协议和库
https://github.com/koding/kite
https://github.com/gocircuit/circuit
github.com/smallnest/rpcx
https://github.com/rpcxio/rpcx-examples
https://github.com/rpcxio/rpcx-gateway
https://github.com/rpcxio/rpcx-etcd
https://github.com/apache/dubbo-go
https://github.com/gotomicro/ego
https://github.com/gotomicro/egoctl
https://github.com/gotomicro/ego-component
https://github.com/apache/dubbo-go

并行计算
https://github.com/BWbwchen/MapReduce

https://github.com/coocood/freecache
https://github.com/outbrain/orchestrator
https://github.com/antonholmquist/jason
https://github.com/olahol/melody
https://github.com/smartystreets/goconvey
https://github.com/name5566/leaf
https://github.com/tsuru/tsuru
https://github.com/leanote/leanote
http://git.oschina.net/openmeeting2/openmeeting2
https://github.com/google/gxui

用于机器人、无人机和物联网 (IoT) 的 Golang 框架
https://github.com/hybridgroup/gobot
机器控制 RobotGo，Go Native 跨平台 GUI 自动化
https://github.com/go-vgo/robotgo
webhook
https://github.com/adnanh/webhook

es elastic elasticsearch
https://github.com/elastic/go-elasticsearch
https://github.com/olivere/elastic
https://github.com/go-mysql-org/go-mysql-elasticsearch
https://github.com/zinclabs/zinc #替代ES
https://github.com/blevesearch/bleve
https://github.com/vinted/elasticsearch-dsl-rs

jquery json
https://github.com/PuerkitoBio/goquery
https://github.com/wader/fq
https://github.com/antonmedv/fx
go install github.com/antonmedv/fx@latest
fx data.json
fx data.json '.filter(x => x.startsWith("a"))'
fx data.json '[x["age"] + i for i in range(10)]'
fx data.json 'x.to_a.map {|x| x[1]}'
export FX_THEME=9
https://github.com/simeji/jid
go install github.com/simeji/jid/cmd/jid@latest

Protocol Buffers
https://github.com/bufbuild/buf

https://github.com/astaxie/beedb

https://github.com/go-chassis/go-chassis
https://github.com/TruthHun/DocHub
https://github.com/rodrigo-brito/gocity

移动端推送
https://github.com/uniqush/uniqush-push

容器安全扫描
https://github.com/knqyf263/trivy

proxy
https://github.com/snail007/goproxy
https://github.com/elazarl/goproxy
https://github.com/goproxyio/goproxy

LDAP
https://github.com/go-ldap/ldap

https://github.com/shirou/gopsutil
https://github.com/go-ping/ping


https://github.com/XiaoMi/Gaea

https://github.com/douyu/jupiter

PDF WORD EXCEL
https://github.com/qax-os/excelize
https://github.com/tealeg/xlsx
https://github.com/szyhf/go-excel
https://github.com/fterrag/goxlsxwriter
https://github.com/go-the-way/exl
https://github.com/plandem/xlsx

https://github.com/go-pdf/fpdf
https://github.com/johnfercher/maroto #PDF
https://github.com/jung-kurt/gofpdf #PDF
https://github.com/signintech/gopdf
https://github.com/pdfcpu/pdfcpu
https://github.com/gotenberg/gotenberg
https://github.com/SebastiaanKlippert/go-wkhtmltopdf
wkhtmltopdf input.html output.pdf
wkhtmltopdf https://www.google.com output.pdf
https://segmentfault.com/a/1190000021459671
添加水印
unipdf watermark in.pdf watermark.png -o out.pdf
pdfcpu watermark add -mode image 'voucher_watermark.png' 's:1 abs, rot:0' in.pdf out.pdf
合并pdf
cpdf -merge input1.pdf input2.pdf -o output.pdf
unipdf merge output.pdf input1.pdf input2.pdf
pdfcpu merge output.pdf input1.pdf input2.pdf
拆分pdf
cpdf -split in.pdf 1 even -chunk 1 -o ./out%%%.pdf
unipdf split input.pdf out.pdf 1-1
pdfcpu split in.pdf .
pdf转图片
pdfdraw -o out%d.png in.pdf
mupdf
pdfdraw
pdfinfo
pdfclean
pdfextract
pdfshow
xpsdraw
xpdf 是一个免费的PDF工具包，包括文字解析,图片转换,html转换等
pdfdetach
pdffonts
pdfimages
pdfinfo
pdftohtml
pdftopng
pdftoppm
pdftops
pdftotext
pdftopng in.pdf out-prefix
pdf解密
qpdf --decrypt in.pdf out.pdf
pdfcpu decrypt encrypted.pdf output.pdf
unipdf decrypt -p pass -o output.pdf input.pdf
PDF识别
pdftotext input.pdf output.txt
unipdf extract text input.pdf
tet --pageopt "includebox={{38 707.93 243.91 716.93}}" input.pdf
tet --tetml input.pdf
pdfclean broken.pdf repaired.pdf
pdffonts input.pdf
https://github.com/wkhtmltopdf/wkhtmltopdf
xpdfreader.com/opensource.html
https://community.coherentpdf.com/
https://github.com/coherentgraphics
https://github.com/qpdf/qpdf
https://github.com/galkahana/PDF-Writer
https://www.mupdf.com/releases/index.html
https://github.com/pdfcpu/pdfcpu

http://www.xpdfreader.com/download.html
brew install pdftoipe
yum install pdftotext poppler-utils

将 PDF、DOC、DOCX、XML、HTML、RTF 等转换为纯文本
https://github.com/sajari/docconv
go install code.sajari.com/docconv/...@latest
brew install tesseract
docd -input document.pdf
https://github.com/JalfResi/justext
https://github.com/otiai10/gosseract
https://github.com/otiai10/ocrserver

https://github.com/tealeg/xlsx
https://github.com/qax-os/excelize

latex
https://github.com/go-latex/latex

SVG
https://github.com/ajstarks/svgo

命令行解析
https://github.com/alecthomas/kingpin
日期操作
https://github.com/golang-module/carbon

https://github.com/mvdan/sh
go install mvdan.cc/sh/v3/cmd/shfmt@latest
go install mvdan.cc/sh/v3/cmd/gosh@latest


生成GO文件过大问题2.3M变900K
go build -ldflags -w go-safe-hosts.go
upx压缩
https://github.com/upx/upx/releases
brew install upx
upx -9 -k go-safe-hosts

fast JavaScript and CSS bundler and minifier
https://github.com/evanw/esbuild

go mod init etms
GO代码检测
curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
https://github.com/securego/gosec
gosec -help
time gosec ./...
gosec -include=G101,G203,G401 ./...
gosec -exclude=G303 ./...

go 打包到不同平台windows linux运行程序
1、Mac下编译Linux, Windows平台的64位可执行程序：
$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go
$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go
2、Linux下编译Mac, Windows平台的64位可执行程序：
$ CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go
$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go
3、Windows下编译Mac, Linux平台的64位可执行程序：
$ SET CGO_ENABLED=0SET GOOS=darwin3 SET GOARCH=amd64 go build test.go
$ SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build  test.go
注：如果编译web等工程项目，直接cd到工程目录下直接执行以上命令
GOOS：目标可执行程序运行操作系统，支持 darwin freebsd linux windows android netbsd openbsd plan9
GOARCH：目标可执行程序操作系统构架，包括 386 amd amd64 arm arm64

mac go build linux/windows
brew install FiloSottile/musl-cross/musl-cross
brew install FiloSottile/musl-cross/musl-cross --without-x86_64 --with-arm-hf
brew reinstall musl-cross
ln -s /usr/local/opt/musl-cross/bin/x86_64-linux-musl-gcc /usr/local/bin/musl-gcc
CGO_ENABLED=1 GOOS=linux  GOARCH=amd64  CC=x86_64-linux-musl-gcc  CXX=x86_64-linux-musl-g++ go build -o BIN_NAME
运行时报错误
/lib/ld-musl-x86_64.so.1: bad ELF interpreter: No such file or directory
wget https://copr.fedorainfracloud.org/coprs/ngompa/musl-libc/repo/epel-7/ngompa-musl-libc-epel-7.repo -O /etc/yum.repos.d/ngompa-musl-libc-epel-7.repo
yum install -y musl-libc-static
brew install mingw-w64
CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ GOOS=windows GOARCH=amd64 go build -x -v -ldflags "-s -w" -o test_x64.exe
静态库
$ CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ GOOS=windows GOARCH=amd64 go build -buildmode=c-archive -x -v -ldflags "-s -w" -o bin/x64/x64.a main.go
动态库
将-buildmode=c-archive改为-buildmode=c-shared即可
编译x86
可执行文件
$ CGO_ENABLED=1 CC=i686-w64-mingw32-gcc CXX=i686-w64-mingw32-g++ GOOS=windows GOARCH=386 go build -x -v -ldflags "-s -w" -o test_x86.exe
静态库
$ CGO_ENABLED=1 CC=i686-w64-mingw32-gcc CXX=i686-w64-mingw32-g++ GOOS=windows GOARCH=386 go build -buildmode=c-archive -x -v -ldflags "-s -w" -o bin/x86/x86.a main.go
动态库
将-buildmode=c-archive改为-buildmode=c-shared即可

k8s
https://github.com/k3s-io/k3s
https://github.com/kubernetes/kubernetes
https://github.com/kubernetes/ingress-nginx
https://github.com/gardener/gardener
https://github.com/kubernetes/minikube #本地运行k8s
https://github.com/pixie-io/pixie #即时 Kubernetes 原生应用可观察性
https://github.com/siderolabs/talos
开源监控解决方案
https://github.com/prometheus/prometheus
docker run --name myprometheus -p 9090:9090 -d prom/prometheus
http://localhost:9090/
docker run --name mynode-exporter -p 9100:9100 -d prom/node-exporter
http://localhost:9100/metrics
每一个监控指标之前都会有一段类似于如下形式的信息：
# HELP node_cpu_guest_seconds_total Seconds the CPUs spent in guests (VMs) for each mode.
# TYPE node_cpu_guest_seconds_total counter
HELP：解释当前指标的含义
TYPE：说明当前指标的数据类型
一些在node exporter中的指标：
go_* :node exporter中go相关指标
node_boot_time：系统启动时间
node_cpu_* : 系统CUP使用情况
node_disk_* : 磁盘io
node_filesystem_* : 文件系统使用量
node_load* : 系统负载
node_memory_* : 系统内存
node_network_* : 网络宽带
node_time_* : 当前系统时间
为了能够让Prometheus Server能够从当前node exporter获取到监控数据，这里需要修改Prometheus配置文件。
进入容器后，编辑/etc/prometheus/prometheus.yml并在scrape_configs节点下添加以下内容:
  # 采集node exporter监控数据
  - job_name: 'node'
    static_configs:
      - targets: ['localhost:9100']
重启容器。
注意如果用容器启动prometheus，配置target地址为localhost，将无法访问，可以改成将localhost替换为：docker.for.mac.localhost（mac）或docker.for.win.localhost（windows)
  # 采集node exporter监控数据
  - job_name: 'node'
    static_configs:
      - targets: ['docker.for.mac.localhost:9100']
访问http://localhost:9090/targets，可以看到如下结果
state 显示为up表示正常，down为异常。
http://localhost:9090/graph
docker run -d -p 3000:3000 grafana/grafana
http://localhost:3000 admin/admin
添加Prometheus数据源。
下载模板：https://grafana.com/grafana/dashboards/11074 导入

数据可视化平台
https://github.com/grafana/grafana
https://github.com/percona/grafana-dashboards
etcd管理平台
https://github.com/tkestack/kstone
容器应用内核
https://github.com/google/gvisor

轻量级云原生 API 网关
https://github.com/Spacewalkio/Helmet

https://github.com/vladimirvivien/ktop
raft共识算法
https://github.com/hashicorp/raft

etcd
https://github.com/etcd-io/etcd
etcd
启动 2379 2380 端口
etcdctl put mykey "this is awesome"
etcdctl get mykey
etcd 集群
http://play.etcd.io/install
https://etcd.io/docs/v3.5/demo/
https://github.com/mattn/goreman
go install github.com/mattn/goreman@latest
goreman start
goreman -f ./Procfile.learner start
go get go.etcd.io/etcd/client/v3

docker
https://github.com/bcicen/ctop
https://github.com/anchore/syft

代码安全检查
https://github.com/XmirrorSecurity/OpenSCA-cli

是容器时代的构建自动化工具 https://mp.weixin.qq.com/s/xodAYw7GnvmnlnzXm1l6Sg
https://github.com/earthly/earthly
sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly && /usr/local/bin/earthly bootstrap --with-autocomplete'
Earthfile
FROM golang:1.17-alpine
WORKDIR /go-example

build:
    COPY main.go .
    RUN go build -o build/go-example main.go
    SAVE ARTIFACT build/go-example /go-example AS LOCAL build/go-example

docker:
    COPY +build/go-example .
    ENTRYPOINT ["/go-example/go-example"]
    SAVE IMAGE go-example:latest
earthly +docker

brew install ctop
管理一切 docker 的懒惰方式
https://github.com/jesseduffield/lazydocker

https://github.com/containerd/cgroups

实时性能监控
https://github.com/grafana/grafana
https://github.com/prometheus/prometheus
https://github.com/netdata/netdata
https://github.com/grafana/loki
https://mp.weixin.qq.com/s/kQGFtFFG4fjWddCF-eJ6hw
https://github.com/sensu/sensu-go

https://github.com/thanos-io/thanos

https://github.com/zabbix/zabbix
https://mp.weixin.qq.com/s/std1jVuvTqWwMS0wXFB3dw
sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config
systemctl disable --now firewalld
rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5. 0 /rhel/7/x86_64/ zabbix-release-5. 0 -1.el7.noarch.rpm
sed -i 's#http://repo.zabbix.com#https://mirrors.aliyun.com/zabbix#' /etc/yum.repos.d/zabbix.repo
yum clean all
安装zabbix server和agent
yum install zabbix-server-mysql zabbix-agent -y
安装zabbix前端
yum install centos-release-scl -y
vi /etc/yum.repos.d/zabbix.repo
enabled = 1
yum install zabbix-web-mysql-scl zabbix-apache-conf-scl -y
安装mariadb数据库
yum install mariadb-server -y
systemctl enable --now mariadb
mysql_secure_installation
create database zabbix default character set utf8 COLLATE utf8_ bin ;
grant all privileges on zabbix.* to zabbix@localhost identified by " zabbix_pwd " ;
zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix
vi /etc/zabbix/zabbix_server.conf
DBPassword=password
vi /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf
php_value[date.timezone] = Asia/Shanghai
systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm


go get -u github.com/cosmtrek/air
air -c .air.toml


数据库迁移
https://github.com/compose/transporter
仅支持 mongodb 和 postgresql 适配器
transporter init [source adaptor name] [sink adaptor name]

https://github.com/golang-migrate/migrate
安装：
$ go get -u -d github.com/golang-migrate/migrate/cmd/migrate
键入命令创建迁移文件：
migrate create -ext sql -dir database/migrations -seq create_user
键入命令运行迁移：
migrate -database "mysql://user:pass@tcp(localhost:3600)/user" -path=database/migrations up
键入命令中断迁移：
migrate -database "mysql://user:pass@tcp(localhost:3600)/user" -path=database/migrations down
golang-migrate/migrate:https://github.com/golang-migrate/migrate

https://github.com/shadow1ng/fscan
fscan.exe -h 192.168.1.1/24  (默认使用全部模块)
fscan.exe -h 192.168.1.1/16  (B段扫描)
fscan.exe -h 192.168.1.1/24 -np -no -nopoc(跳过存活检测 、不保存文件、跳过web poc扫描)
fscan.exe -h 192.168.1.1/24 -rf id_rsa.pub (redis 写公钥)
fscan.exe -h 192.168.1.1/24 -rs 192.168.1.1:6666 (redis 计划任务反弹shell)
fscan.exe -h 192.168.1.1/24 -c whoami (ssh 爆破成功后，命令执行)
fscan.exe -h 192.168.1.1/24 -m ssh -p 2222 (指定模块ssh和端口)
fscan.exe -h 192.168.1.1/24 -pwdf pwd.txt -userf users.txt (加载指定文件的用户名、密码来进行爆破)
fscan.exe -h 192.168.1.1/24 -o /tmp/1.txt (指定扫描结果保存路径,默认保存在当前路径)
fscan.exe -h 192.168.1.1/8  (A段的192.x.x.1和192.x.x.254,方便快速查看网段信息 )
fscan.exe -h 192.168.1.1/24 -m smb -pwd password (smb密码碰撞)
fscan.exe -h 192.168.1.1/24 -m ms17010 (指定模块)
fscan.exe -hf ip.txt  (以文件导入)

熔断器
https://github.com/afex/hystrix-go

流量回放
https://github.com/buger/goreplay
gor --input-raw :8000 --output-stdout
gor --input-raw :8000 --output-http http://staging.env
gor --input-tcp :28020 --output-http "http://staging.com|10"
gor --input-raw :80 --output-tcp "replay.local:28020|10%"
gor --input-raw :8080 --output-http staging.com --http-allow-url /api
gor --input-raw :8080 --output-http staging.com --http-disallow-url /api
gor --input-raw :80 --output-http "http://staging.server" \
    --http-allow-method GET \
    --http-allow-method OPTIONS
gor --input-tcp :28020 --output-http "http://staging.com"  --output-http "http://dev.com"
gor --input-raw :80 --output-http "http://staging.com"  --output-http "http://dev.com" --split-output true

valid
https://github.com/asaskevich/govalidator
https://github.com/go-playground/validator
https://github.com/bytedance/go-tagexpr
github.com/valyala/fasttemplate
github.com/rsms/gotalk
github.com/valyala/bytebufferpool
https://github.com/jianfengye/collection
https://github.com/x1unix/go-playground
https://github.com/gwuhaolin/livego
https://github.com/hantmac/fuckdb
https://github.com/orcaman/concurrent-map
https://github.com/megaease/easegress
https://github.com/nocodb/nocodb
https://github.com/Canop/rhit

GO 混搅工具
go get -u github.com/unixpickle/gobfuscate
结构体检查
go get -u github.com/mdempsky/maligned

https://github.com/golang-migrate/migrate
桌面分享
https://github.com/pavlobu/deskreen

https://github.com/ClickHouse/ClickHouse
https://github.com/ClickHouse/clickhouse-go
https://github.com/go-gorm/clickhouse-go
https://github.com/go-gorm/clickhouse
https://github.com/vahid-sohrabloo/chconn

是一个高性能且低损耗的 goroutine 池
https://github.com/panjf2000/ants
https://github.com/Jeffail/tunny
https://github.com/gammazero/workerpool
https://github.com/go-playground/pool

依赖注入
https://github.com/google/wire
https://github.com/uber-go/fx
依赖反射实现的运行时依赖注入：inject、uber、dig
使用代码生成实现的依赖注入：wire

NSQ
https://github.com/nsqio/nsq/releases
https://github.com/centrifugal/centrifugo

nohup ./nsqlookupd &
nohup ./nsqd --lookupd-tcp-address=127.0.0.1:4160 &
nohup ./nsqadmin --lookupd-http-address=127.0.0.1:4161 &
nohup ./nsq_to_file --topic=test --output-dir=/tmp --lookupd-http-address=127.0.0.1:4161 &
nsqd --lookupd-tcp-address=127.0.0.1:4160 --broadcast-address=127.0.0.1
nsqadmin --lookupd-http-address=127.0.0.1:4161
nsqd：守护进程，客户端通信。默认端口 4150（TCP） 4151（HTTP）
nsqlookupd：相当于一个路由器。客户端可以经由它发现生产者、nsqd 广播的话题。一个 nsqlookupd 能够管理一群 nsqd。默认端口：:4160（TCP），:4161（HTTP）
nsqadmin：在线面板，能够通过浏览器直接访问。默认端口 :4171
curl -d 'hello world' 'http://127.0.0.1:4151/pub?topic=test'
http://192.168.110.131:4171/


nsq 消息队列(第二选择)
```
https://github.com/nsqio/nsq
https://github.com/nsqio/go-nsq

docker pull nsqio/nsq
docker pull nsqio/nsq:v1.2.0

docker run -d --name nsqlookupd -p 4160:4160 -p 4161:4161 nsqio/nsq:v1.2.0 /nsqlookupd
docker inspect -f '{{ .NetworkSettings.IPAddress }}' nsqlookupd

docker run -d --name nsqd -p 4150:4150 -p 4151:4151 nsqio/nsq:v1.2.0 /nsqd --broadcast-address=172.17.0.2 --lookupd-tcp-address=172.17.0.2:4160
docker run -d --name nsqadmin -p 4171:4171 nsqio/nsq:v1.2.0 /nsqadmin --lookupd-http-address=172.17.0.2:4161
http://172.17.0.2:4171

或者
docker-compose.yml
version: '3'
services:
  nsqlookupd:
    image: nsqio/nsq
    command: /nsqlookupd
    ports:
      - "4160"
      - "4161"
  nsqd:
    image: nsqio/nsq
    command: /nsqd --lookupd-tcp-address=nsqlookupd:4160
    depends_on:
      - nsqlookupd
    ports:
      - "4150"
      - "4151"
  nsqadmin:
    image: nsqio/nsq
    command: /nsqadmin --lookupd-http-address=nsqlookupd:4161
    depends_on:
      - nsqlookupd
    ports:
      - "4171"

docker-compose up -d 启动nsq 所有组件
docker-compose ps 查看各个组件的运行详情
docker-compose logs 查看组件日志

或者
wget https://github.com/nsqio/nsq/releases/download/v1.2.0/nsq-1.2.0.linux-amd64.go1.12.9.tar.gz
tar -zvxf nsq-1.2.0.linux-amd64.go1.12.9.tar.gz
cd nsq-1.2.0.linux-amd64.go1.12.9

nohup ./nsqlookupd > /dev/null 2>&1
nohup ./nsqd --lookupd-tcp-address=127.0.0.1:4160 > /dev/null 2>&1
nohup ./nsqadmin --lookupd-http-address=127.0.0.1:4161 > /dev/null 2>&1
curl -d 'hello world 1' 'http://127.0.0.1:4151/pub?topic=test'
nohup ./nsq_to_file --topic=test --output-dir=/tmp --lookupd-http-address=127.0.0.1:4161 > /dev/null 2>&1

```


下载
https://github.com/k0kubun/go-ansi
https://github.com/polaris1119/downloader
https://github.com/iikira/downloader
https://github.com/Mikubill/cowtransfer-uploader
https://github.com/iovxw/downloader
https://github.com/mostafa-asg/go-dl
https://github.com/monkeyWie/gopeed-core
https://github.com/Angey40/BaiduPCS-Go
https://github.com/GangZhuo/BaiduPCS

改名
https://github.com/shenwei356/brename
https://github.com/ChuckDaniels87/rnr
https://github.com/neurobin/rnm
https://github.com/ayoisaiah/f2
go install github.com/ayoisaiah/f2/cmd/f2@latest
f2 -r 'test-%3d{{ext}}'
f2 -r 'test-%3d{{ext}}' -x
f2 -f '(\d+).*' -r '$1.mp3'

https://github.com/aohorodnyk/mimeheader
日志
https://github.com/rs/zerolog
https://github.com/uber-go/zap
https://github.com/apex/log
https://github.com/sirupsen/logrus

结构化打印数据
https://github.com/davecgh/go-spew/
spew.Dump(arr)

https://github.com/kjk/dailyrotate

Go 的 goroutine 池
https://github.com/Jeffail/tunny

breaker 在 Go 中实现的断路器
https://github.com/rubyist/circuitbreaker
https://github.com/sony/gobreaker

https://github.com/six-ddc/plow
go get -u github.com/six-ddc/plow
plow http://127.0.0.1:8080/hello -c 20 -d 15s -n 5000000
get请求本地接口：建立了20个连接，在15秒内请求了500w次，相信大家也看懂了这里，下面的flag还是解释一下吧。
-c 指定连接数(connections)
-n指定请求数(number)
-d 指定请求的时间(duration)

开源OSS对象存储
https://github.com/minio/minio
https://github.com/minio/minio-go
https://github.com/felixge/httpsnoop
gRPC 客户端调试工具
https://github.com/ktr0731/evans
https://github.com/uw-labs/bloomrpc
https://github.com/storyicon/powerproto
grpc压测工具
https://github.com/bojand/ghz
./ghz --skipTLS --insecure --protoset ./bundle.protoset \
-B ./grpc_payload --call tensorflow.serving.PredictionService/Predict \
127.0.0.1:8500
类似mysqlap的mysql压测工具
https://github.com/xiazemin/mysqlslap-go

发布订阅
https://github.com/ThreeDotsLabs/watermill/

go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
gocyclo -top 10  ./

https://github.com/boyter/scc
go install github.com/boyter/scc@latest
scc -h
scc --languages

go get -u github.com/hhatto/gocloc/cmd/gocloc
gocloc .
gocloc ./ --not-match-d=swagger
gocloc ./ --not-match-d=dist  --not-match-d=node_modules
gocloc ./ --not-match-d=node_modules --not-match-d=uni_modules --not-match-d=unpackage --not-match-d=uview-ui

cloc --by-file-by-lang --exclude-dir=.github --exclude-lang=YAML,Markdown [project-dir]

brew install duf
https://github.com/muesli/duf
duf
duf /home /some/file
duf --all
duf --only local,network,fuse,special,loops,binds
duf --hide local,network,fuse,special,loops,binds
duf --only-fs tmpfs,vfat
duf --hide-fs tmpfs,vfat
duf --only-mp /,/home,/dev
duf --hide-mp /,/home,/dev
duf --only-mp '/sys/*,/dev/*'
duf --sort size
duf --output mountpoint,size,usage
duf --json

https://github.com/rs/curlie
brew install rs/tap/curlie
curlie [CURL_OPTIONS...] [METHOD] URL [ITEM [ITEM]]

yum install gdb


DEBUG
https://github.com/go-delve/delve
https://mp.weixin.qq.com/s/mW1Jq1oLRcbPxXeGTOA1jg
go install github.com/go-delve/delve/cmd/dlv@latest
xcode-select --install
sudo /usr/sbin/DevToolsSecurity -enable
dlv attach pid
dlv exec executable_file
go run or -ldflags='-s -w'

dlv version
dlv debug .
dlv debug main.go
list main.main
list ./main.go:7
break main.main
b main.main
continue
c
next
n
print a
p a
step
s
p s
b 6
locals
set i = 1
r
bp
clearall main.main
funcs Reverse
p len(r)-1
p &is
x -fmt hex -len 24 0xc000055f30
exit

break(b)
continue(c)
next(n)
step(s)
stepout(so)
print(p)
disassemble反汇编命令查看main函数对应的汇编代码
通过goroutines命令（简写grs），我们可以查看所goroutine
通过goroutine (alias: gr)命令可以查看当前的gourtine
通过stack命令（简写bt），我们可查看当前函数调用栈信息
regs命令：通过regs命令可以查看全部的寄存器状态，可以通过单步执行来观察寄存器的变化
locals命令：通过locals命令，可以查看当前函数所有变量值

brew install xo/xo/usql
https://github.com/xo/usql
usql postgres://booktest@localhost/booktest
usql oracle://user:pass@host/oracle.sid
usql pg://localhost/ -f script.sql
usql vt://user:pass@host:3306/mydatabase
# connect to a postgres database
$ usql pg://user:pass@host/dbname
$ usql pgsql://user:pass@host/dbname
$ usql postgres://user:pass@host:port/dbname
$ usql pg://
$ usql /var/run/postgresql
$ usql pg://user:pass@host/dbname?sslmode=disable # Connect without SSL

# connect to a mysql database
$ usql my://user:pass@host/dbname
$ usql mysql://user:pass@host:port/dbname
$ usql my://
$ usql /var/run/mysqld/mysqld.sock

# connect to a sqlserver database
$ usql sqlserver://user:pass@host/instancename/dbname
$ usql ms://user:pass@host/dbname
$ usql ms://user:pass@host/instancename/dbname
$ usql mssql://user:pass@host:port/dbname
$ usql ms://

# connect to a sqlserver database using Windows domain authentication
$ runas /user:ACME\wiley /netonly "usql mssql://host/dbname/"

# connect to a oracle database
$ usql or://user:pass@host/sid
$ usql oracle://user:pass@host:port/sid
$ usql or://

Cassandra
https://github.com/gocql/gocql

# connect to a cassandra database
$ usql ca://user:pass@host/keyspace
$ usql cassandra://host/keyspace
$ usql cql://host/
$ usql ca://

# connect to a sqlite database that exists on disk
$ usql dbname.sqlite3

# NOTE: when connecting to a SQLite database, if the "<driver>://" or
# "<driver>:" scheme/alias is omitted, the file must already exist on disk.
#
# if the file does not yet exist, the URL must incorporate file:, sq:, sqlite3:,
# or any other recognized sqlite3 driver alias to force usql to create a new,
# empty database at the specified path:
$ usql sq://path/to/dbname.sqlite3
$ usql sqlite3://path/to/dbname.sqlite3
$ usql file:/path/to/dbname.sqlite3

# connect to a adodb ole resource (windows only)
$ usql adodb://Microsoft.Jet.OLEDB.4.0/myfile.mdb
$ usql "adodb://Microsoft.ACE.OLEDB.12.0/?Extended+Properties=\"Text;HDR=NO;FMT=Delimited\""

# connect with ODBC driver (requires building with odbc tag)
$ cat /etc/odbcinst.ini
[DB2]
Description=DB2 driver
Driver=/opt/db2/clidriver/lib/libdb2.so
FileUsage = 1
DontDLClose = 1

[PostgreSQL ANSI]
Description=PostgreSQL ODBC driver (ANSI version)
Driver=psqlodbca.so
Setup=libodbcpsqlS.so
Debug=0
CommLog=1
UsageCount=1
# connect to db2, postgres databases using ODBC
$ usql odbc+DB2://user:pass@localhost/dbname
$ usql odbc+PostgreSQL+ANSI://user:pass@localhost/dbname?TraceFile=/path/to/trace.log

文件管理
https://github.com/filebrowser/filebrowser
golang HTTP 和 HTTPS 服务器的零停机重启
https://github.com/fvbock/endless
https://github.com/rcrowley/goagain
https://github.com/nextcloud/server

分布式事务管理器
https://github.com/yedf/dtm

https://gitea.com/goftp/server

go install github.com/davecheney/httpstat@latest
httpstat http://demo.test.cn

brew install duf

go get github.com/divan/expvarmon
expvarmon -ports=http://full.test.cn/debug/vars
expvarmon -ports=http://127.0.0.1:18888/debug/vars -vars="mem:memstats.Alloc,duration:Response.Mean,Counter"
	./expvarmon -ports="80"
	./expvarmon -ports="23000-23010,http://example.com:80-81" -i=1m
	./expvarmon -ports="80,remoteapp:80" -vars="mem:memstats.Alloc,duration:Response.Mean,Counter"
	./expvarmon -ports="1234-1236" -vars="Goroutines" -self
https://github.com/bigwhite/csv2xls


https://dl.google.com/go/go1.17.darwin-amd64.pkg

Go 解释器
https://github.com/traefik/yaegi
https://github.com/cosmos72/gomacro
https://github.com/goplus/igo
https://github.com/goplus/igop
Go 插件功能
https://mp.weixin.qq.com/s/EbG4RVd7jsoD3YmiP6Az8w
package main
import "log"
func init() {log.Println("plugin init")}
type SayHello struct {}
func (s *SayHello) CallMe(name string) string {
	log.Println("hello ", name)
	return "I am plugin"
}
// SayHelloPlugin 导出变量
var SayHelloPlugin SayHello
go build -o plugin.so -buildmode=plugin plugin.go
package main
import (
	"log"
	"plugin"
)
type CustomPlugin interface {
	CallMe(name string) string
}
func main() {
	// 打开插件（并发安全）
	p, err := plugin.Open("plugin.so")
	if err != nil { panic(err) }
	// 在插件中搜索可导出的变量或函数
	sayHelloPlugin, err := p.Lookup("SayHelloPlugin")
	if err != nil { panic(err) }
	// 断言插件类型
	if sayHello, ok := sayHelloPlugin.(CustomPlugin); ok {
		log.Println(sayHello.CallMe("togettoyou"))
	}
}
go run main.go

文件抽象
https://github.com/spf13/afero
转换类型
https://github.com/spf13/cast

JSON
https://github.com/goccy/go-reflect
https://github.com/goccy/go-json
https://github.com/bytedance/sonic
https://github.com/json-iterator/go

https://github.com/bronze1man/yaml2json
go install github.com/bronze1man/yaml2json@latest
echo "a: 1" | yaml2json
https://github.com/bronze1man/json2yaml
go install github.com/bronze1man/json2yaml@latest
echo '{"a": 1}' | json2yaml

ini
https://github.com/BurntSushi/toml

容器 docker
https://github.com/abiosoft/colima


FROM golang:1.14-alpine as builder
WORKDIR /usr/src/app
ENV GOPROXY=https://goproxy.cn
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
  apk add --no-cache upx ca-certificates tzdata
COPY ./go.mod ./
COPY ./go.sum ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 go build -ldflags "-s -w" -o server &&\
  upx --best server -o _upx_server && \
  mv -f _upx_server server

FROM scratch as runner
COPY --from=builder /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/src/app/server /opt/app/
CMD ["/opt/app/server"]

docker build -t server .

ORM
https://github.com/ent/ent
https://github.com/go-gorm/gorm
https://gitea.com/xorm/xorm
https://github.com/Masterminds/squirrel
https://github.com/jmoiron/sqlx
github.com/jackc/pgx
https://github.com/go-gorm/gen
https://github.com/xxjwxc/gormt
https://github.com/efectn/go-orm-benchmarks
https://github.com/frederikhors/orm-benchmark
https://github.com/uptrace/bun
https://github.com/kyleconroy/sqlc

GORM
sqlite dsn := "file::memory:?cache=shared"


比如旧语法：
// +build linux,386
对应的新语法：
//go:build linux && 386

// +build !windows,!plan9
执行 Go1.17 的 gofmt 后，变成了这样：
//go:build !windows && !plan9
// +build !windows,!plan9

Go1.17 go.mod 中支持 Deprecated 注释，用来标明该模块废弃了。
// Deprecated: use example.com/mod/v2 instead.module example.com/mod
对于那些使用了被废弃的 module 的 go 项目，go list、go get 命令都会给出 warning。

reflect
ConvertibleTo 判断是可转换的，但调用 Convert 方法依然可能 panic

VUE DOCKER
FROM node:12-alpine AS build
WORKDIR /app
COPY package.json ./
RUN yarn  install
COPY . /app
RUN yarn build

FROM nginx:stable-alpine
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

docker run --rm  -it -p 3000:80/tcp docker-image-test:latest

用于探索 docker 镜像中每一层的工具
https://github.com/wagoodman/dive
brew install dive
docker pull wagoodman/dive
dive <your-image-tag>
dive golang:1.14
docker scan python-flask

仿百度文库
https://github.com/TruthHun/DocHub
类似Gitbook和看云
https://github.com/TruthHun/BookStack
https://github.com/TruthHun/bookhub
https://github.com/TruthHun/converter
https://www.bookstack.cn/
https://www.bookstack.cn/explore?cid=10&tab=popular
https://www.bookstack.cn/read/topgoer/efbecba7753baa7e.md
https://github.com/TruthHun/CloudStore

类似知乎
https://github.com/meloalright/guora
压力测试
https://github.com/link1st/go-stress-testing
go-stress-testing-mac -c 1 -n 100 -u https://www.baidu.com/
go-stress-testing -c 10 -n 10 -u ws://127.0.0.1:8089/acc
Dapr 是一个可移植的、事件驱动的运行时，用于跨云和边缘构建分布式应用程序
https://github.com/dapr/dapr
随机测试
https://github.com/dvyukov/go-fuzz

JFrog VSCODE插件GO代码安全检查

go install github.com/securego/gosec/v2/cmd/gosec@latest
https://github.com/securego/gosec
https://securego.io/
gosec ./...
gosec -exclude=G104 ./...
gosec -include=G101 ./...
XSS 和 SQL 注入，这方面 gosec 也会有相关规则检测，比如 G201、G202、G203

hash
https://github.com/cespare/xxhash
https://github.com/OneOfOne/xxhash
https://github.com/deepmind/objecthash-proto
https://github.com/benlaurie/objecthash
https://github.com/spaolacci/murmur3 #uint64
https://github.com/twmb/murmur3
hash/crc32
crc32.NewIEEE().Sum32()
crc32.ChecksumIEEE #硬件加速
hash/maphash #memhash
hash/fnv
hash/adler32
hash/crc64

package main
import (
    "fmt"
    "net"
)
func main() {
    listen, err := net.Listen("tcp", ":8888")
    if err != nil { fmt.Println("listen error: ", err); return }
    for {
        conn, err := listen.Accept()
        if err != nil { fmt.Println("accept error: ", err); break }
        go HandleConn(conn)
    }
}
func HandleConn(conn net.Conn) {
    defer conn.Close()
    packet := make([]byte, 1024)
    for {
        // 如果没有可读数据，也就是读 buffer 为空，则阻塞
        _, _ = conn.Read(packet)
        // 同理，不可写则阻塞
        _, _ = conn.Write(packet)
    }
}

CLI
https://github.com/spf13/cobra
https://github.com/urfave/cli
https://github.com/manifoldco/promptui/
https://github.com/integrii/flaggy
https://github.com/abdfnx/doko
https://github.com/wtfutil/wtf
https://github.com/k0kubun/pp
color
https://github.com/logrusorgru/aurora
https://github.com/gookit/color
https://github.com/fatih/color

GO进度条 可视化操作 TUI Progress TABLE
https://github.com/rivo/tview
https://github.com/charmbracelet/bubbles
https://github.com/charmbracelet/bubbletea
https://github.com/vbauerster/mpb
https://github.com/schollz/progressbar
https://github.com/cheggaaa/pb
https://github.com/jedib0t/go-pretty
https://github.com/Evertras/bubble-table
https://github.com/gosuri/uitable
https://github.com/jesseduffield/gocui
https://github.com/jroimartin/gocui

使用 Go + HTML5 构建跨平台的现代桌面应用程序
https://github.com/zserge/lorca

GTK LIBUI
https://github.com/andlabs/libui
https://github.com/andlabs/ui

GIT命令行工具
https://github.com/jesseduffield/lazygit

cli抓包工具 Wireshark
https://github.com/gcla/termshark

merging Go structs and maps
https://github.com/imdario/mergo

文件监控
https://github.com/fsnotify/fsnotify
https://github.com/howeyc/fsnotify
https://github.com/cli/safeexec
https://github.com/atotto/clipboard

https://github.com/tidwall/btree
https://github.com/zyedidia/generic

脚本
https://github.com/oxfeeefeee/goscript
https://github.com/gopherjs/gopherjs
https://github.com/antonmedv/golang-expression-evaluation-comparison
https://github.com/ichiban/prolog
https://github.com/robertkrimen/otto
https://github.com/dop251/goja
https://github.com/Shopify/go-lua
https://github.com/antonmedv/expr
https://github.com/Knetic/govaluate
https://github.com/PaesslerAG/gval
https://github.com/google/cel-go
https://github.com/hashicorp/go-bexpr
https://github.com/skx/evalfilter/v2
https://github.com/rencalo770/gengine
https://github.com/hyperjumptech/grule-rule-engine

code review
https://github.com/reviewdog/reviewdog

request http client
https://github.com/parnurzeal/gorequest
https://github.com/gojek/heimdall
https://github.com/go-resty/resty
https://github.com/andelf/go-curl
https://github.com/idoubi/goz
https://github.com/carlmjohnson/requests

https://github.com/cavaliercoder/grab
https://github.com/huydx/hget
https://github.com/monkeyWie/gopeed-core
https://github.com/Code-Hex/pget
https://github.com/melbahja/got
https://github.com/nareix/curl

https://github.com/projectdiscovery/httpx
go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
cat hosts.txt | httpx
httpx -list hosts.txt -silent -probe
echo 192.168.3.0/24 | httpx -silent
https://github.com/projectdiscovery/subfinder
go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
subfinder -d hackerone.com -silent| httpx -title -tech-detect -status-code
subfinder -d hackerone.com -silent | httpx -favicon
subfinder -d hackerone.com -silent | httpx -jarm
subfinder -d hackerone.com -silent | httpx -asn
httpx -l urls.txt -path /v1/api -sc
https://github.com/OJ/gobuster
go install github.com/OJ/gobuster/v3@latest
hashcat -a 3 --stdout ?l | gobuster dir -u https://mysite.com -w -
gobuster dir -u https://mysite.com/path/to/folder -c 'session=123456' -t 50 -w common-files.txt -x .php,.html
gobuster dir -u https://buffered.io -w ~/wordlists/shortlist.txt
gobuster dir -u https://buffered.io -w ~/wordlists/shortlist.txt -n
gobuster dir -u https://buffered.io -w ~/wordlists/shortlist.txt -v
gobuster dir -u https://buffered.io -w ~/wordlists/shortlist.txt -l
gobuster dir -u https://buffered.io -w ~/wordlists/shortlist.txt -q -n -e
gobuster dns -d mysite.com -t 50 -w common-names.txt
gobuster dns -d google.com -w ~/wordlists/subdomains.txt
gobuster dns -d google.com -w ~/wordlists/subdomains.txt -i
gobuster dns -d yp.to -w ~/wordlists/subdomains.txt -i
gobuster dns -d 0.0.1.xip.io -w ~/wordlists/subdomains.txt
gobuster dns -d 0.0.1.xip.io -w ~/wordlists/subdomains.txt --wildcard
gobuster vhost -u https://mysite.com -w common-vhosts.txt


前端获取文件MD5
https://github.com/satazor/js-spark-md5
https://github.com/zhuchangwu/large-file-upload

kafka lib
https://github.com/Shopify/sarama

下载器
https://github.com/iawia002/annie
网站克隆器
https://github.com/imthaghost/goclone
brew install goclone
goclone https://dribbble.com

failpoint https://www.freebsd.org/cgi/man.cgi?query=fail
https://github.com/pingcap/failpoint
https://github.com/etcd-io/gofail/

DockerSlim (docker-slim)：不要更改 Docker 容器映像中的任何内容并将其缩小至多 30 倍（对于编译语言甚至更多），以确保其安全！（免费和开源）
https://github.com/docker-slim/docker-slim
docker pull archlinux:latest
docker-slim build --target archlinux:latest --tag archlinux:curl --http-probe=false --exec "curl checkip.amazonaws.com"
docker run archlinux:curl curl checkip.amazonaws.com
docker images
docker-slim update

pigo
go get -u -f github.com/esimov/pigo/cmd/pigo
go install
pigo -in input.jpg -out output.jpg -cf cascade/facefinder
pigo -in input.jpg -out output.jpg -cf cascade/facefinder -angle=0.8 -iou=0.01

Table
https://github.com/scylladb/termtables

https://github.com/dustin/go-humanize

TOOL
https://mholt.github.io/curl-to-go/
https://zhwt.github.io/yaml-to-go/
https://xuri.me/toml-to-go/
https://mholt.github.io/json-to-go/
https://github.com/idoubi/sql2struct

HTML Template
https://github.com/valyala/quicktemplate
https://github.com/valyala/fasttemplate
https://github.com/hashicorp/consul-template

protobuf
https://github.com/gogo/protobuf

go get github.com/Kagami/go-avif/...
avif -e cat.jpg -o kitty.avif
avif -e dog.png -o doggy.avif --best -q 15
avif -e pig.png -o piggy.avif --lossless
avif -h

聊天机器人
https://github.com/kevwan/chatbot
https://github.com/zeromicro/go-zero 高性能MapReduce
go-zero 分布式锁 RedisLock 源码分析
core/stores/redis/redislock.go
https://github.com/gunthercox/ChatterBot 性能差

高性能测试工具
https://github.com/ddosify/ddosify
go install -v go.ddosify.com/ddosify@latest
ddosify -t http://domain.cn/

go install github.com/wader/ansisvg@master
ansisvg -h

https://github.com/kevinburke/hostsfile
OAUTH google microsoft yahoo
https://github.com/adhocore/goic
实时空间搜索 位于其他对象内或与其他对象相交的对象和点 之内 相交 附近
https://github.com/tidwall/tile38
通知广播
https://github.com/teivah/broadcast
泛型测试包
https://github.com/carlmjohnson/truthy
任意精度定点十进制数
https://github.com/shopspring/decimal

https://github.com/valyala/bytebufferpool
限流
https://github.com/juju/ratelimit
https://github.com/uber-go/ratelimit
一个强大的 HTTP 路由器和 URL 匹配器
https://github.com/gorilla/mux
检查我的页面
https://github.com/greenpeace/gpes-check-my-pages
用于 Web 自动化和抓取的 Devtools 驱动程序
https://github.com/go-rod/rod
网站上抓取电子邮件的 CLI 实用程序
https://github.com/lawzava/scrape
https://github.com/lawzava/emailscraper
brew tap lawzava/scrape https://github.com/lawzava/scrape
brew install scrape
scrape -w https://lawzava.com
微博爬虫
https://github.com/eureka101v/WeiboSpiderGo
https://chromedriver.chromium.org/downloads

yaml/json/toml/hcl/ini/env/
github.com/spf13/viper

// main.go
package main
import (
 "fmt"
)
var Version string
func main() {
 fmt.Println("Version:", Version)
}
现在写一个 shell 脚本，通过该脚本对以上代码进行编译：
#!/bin/sh
version=""
if [ -f "VERSION" ]; then
    version=`cat VERSION`
fi
if [[ -z $version ]]; then
    if [ -d ".git" ]; then
        version=`git symbolic-ref HEAD | cut -b 12-`-`git rev-parse HEAD`
    else
        version="unknown"
    fi
fi
go build -ldflags "-X main.Version=$version" main.go
如果有 VERSION 文件，读取该文件的值作为版本信息；

go get -u golang.org/x/perf/cmd/benchstat
benchstat result.txt
go test -v -bench=. -count=3 -benchmem | tee result.txt

https://mp.weixin.qq.com/s/LMRpKC-e0WZfwUNTYYM5tA
fsnotify 创建一个文件监听器
watcher, err := fsnotify.NewWatcher()

环形缓冲区
https://github.com/smallnest/chanx/blob/main/ringbuffer.go
图像处理算法
https://github.com/anthonynsimon/bild
跟踪路由
https://github.com/zartbot/ztrace
ztrace -dest www.cisco.com
倒计时
https://github.com/antonmedv/countdown
网络模拟器库
https://github.com/bytedance/ns-x
模拟糟糕的网络连接
https://github.com/tylertreat/comcast
go install github.com/tylertreat/comcast@latest
$ comcast --device=eth0 --latency=250 --target-bw=1000 --default-bw=1000000 --packet-loss=10% --target-addr=8.8.8.8,10.0.0.0/24 --target-proto=tcp,udp,icmp --target-port=80,22,1000:2000
$ comcast --device=eth0 --latency=250 --target-bw=1000 --packet-loss=10%
$ comcast --stop

流量控制
https://github.com/apache/trafficcontrol
web 应用程序防火墙库
https://github.com/jptosso/coraza-waf

编译时注入版本
go build -ldflags "-X main.version=1.2" -o test test.go

性能分析
```
brew install graphviz
http://domain/debug/pprof/
go tool pprof http://domain.cn/debug/pprof/profile
go tool pprof http://domain.cn/debug/pprof/profile?debug=1
go tool pprof http://domain.cn/debug/pprof/profile?seconds=120
go tool pprof http://domain.cn/debug/pprof/heap
go tool pprof http://domain.cn/debug/pprof/goroutine?debug=1
go tool pprof http://domain.cn/debug/pprof/block
go tool pprof http://domain.cn/debug/pprof/mutex
go tool pprof http://domain.cn/debug/pprof/allocs

go tool pprof ~/Downloads/profile
top
top 20
list runtime.futex
web
traces
go tool pprof --http=:8080 ~/Downloads/profile
go tool trace [flags] pkg.test trace.out
env GODEBUG=gctrace=1 godoc -http=:8080
```

debug/pprof
allocs: 过去所有内存分配的样本
block: 堆栈导致对原始同步的阻塞
cmline: 当前程序的命令行调用
goroutine: 当前所有goroutine的堆栈跟踪
heap: 活动对象内存分配的采样。您可以指定gc GET参数以在获取堆样本之前运行GC。
mutex: 竞争互斥持有人的堆栈痕迹
profile: CPU配置文件。您可以在GET参数中指定持续时间。获取概要文件后，请使用go tool pprof命令调查文件。
threadcreate: 导致创建新OS线程的堆栈跟踪
trace: 当前程序执行的痕迹。您可以在GET参数中指定持续时间。获取跟踪文件后，使用go工具trace命令调查跟踪。
brew install graphviz
yum install graphviz
apt install graphviz
https://graphviz.org/download/

调用栈分析
curl http://domain.cn/debug/pprof/trace?seconds=20 > trace.out
$ go tool trace trace.out
go tool trace http://domain.cn/debug/pprof/trace?seconds=20

CPU分析
go tool pprof http://domain.cn/debug/pprof/profile
top/top5/top -cum #消耗 CPU 前五的函数
flat: 采样时，该函数正在运行的次数*采样频率(10ms)，即得到估算的函数运行”采样时间”。这里不包括函数等待子函数返回。
flat%: flat / 总采样时间值
sum%: 前面所有行的 flat% 的累加值，如第二行 sum% = 20.82% = 11.12% + 9.70%
cum: 采样时，该函数出现在调用堆栈的采样时间，包括函数等待子函数返回。因此 flat <= cum
cum%: cum / 总采样时间值
list Func: 显示函数名以及每行代码的采样分析
tree Func
web
go tool pprof bin/dupsdc http://127.0.0.1:6060/debug/pprof/profile
go tool pprof -inuse_objects http://127.0.0.1:6060/debug/pprof/heap

查看活动对象的内存分配情况
go tool pprof http://domain.cn/debug/pprof/heap
go tool pprof -http=:8080 http://domain.cn/debug/pprof/heap
常驻内存情况
go tool pprof -inuse_space http://domain.cn/debug/pprof/heap
内存临时分配
go tool pprof -alloc_objects http://domain.cn/debug/pprof/heap
go tool pprof -alloc_space/-inuse_space http://localhost:8888/debug/pprof/heap

查看导致阻塞同步的堆栈跟踪
go tool pprof http://domain.cn/debug/pprof/block
查看导致互斥锁的竞争持有者的堆栈跟踪
go tool pprof http://domain.cn/debug/pprof/mutex
查看创建新OS线程的堆栈跟踪
go tool pprof http://domain.cn/debug/pprof/threadcreate
go tool pprof http://domain.cn/debug/pprof/goroutine

PProf 火焰图
go install github.com/google/pprof@latest
go tool pprof http://domain.cn/debug/pprof/profile
pprof -http=:8080 http://domain.cn/debug/pprof/profile
http://localhost:8080/ui/flamegraph


safemap
https://github.com/zeromicro/go-zero

查找域名的 A 记录
 iprecords, _ := net.LookupIP("facebook.com")
查找域名的 CNAME 记录
 cname, _ := net.LookupCNAME("m.facebook.com")
查找域名的 PTR 指针记录
 ptr, _ := net.LookupAddr("6.8.8.8")
查找域名的名称服务器（NS）记录
 nameserver, _ := net.LookupNS("facebook.com")
查找域的 MX 记录
 mxrecords, _ := net.LookupMX("facebook.com")
查找域名的 SRV 服务记录
 cname, srvs, err := net.LookupSRV("xmpp-server", "tcp", "golang.org")
查找域名的 TXT 记录
 txtrecords, _ := net.LookupTXT("facebook.com")
标准库 text/template 包
https://mp.weixin.qq.com/s/k__ynwBkIcwEK7HAL4WUCA

热启动
https://github.com/fvbock/endless
singleflight
https://mp.weixin.qq.com/s/JUkxGbx1Ufpup3Hx08tI2w
https://github.com/marwan-at-work/singleflight
https://pkg.go.dev/golang.org/x/sync/singleflight

插件系统
https://mp.weixin.qq.com/s/OCETjB1Tm2vkdOuiWJMJ5Q
https://mp.weixin.qq.com/s/VRl1I1NUU3Syw9rReUyHEQ
https://github.com/dullgiulio/pingo
https://github.com/vladimirvivien/go-plugin-example
https://github.com/traefik/plugindemo
https://github.com/campoy/golang-plugins
https://github.com/apache/apisix-go-plugin-runner
https://github.com/Kong/go-pluginserver
https://github.com/falcosecurity/plugin-sdk-go
https://github.com/falcosecurity/plugins
https://github.com/33cn/plugin
https://github.com/33cn/chain33
https://github.com/hashicorp/go-plugin

swagger
https://github.com/swaggo/swag
github.com/swaggo/echo-swagger
github.com/go-swagger/go-swagger
go install github.com/go-swagger/go-swagger/cmd/swagger@latest
swagger generate spec -o swagger.yaml
swagger serve --no-open -F=redoc --port 36666 swagger.yaml
swagger generate spec -i ./swagger.yaml -o ./swagger.json
swagger serve https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json
swagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json
swagger serve http://swagger.51-learning.cn/doc.json

Mock 代码自动生成器
github.com/vektra/mockery
数据库迁移工具
github.com/golang-migrate

修改struct字段标签
github.com/fatih/gomodifytags
gomodifytags -file demo.go
-line, -offset, -struct or -all is not passed
gomodifytags -file demo.go -struct Server
one of [-add-tags, -add-options, -remove-tags, -remove-options, -clear-tags, -clear-options] should be defined
gomodifytags -file demo.go -struct Server -add-tags json
gomodifytags -file demo.go -struct Server -add-tags json -w
gomodifytags -file demo.go -struct Server -add-tags json -w --quiet
gomodifytags -file demo.go -struct Server -add-tags json,xml
gomodifytags -file demo.go -struct Server -add-tags json,xml -transform camelcase
gomodifytags -file demo.go -struct Server -add-tags gaum -template "field_name={field}"
gomodifytags -file demo.go -struct Server -add-tags json,validate:gt=1,scope:read-only
gomodifytags -file demo.go -struct Server -add-tags json -add-options json=omitempty
gomodifytags -file demo.go -struct Server -add-tags json --skip-unexported
gomodifytags -file demo.go -struct Server -remove-tags xml
gomodifytags -file demo.go -struct Server -remove-tags json,xml
gomodifytags -file demo.go -struct Server -clear-tags
gomodifytags -file demo.go -struct Server -remove-options json=omitempty
gomodifytags -file demo.go -struct Server -remove-options json=omitempty,xml=cdata
gomodifytags -file demo.go -struct Server -clear-options
gomodifytags -file demo.go -line 8,11 -clear-tags xml
gomodifytags -file demo.go -line 6,7 -remove-tags xml
gomodifytags -file demo.go -line 5,7 -add-tags bson
gomodifytags -file demo.go -struct Server -add-tags xml -format json

errString := err.Error()
fmt.Println(errString)
switch {
case strings.Contains(errString, "timeout"):
    fmt.Println("Timeout")
case strings.Contains(errString, "no such host"):
    fmt.Println("Unknown host")
case strings.Contains(errString, "connection refused"):
    fmt.Println("Connection refused")
default:
    fmt.Printf("Unknown error:%s", errString)
}

其中，net.OpError.Err 可能是以下几种类型：
net.DNSError
net.InvalidAddrError
net.UnknownNetworkError
net.AddrError
net.DNSConfigError
*os.SyscallError

syscall.ECONNREFUSED
syscall.ETIMEDOUT

func isCaredNetError(err error) bool {
    netErr, ok := err.(net.Error)
    if !ok {
        return false
    }
    if netErr.Timeout() {
        log.Println("timeout")
        return true
    }
    opErr, ok := netErr.(*net.OpError)
    if !ok {
        return false
    }
    switch t := opErr.Err.(type) {
    case *net.DNSError:
        log.Printf("net.DNSError:%+v", t)
        return true
    case *os.SyscallError:
        log.Printf("os.SyscallError:%+v", t)
        if errno, ok := t.Err.(syscall.Errno); ok {
            switch errno {
            case syscall.ECONNREFUSED:
                log.Println("connect refused")
                return true
            case syscall.ETIMEDOUT:
                log.Println("timeout")
                return true
            }
        }
    }
    return false
}

https://github.com/owenthereal/goup
goup list
goup listall
goup uninstall
goup install 1.16.0

将您的终端作为 Web 应用程序共享
https://github.com/sorenisanerd/gotty

自动构建和部署
https://github.com/koderover/zadig
https://github.com/koderover/zadig-portal

安全地将东西从一台计算机转移到另一台计算机
https://github.com/magic-wormhole/magic-wormhole


https://github.com/karalabe/xgo
docker pull karalabe/xgo-latest
go install github.com/karalabe/xgo
xgo github.com/project-iris/iris
-tags='tag list'
-ldflags='flag list'
-buildmode=mode
xgo -go latest github.com/project-iris/iris
xgo -go 1.6.1 github.com/project-iris/iris
xgo -out iris-v0.3.2 github.com/project-iris/iris
xgo --branch release-branch.go1.4 golang.org/x/tools/cmd/goimports
xgo --remote github.com/golang/tools golang.org/x/tools/cmd/goimports
xgo --pkg cmd/goimports golang.org/x/tools
--targets=linux/arm
--targets=windows/*,darwin/*
--targets=*/arm
--targets=*/*

身份验证包 亚马逊/苹果/GitHub/Facebook/GitLab/Google/Instagram/
https://github.com/markbates/goth

包管理工具
https://github.com/snapcore/snapd
https://snapcraft.io/docs/installing-snapd
dnf install epel-release
dnf install snapd
snap find vlc
snap info vlc
snap install vlc
snap remove vlc
snap install snap-store

Web 应用程序的单点登录多因素门户
https://github.com/authelia/authelia

音视频直播流媒体服务器
git clone https://github.com/q191201771/lal.git
cd lal
./bin/lalserver -c ./conf/lalserver.conf.json
ffmpeg -re -i demo.flv -c:a copy -c:v copy -f flv rtmp://127.0.0.1:1935/live/test110
ffplay rtmp://127.0.0.1/live/test110
rtsp 流媒体
https://github.com/EasyDarwin/EasyDarwin
./easydarwin
http://localhost:10008 #admin/admin
测试推流
ffmpeg -re -i C:\Users\Administrator\Videos\test.mkv -rtsp_transport tcp -vcodec h264 -f rtsp rtsp://localhost/test
ffmpeg -re -i C:\Users\Administrator\Videos\test.mkv -rtsp_transport udp -vcodec h264 -f rtsp rtsp://localhost/test
测试播放
ffplay -rtsp_transport tcp rtsp://localhost/test
ffplay rtsp://localhost/test

go进程
go install github.com/google/gops@latest
gops
gops pid
gops tree
gops stack pid
gops memstats pid
gops gc pid
gops setgc pid
gops version pid
gops stats pid
gops pprof-cpu pid
gops pprof-heap pid


用于视频录制和直播C++
https://github.com/obsproject/obs-studio
https://obsproject.com/
视频编辑工具C++
https://github.com/mltframework/shotcut
https://www.shotcut.org/download/
用于对象存储的类似 Git 的功能
https://github.com/treeverse/lakeFS
命令行模糊查找器
https://github.com/junegunn/fzf
Go router
https://mp.weixin.qq.com/s/QEwUFIvuLD7FfUAHZhYNvg
runtime.KeepAlive
https://medium.com/a-journey-with-go/go-keeping-a-variable-alive-c28e3633673a

GO Simple Tunnel - 一个用 golang 编写的简单隧道
https://github.com/ginuerzh/gost
作为标准HTTP/SOCKS5代理
gost -L=:8080
设置代理认证信息
gost -L=admin:123456@localhost:8080
多端口监听
gost -L=http2://:443 -L=socks5://:1080 -L=ss://aes-128-cfb:123456@:8338
设置转发代理
gost -L=:8080 -F=192.168.1.1:8081
转发代理认证
gost -L=:8080 -F=http://admin:123456@192.168.1.1:8081
本地端口转发(TCP)
gost -L=tcp://:2222/192.168.1.1:22 [-F=...]
将本地TCP端口2222上的数据(通过代理链)转发到192.168.1.1:22上。当代理链末端(最后一个-F参数)为SSH转发通道类型时，gost会直接使用SSH的本地端口转发功能:
gost -L=tcp://:2222/192.168.1.1:22 -F forward+ssh://:2222
本地端口转发(UDP)
gost -L=udp://:5353/192.168.1.1:53?ttl=60 [-F=...]
远程端口转发(TCP)
gost -L=rtcp://:2222/192.168.1.1:22 [-F=... -F=socks5://172.24.10.1:1080]
远程端口转发(UDP)
gost -L=rudp://:5353/192.168.1.1:53?ttl=60 [-F=... -F=socks5://172.24.10.1:1080]
代理模式
服务端:
gost -L=http2://:443
客户端:
gost -L=:8080 -F=http2://server_ip:443
通道模式
服务端:
gost -L=h2://:443
客户端:
gost -L=:8080 -F=h2://server_ip:443
纯 Go 中的 QUIC 实现
https://github.com/lucas-clemente/quic-go
https://github.com/xyproto/algernon
https://github.com/caddyserver/caddy
https://github.com/ipfs/go-ipfs
https://github.com/syncthing/syncthing
https://github.com/traefik/traefik
https://github.com/v2fly/v2ray-core
https://github.com/moul/quicssh

https://mp.weixin.qq.com/s/yCzwcCYFLX2v8xuMnIZx_A
https://mp.weixin.qq.com/s/Ny6lYgJgKMQ9ica12BO5qw
常见内网穿透工具使用总结
https://xz.aliyun.com/t/7701
https://segmentfault.com/a/1190000021876836
nps 一款轻量级、高性能、功能强大的内网穿透代理服务器
https://github.com/ehang-io/nps
https://github.com/ehang-io/nps/releases
./nps install
./nps start
cat /etc/nps
vim conf/nps.conf
web_host= 服务器IP或者域名
web_username= admin（登录用户名）
web_password= 你的密码
web_port=8080（web管理端口）
##bridge
bridge_type=tcp
bridge_port=443    # 修改连接端口
bridge_ip=0.0.0.0
./npc -server=你的IP:8024 -vkey=唯一验证密码 -type=tcp

frp 一种快速反向代理，可帮助您将 NAT 或防火墙后面的本地服务器暴露给 Internet
https://github.com/fatedier/frp/releases
https://github.com/fatedier/frp
server A
vi frps.ini
[common]
bind_port = 7000
token = test
vhost_http_port = 7001

nohup ./frps -c ./frps.ini > /dev/null 2>&1 &
server B
vi frpc.ini
[common]
server_addr = x.x.x.x
server_port = 7000
[ssh]
type = tcp
local_ip = 127.0.0.1
local_port = 22
remote_port = 6000
./frpc -c ./frpc.ini
ssh -oPort=6000 test@x.x.x.x

wget https://raw.githubusercontent.com/stilleshan/frps/master/frps_linux_install.sh && chmod +x frps_linux_install.sh && ./frps_linux_install.sh

vi /lib/systemd/system/frp.service
[Unit]
Description=frp server
After=network.target network-online.target syslog.target
Wants=network.target network-online.target

[Service]
Type=simple
ExecStart=/path/frps -c /path/frps.ini

[Install]
WantedBy=multi-user.target

systemctl enable frp
systemctl start frp

EW
https://github.com/rootkiter/EarthWorm
https://github.com/rootkiter/Binary-files
http://rootkiter.com/EarthWorm/
1. 正向 SOCKS v5 服务器
./ew -s ssocksd -l 1080
2. 反弹 SOCKS v5 服务器
a) 先在一台具有公网 ip 的主机A上运行以下命令：
$ ./ew -s rcsocks -l 1080 -e 8888
b) 在目标主机B上启动 SOCKS v5 服务 并反弹到公网主机的 8888端口
$ ./ew -s rssocks -d 1.1.1.1 -e 8888

ngrok
https://github.com/inconshreveable/ngrok
./ngrok authtoken 1hAotxhmORtzCYvUc3BsxDBPh1H_******************
./ngrok http 80
有授权的设置文件共享
ngrok http -auth="user:password" file:///Users/alan/share
无授权的设置文件共享
ngrok http "file:///C:\Users\alan\Public Folder"
将主机的3389的TCP端口暴露到公网
ngrok tcp 3389

云原生应用代理
https://github.com/traefik/traefik
./traefik --configFile=traefik.toml
docker run -d -p 8080:8080 -p 80:80 -v $PWD /traefik.toml:/etc/traefik/traefik.toml traefik
https://doc.traefik.io/traefik/
https://info.traefik.io/en/request-demo-traefik-enterprise

https://github.com/traefik/mesh
以太坊协议的官方 Go 实现
https://github.com/ethereum/go-ethereum

本地证书
https://github.com/FiloSottile/mkcert
brew install mkcert
brew install nss # if you use Firefox
mkcert -install
mkcert example.com "*.example.com" example.test localhost 127.0.0.1 ::1
mkcert -key-file key.pem -cert-file cert.pem example.com *.example.com
mkcert filippo@example.com

GO 范型
https://mp.weixin.qq.com/s/z30xJqiweIROlSp1YgcIsQ
golang.org/x/exp

获取项目目录
package main
import (
    "fmt"
    "os"
    "path/filepath"
)
func main() {
    ex, err := os.Executable()
    if err != nil {
        panic(err)
    }
    exPath := filepath.Dir(ex)
    realPath, err := filepath.EvalSymlinks(exPath)
    if err != nil {
        panic(err)
    }
    fmt.Println(filepath.Dir(realPath))
}

Go 编译器适用于小地方。微控制器、WebAssembly (WASM/WASI) 和命令行工具。基于LLVM
https://github.com/tinygo-org/tinygo
https://webassembly.org/roadmap/
AssemblyScript 是一个 TypeScript 到 WebAssembly 的编译器
https://github.com/AssemblyScript/assemblyscript
wasm-bindgen
https://github.com/rustwasm/wasm-bindgen
如果你熟悉 Rust ，就知道它在 WebAssembly 领域的贡献是非常大的
https://rustwasm.github.io/
FFMPEG.WASM
https://ffmpegwasm.netlify.app/
https://github.com/tetratelabs/wazero

https://github.com/maxence-charriere/go-app
https://github.com/maxence-charriere/lofimusic
https://github.com/pojntfx/liwasc
https://github.com/vugu/vugu

图片
内容感知图像大小调整库
https://github.com/esimov/caire

两个地理纬度，经度坐标之间的距离
https://github.com/jftuga/geodist
操作ISO文件
https://github.com/kdomanski/iso9660
https://github.com/cristalhq/hedgedhttp
对冲 HTTP 客户端，有助于大规模减少尾部延迟

简单的云系统 看运行docker
https://github.com/IceWhaleTech/CasaOS
wget -qO- https://get.icewhale.io/casaos.sh | bash
curl -fsSL https://get.icewhale.io/casaos.sh | bash
curl -fsSL https://get.icewhale.io/casaos-uninstall.sh | bash

IM
https://github.com/Terry-Mao/goim

可以在任何地方运行的快速 dns 代理，内置于黑洞互联网广告和恶意软件服务器
https://github.com/looterz/grimd
https://github.com/kenshinx/godns
https://github.com/miekg/dns
https://github.com/AdguardTeam/urlfilter
https://github.com/AdguardTeam/dnsproxy
https://github.com/AdguardTeam/AdGuardHome
https://github.com/coredns/coredns

https://github.com/kyokomi/emoji
https://github.com/go-git/go-git

BDD TEST
https://github.com/onsi/ginkgo

混淆 Go 构建
https://github.com/burrowers/garble
garble -literals build 包名

云存储
```
OSS OBS Qiniu
https://github.com/go-admin-team/go-admin/blob/master/common/file_store/initialize.go
https://github.com/flipped-aurora/gin-vue-admin
https://github.com/flipped-aurora/gin-vue-admin/tree/main/server/utils/upload
https://github.com/qor/oss
阿里OSS
https://github.com/aliyun/aliyun-oss-go-sdk
https://github.com/denverdino/aliyungo
https://help.aliyun.com/document_detail/32147.html?spm=a2c4g.11186623.6.1358.184214a08CEnM2
https://doc.oss.aliyuncs.com/#_Delete_Bucket
http://<你的bucket名字>.oss.aliyuncs.com/<你的object名字>
oss-cn-hangzhou.aliyuncs.com
又拍
https://github.com/upyun/go-sdk
https://help.upyun.com/knowledge-base/rest_api/
v0.api.upyun.com/<bucket>/<path>
腾讯
github.com/tencentyun/cos-go-sdk-v5
https://cloud.tencent.com/document/product/436/31215
http://<BucketName-APPID>.cos.accelerate.myqcloud.com
https://cloud.tencent.com/document/product/436/15392
七牛
https://github.com/qiniu/go-sdk
https://developer.qiniu.com/kodo/1238/go
https://developer.qiniu.com/kodo/1731/api-overview
```


审批流
```
https://github.com/go-workflow/workflow-ui
https://github.com/go-workflow/go-workflow
https://github.com/tiger1103/gfast
https://github.com/tiger1103/gfast-ui

```

pulsar 消息队列(MAC安装不上无法测试)
```
https://github.com/apache/pulsar-client-go
https://pulsar.apache.org/docs/en/client-libraries-go/
https://pulsar.apache.org/docs/en/kubernetes-helm/

docker pull apachepulsar/pulsar
docker pull apachepulsar/pulsar:2.8.0
docker run -it -p 6650:6650 -p 8080:8080 --mount source=pulsardata,target=/pulsar/data --mount source=pulsarconf,target=/pulsar/conf apachepulsar/pulsar:2.8.0 bin/pulsar standalone
docker run -it -p 6650:6650 -p 8080:8080 -v $PWD/data:/pulsar/data apachepulsar/pulsar:latest bin/pulsar standalone
pulsar://localhost:6650
pulsar+ssl://localhost:6651
http://localhost:8080

```

netlink 套接字
https://github.com/mdlayher/netlink

https://github.com/mvdan/gofumpt
NVM
https://github.com/coreybutler/nvm-windows
http/template
https://mp.weixin.qq.com/s/qvqH45HOtHc6BdORcSOXqw

go-zero对接分布式事务dtm
https://github.com/Mikaelemmmm/gozerodtm
https://github.com/zeromicro/go-zero
https://github.com/dtm-labs/dtm
https://www.dtm.pub/guide/start.html

GO Charts
https://github.com/go-echarts/go-echarts
https://github.com/wcharczuk/go-chart

用于 Jupyter 笔记本和交互的 Go 内核
https://github.com/gopherdata/gophernotes

构建流式数据pipeline
https://github.com/deliveryhero/pipeline

爬虫 数据采集 crawler
https://github.com/henrylee2cn/pholcus

option设计
https://mp.weixin.qq.com/s/8vQBEi3a7VFsU1NL-JKMJw
https://github.com/mosn/holmes

加密文件系统
https://github.com/rfjakob/gocryptfs
dnf install gocryptfs
$ mkdir cipher plain
$ ./gocryptfs -init cipher
$ ./gocryptfs cipher plain
https://github.com/cryfs/cryfs

基于 FUSE 的文件系统，用于跨机器集群复制 SQLite 数据库
https://github.com/superfly/litefs
主节点
litefs -config /path/to/litefs.yml
mount-dir: "/path/to/mnt"

http:
  addr: ":20202"

consul:
  url: "http://localhost:8500"
  advertise-url: "http://localhost:20202"
副节点
litefs -config /path/to/litefs-2.yml
mount-dir: "/path/to/another_mnt"

http:
  addr: ":30303"

consul:
  url: "http://localhost:8500"
  advertise-url: "http://localhost:30303"

分布式Sqlite高度一致
https://github.com/rqlite/rqlite

简单的灾难恢复工具
wget https://github.com/benbjohnson/litestream/releases/download/v0.3.9/litestream-v0.3.9-linux-amd64.tar.gz
https://github.com/benbjohnson/litestream
export LITESTREAM_ACCESS_KEY_ID=minioadmin
export LITESTREAM_SECRET_ACCESS_KEY=minioadmin
litestream replicate fruits.db s3://mybkt.localhost:9000/fruits.db
litestream restore -o fruits2.db s3://mybkt.localhost:9000/fruits.db
sqlite3 fruits2.db 'SELECT * FROM fruits'


Phalanx 是一个云原生分布式搜索引擎
https://github.com/mosuka/phalanx
非常简单的 Go 2D 游戏库 编译成任天堂 Switch 的本地二进制文件
https://github.com/hajimehoshi/ebiten
https://github.com/faiface/pixel

轻松安全地将内容从一台计算机发送到另一台计算机
https://github.com/schollz/croc
curl https://getcroc.schollz.com | bash
brew install croc
go install github.com/schollz/croc/v9@latest
croc code-phrase
croc send [file(s)-or-folder]
croc send --code [code-phrase] [file(s)-or-folder]
croc --yes --overwrite <code>
croc send --text "hello world"

一个简单的 WireGuard VPN 服务器 GUI
https://github.com/subspacecloud/subspace

http.MaxBytesHandler
https://pkg.go.dev/net/http@master#MaxBytesHandler

https://github.com/lemnos/tt
tt -quotes en
tt -n 10 -g 5 生成一个由 50 个随机抽取的单词组成的测试，分为 5 组，每组 10 个单词。
tt -t 10 开始持续 10 秒的定时测试。
tt -theme gruvbox 以 gruvbox 主题开始 tt
shuf -n 40 /usr/share/dict/words|tt 生成一个包含 40 个随机单词的测试，这些单词是从系统的字典中抽取的
curl http://api.quotable.io/random|jq '[.text=.content|.attribution=.author]'|tt -quotes - 生成一个包含随机报价的测试

https://github.com/syncthing/syncthing
https://docs.syncthing.net/users/syncthing.html

https://github.com/teddysun/across
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh
chmod +x bbr.sh
./bbr.sh
安装过程中需要进行几次选择，其中混淆方式推荐tls1.2_ticket_auth，协议推荐使用auth_sha1_v4、auth_aes128_md5或auth_aes128_sha1。
wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log
systemctl start shadowsocks-r

https://help.loliloli.live/jiao-cheng-yu-xia-zai/xia-zai-ye-mian
https://github.com/v2ray/v2ray-core
https://github.com/v2fly/v2ray-core
https://github.com/shadowsocks/v2ray-plugin
https://www.v2fly.org/
https://www.v2fly.org/awesome/tools.html#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7
https://github.com/Dreamacro/clash
https://github.com/yichengchen/clashX
https://github.com/yichengchen/clashX/releases
https://bluedoc.io/agentneo/docs/mk22
https://agentneo.tech/
https://github.com/shadowsocks/go-shadowsocks2
go install github.com/shadowsocks/go-shadowsocks2@latest
server
go-shadowsocks2 -s 'ss://AEAD_CHACHA20_POLY1305:your-password@:8488' -verbose
client
go-shadowsocks2 -c 'ss://AEAD_CHACHA20_POLY1305:your-password@[server_address]:8488' \
    -verbose -socks :1080 -u -udptun :8053=8.8.8.8:53,:8054=8.8.4.4:53 \
                             -tcptun :8053=8.8.8.8:53,:8054=8.8.4.4:53
https://github.com/WireGuard/wireguard-go
https://git.zx2c4.com/wireguard-go
ip link add wg0 type wireguard
ip link del wg0

https://github.com/gokrazy/gokrazy
https://github.com/Cian911/switchboard
https://github.com/GavinClarke0/LocklessGenericRingBuffer
https://github.com/gogradle/gogradle
https://github.com/yudai/gotty

https://cloud.tencent.com/developer/article/1546113
https://p3terx.com/archives/rclone-advanced-user-manual-common-command-parameters.html
https://sunpma.com/864.html
https://github.com/rclone/rclone
brew install rclone
rclone config
第一步选择 n，然后回车输入一个 name，建议这个 name 设置的简单好记一点
mkdir -p /home/gdrive
screen -S rclone
rclone mount mygd: /home/gdrive --allow-other --allow-non-empty --vfs-cache-mode writes

https://gohugo.io/getting-started/quick-start/
https://themes.gohugo.io/
https://themes.gohugo.io/gohugo-theme-ananke/
https://github.com/gohugoio/hugo
brew install hugo
hugo version
hugo new site quickstart
cd quickstart
git init
git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
hugo new posts/my-first-post.md
hugo server -D

用于秘密管理、加密即服务和特权访问管理的工具
https://github.com/hashicorp/vault

软件开发生命周期 安全协作
https://github.com/mattermost/mattermost-server
https://github.com/mattermost/mattermost-webapp
https://github.com/mattermost/mattermost-mobile
https://github.com/mattermost/desktop
https://mattermost.com/marketplace/

https://github.com/tsenart/vegeta
brew install vegeta

https://github.com/iawia002/lux
go install github.com/iawia002/lux@latest
brew install lux
lux "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
lux -i "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
lux -i -p "https://www.bilibili.com/bangumi/play/ep198061"
lux -F ~/Desktop/u.txt

AI照片
https://github.com/photoprism/photoprism

Pyroscope
Pyroscope是一个开源平台，由服务器和代理组成。它允许用户以 CPU 和磁盘高效的方式收集、存储和查询分析数据。
Parca
Parca收集、存储和提供配置文件，以便随着时间的推移进行查询。它是开源的，可以部署在生产环境中，因为 Parca 专注于对两种主要类型的配置文件进行采样分析：跟踪和采样。
Datadog
Datadog Continuous Profiler始终在任何环境（包括生产环境）中分析和比较代码性能。它指出了由低效代码导致的难以复制的生产问题。还具有自动代码分析洞察力。
Google - Cloud Profiler
Cloud Profiler是一种低开销的统计分析器，可从您的生产应用程序中持续收集 CPU 使用率和内存分配信息。它具有可操作的应用程序分析、低影响的生产 Profilin 和广泛的平台支持。

webdav
https://github.com/hacdias/webdav
https://github.com/hacdias/webdav/releases/tag/v4.1.1
wget https://github.com/hacdias/webdav/releases/download/v4.1.1/linux-amd64-webdav.tar.gz
tar xvzf linux-amd64-webdav.tar.gz
vi ./webdav.yaml
address: 0.0.0.0
port: 0
auth: true
tls: false
cert: cert.pem
key: key.pem
prefix: /
debug: false

scope: .
modify: true
rules: []

cors:
  enabled: true
  credentials: true
  allowed_headers:
    - Depth
  allowed_hosts:
    - http://localhost:8080
  allowed_methods:
    - GET
  exposed_headers:
    - Content-Length
    - Content-Range
users:
  - username: admin
    password: admin
    scope: /a/different/path
  - username: encrypted
    password: "{bcrypt}$2y$10$zEP6oofmXFeHaeMfBNLnP.DO8m.H.Mwhd24/TOX2MWLxAExXi4qgi"
  - username: basic
    password: basic
    modify:   false
    rules:
      - regex: false
        allow: false
        path: /some/file
      - path: /public/access/
        modify: true
webdav -c ./webdav.yaml

vi /usr/lib/systemd/system/webdav.service
[Unit]
Description=WebDAV server
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/bin/webdav --config /etc/webdav.yaml
Restart=on-failure

[Install]
WantedBy=multi-user.target

systemctl daemon-reload
systemctl start webdav
systemctl enable webdav
systemctl status webdav

location / {
    proxy_pass http://127.0.0.1:8080;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header REMOTE-HOST $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
}

net use Y: https://dav.engr-z.com/ /user:engrz /persistent:YES 密码
apt install davfs2
mount -t davfs http://dav.engr-z/ ./webdav/

go install github.com/bitnami/bcrypt-cli@latest
echo -n supersecret | bcrypt-cli
echo -n supersecret | bcrypt-cli --cost=16

https://github.com/blurooo/go-monitor

生成so文件
go build -buildmode=c-shared -o s1.so s1.go
vi s1.go
package main
import (
  "C" //C必须导入
)
//export run
func run(n int) int {
  return n*2
}
func main() {
}

重试
https://github.com/sethvargo/go-retry
NewConstant(1 * time.Second) 1s -> 1s -> 1s -> 1s -> 1s -> 1s
NewExponential(1 * time.Second) 1s -> 2s -> 4s -> 8s -> 16s -> 32s -> 64s
NewFibonacci(1 * time.Second) 1s -> 1s -> 2s -> 3s -> 5s -> 8s -> 13s
随机抖动
b := NewFibonacci(1 * time.Second)
// Return the next value, +/- 500ms
b = WithJitter(500*time.Millisecond, b)
// Return the next value, +/- 5% of the result
b = WithJitterPercent(5, b)
最大重试次数
b := NewFibonacci(1 * time.Second)
// Stop after 4 retries, when the 5th attempt has failed. In this example, the worst case elapsed
// time would be 1s + 1s + 2s + 3s = 7s.
b = WithMaxRetries(4, b)
上限持续时间
b := NewFibonacci(1 * time.Second)
// Ensure the maximum value is 2s. In this example, the sleep values would be
// 1s, 1s, 2s, 2s, 2s, 2s...
b = WithCappedDuration(2 * time.Second, b)
最大努力限制，请指定最大持续时间
b := NewFibonacci(1 * time.Second)
// Ensure the maximum total retry time is 5s.
b = WithMaxDuration(5 * time.Second, b)

https://github.com/wailsapp/wails

https://github.com/showwin/speedtest-go
https://github.com/showwin/speedtest-go/releases

推荐系统
https://github.com/gorse-io/gorse

https://github.com/uber-go/goleak
go get -u go.uber.org/goleak
func TestLeak(t *testing.T) {
 defer goleak.VerifyNone(t)
 leak()
}
goleak.Find()
func TestMain(m *testing.M) {
  goleak.VerifyTestMain(m)
}

语义版本控制
https://semver.org/

WMI
https://github.com/yusufpapurcu/wmi

单元测试
https://github.com/agiledragon/gomonkey
https://github.com/bouk/monkey

go test
-test.run pattern: 只跑哪些单元测试用例
-test.bench patten: 只跑那些性能测试用例
-test.benchmem : 是否在性能测试的时候输出内存情况
-test.benchtime t : 性能测试运行的时间，默认是1s
-test.cpuprofile cpu.out : 是否输出cpu性能分析文件
-test.memprofile mem.out : 是否输出内存性能分析文件
-test.blockprofile block.out : 是否输出内部goroutine阻塞的性能分析文件
-test.memprofilerate n : 内存性能分析的时候有一个分配了多少的时候才打点记录的问题。这个参数就是设置打点的内存分配间隔，也就是profile中一个sample代表的内存大小。默认是设置为512 * 1024的。如果你将它设置为1，则每分配一个内存块就会在profile中有个打点，那么生成的profile的sample就会非常多。如果你设置为0，那就是不做打点了。
你可以通过设置memprofilerate=1和GOGC=off来关闭内存回收，并且对每个内存块的分配进行观察。
-test.blockprofilerate n: 基本同上，控制的是goroutine阻塞时候打点的纳秒数。默认不设置就相当于-test.blockprofilerate=1，每一纳秒都打点记录一下
-test.parallel n : 性能测试的程序并行cpu数，默认等于GOMAXPROCS。
-test.timeout t : 如果测试用例运行时间超过t，则抛出panic
-test.cpu 1,2,4 : 程序运行在哪些CPU上面，使用二进制的1所在位代表，和nginx的nginx_worker_cpu_affinity是一个道理
-test.short : 将那些运行时间较长的测试用例运行时间缩短
-test.outputdir : 输出目录

Go语言竞态检测
go test -race mypkg
go run -race main.go
go build -race main.go

go vet ./...
该命令检查 Go 源代码并报告可疑的情况，例如 Printf 调用，其参数与格式字符串不对齐。Vet 使用的启发式方法不能保证所有报告都是真实的问题，但它可以发现编译器没有捕获到的错误。

逃逸分析(escape analysis)
go build -gcflags=-m main.go
go run -gcflags "-m -l" main.go
发生逃逸
在某个函数中new或字面量创建出的变量，将其指针作为函数返回值，则该变量一定发生逃逸（构造函数返回的指针变量一定逃逸）
被已经逃逸的变量引用的指针，一定发生逃逸
被指针类型的slice、map和chan引用的指针，一定发生逃逸
变量类型较大，变量大小不确定，变量类型不确定，闭包等都会引发逃逸
不会逃逸
指针被未发生逃逸的变量引用
仅仅在函数内对变量做取址操作，而未将指针传出
ulimit -a
stack size => 8192
make([]int, 0, 8192) >= 8192 分配到堆上
make([]int, 0, n) n 不确定大小也到堆上
修改原对象值，或占用内存比较大的结构体，选择传指针

测试并生成覆盖率数据：
go test -race -cover  -coverprofile=./coverage.out -timeout=10m -short -v ./...
go test -coverprofile=coverage.out
go test -cover ./...
覆盖率分析：
go tool cover -func ./coverage.out
# 或生成 HTML 文件
go tool cover -html=coverage.out -o coverage.html


最终版：顺便解决时区问题 16.3M
Dockerfile文件内容
# 基础镜像，基于golang的alpine镜像构建--编译阶段
FROM golang:alpine AS builder
# 作者
MAINTAINER scoful
# 全局工作目录
WORKDIR /go/kingProject
# 把运行Dockerfile文件的当前目录所有文件复制到目标目录
COPY . /go/kingProject
# 环境变量
#  用于代理下载go项目依赖的包
ENV GOPROXY https://goproxy.cn,direct
# 编译，关闭CGO，防止编译后的文件有动态链接，而alpine镜像里有些c库没有，直接没有文件的错误
RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" main.go
RUN echo "https://mirrors.aliyun.com/alpine/v3.8/main/" > /etc/apk/repositories \
    && echo "https://mirrors.aliyun.com/alpine/v3.8/community/" >> /etc/apk/repositories \
    && apk add --no-cache tzdata \
    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  \
    && echo Asia/Shanghai > /etc/timezone \
    && apk del tzdata
# 使用scratch这个空镜像为基础镜像--运行阶段
FROM scratch AS runner
# 全局工作目录
WORKDIR /go/kingProject
# 复制编译阶段编译出来的运行文件到目标目录
COPY --from=builder /go/kingProject/main .
# 复制编译阶段里的config文件夹到目标目录
COPY --from=builder /go/kingProject/config ./config
# 复制编译阶段里的时区文件到目标目录
COPY --from=builder /etc/localtime /etc/localtime
COPY --from=builder /etc/timezone /etc/timezone
# 需暴露的端口
EXPOSE 8888
# 可外挂的目录
VOLUME ["/go/kingProject/config","/go/kingProject/log"]
# docker run命令触发的真实命令(相当于直接运行编译后的可运行文件)
ENTRYPOINT ["./main"]

最最推荐使用版：多级+alpine 21.9M
综上所述，scratch镜像有它的缺陷，是一个真的空镜像，不支持很多命令，比如cp，sh等，如果要进入容器内部查东西，都进不去，不适合真实情况，所以还是推荐alpine镜像，很小5M多，可以接受。
Dockerfile文件内容
# 基础镜像，基于golang的alpine镜像构建--编译阶段
FROM golang:alpine AS builder
# 作者
MAINTAINER scoful
# 全局工作目录
WORKDIR /go/kingProject
# 把运行Dockerfile文件的当前目录所有文件复制到目标目录
COPY . /go/kingProject
# 环境变量
#  用于代理下载go项目依赖的包
ENV GOPROXY https://goproxy.cn,direct
# 编译，关闭CGO，防止编译后的文件有动态链接，而alpine镜像里有些c库没有，直接没有文件的错误
RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" main.go

# 使用alpine这个轻量级镜像为基础镜像--运行阶段
FROM alpine AS runner
# 全局工作目录
WORKDIR /go/kingProject
# 复制编译阶段编译出来的运行文件到目标目录
COPY --from=builder /go/kingProject/main .
# 复制编译阶段里的config文件夹到目标目录
COPY --from=builder /go/kingProject/config ./config
# 将时区设置为东八区
RUN echo "https://mirrors.aliyun.com/alpine/v3.8/main/" > /etc/apk/repositories \
    && echo "https://mirrors.aliyun.com/alpine/v3.8/community/" >> /etc/apk/repositories \
    && apk add --no-cache tzdata \
    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  \
    && echo Asia/Shanghai > /etc/timezone \
    && apk del tzdata
# 需暴露的端口
EXPOSE 8888
# 可外挂的目录
VOLUME ["/go/kingProject/config","/go/kingProject/log"]
# docker run命令触发的真实命令(相当于直接运行编译后的可运行文件)
ENTRYPOINT ["./main"]

goInception是一个集审核、执行、备份及生成回滚语句于一身的MySQL运维工具， 通过对执行SQL的语法解析，返回基于自定义规则的审核结果，并提供执行和备份及生成回滚语句的功能
https://hanchuanchuan.github.io/goInception/zh/
https://github.com/hanchuanchuan/goInception

ls 命令
https://github.com/Yash-Handa/logo-ls

SQL查询工具
brew install cube2222/octosql/octosql
go install github.com/cube2222/octosql@latest
octosql plugin install postgres
octosql plugin install core/postgres@0.42.0
octosql "SELECT name, description FROM plugins.available_plugins LIMIT 2"
octosql "SELECT plugin_name, version FROM plugins.available_versions WHERE plugin_name='random_data'"
octosql plugin install random_data
octosql "SELECT * FROM random_data.users" --describe
https://github.com/cube2222/octosql
octosql "SELECT * FROM ./myfile.json"
octosql "SELECT * FROM ./myfile.json" --describe  # Show the schema of the file.
octosql "SELECT invoices.id, address, amount
         FROM invoices.csv JOIN db.customers ON invoices.customer_id = customers.id
         ORDER BY amount DESC"
octosql "SELECT customer_id, SUM(amount)
         FROM invoices.csv
         GROUP BY customer_id"

octosql "SELECT * FROM plugins.available_plugins"
octosql plugin install postgres
echo "databases:
  - name: mydb
    type: postgres
    config:
      host: localhost
      port: 5443
      database: mydb
      user: postgres
      password: postgres" > octosql.yml
octosql "SELECT * FROM mydb.users" --describe
octosql "SELECT * FROM mydb.users"

octosql "SELECT email, COUNT(*) as invoice_count
         FROM invoices.csv JOIN mydb.customers ON invoices.customer_id = customers.id
         WHERE first_name <= 'D'
         GROUP BY email
         ORDER BY invoice_count DESC" --explain 1

SQL查询JSON
https://github.com/SnellerInc/sneller
go install github.com/SnellerInc/sneller/cmd/sneller@latest
sneller -j "select count(*) from 'gharchive-1day.ion.zst'"
$ sneller -j "SELECT DISTINCT repo.name FROM 'gharchive-1day.ion.zst' WHERE repo.name ILIKE '%orvalds%'"

使用单一工具从 JSON、TOML、YAML、XML 和 CSV 文件中选择、放置和删除数据。支持格式之间的转换
https://github.com/TomWright/dasel
go install github.com/tomwright/dasel/cmd/dasel@master
echo '{"name": "Tom"}' | dasel -r json '.name'
echo '{"name": "Tom"}' | dasel -r json -w yaml
echo '{"name": "Tom"}' | dasel put string -r json '.email' 'contact@tomwright.me'
echo '{"email": "contact@tomwright.me","name": "Tom"}' | dasel delete -p json '.email'

用于生成结构化 JSON、CSV、Excel 等的单个二进制 CLI
https://github.com/multiprocessio/fakegen
$ go install github.com/multiprocessio/fakegen@latest
fakegen --rows 2 --cols 5 | jq .
fakegen -r 10 -c 2 -f csv
fakegen -r 10 -c 2 -o data.csv
fakegen -r 10 -c 2 -n 0
fakegen -r 10 -c 2 -n .5

热更新
https://github.com/oxequa/realize
https://github.com/codegangsta/gin
https://github.com/silenceper/gowatch
https://github.com/beego/bee
https://github.com/gravityblast/fresh
https://github.com/cosmtrek/air
go install github.com/cosmtrek/air@latest

天气
https://github.com/schachmat/wego

GUI
https://github.com/fyne-io/fyne
https://github.com/fyne-io/fynedesk
https://github.com/gioui/gio
https://github.com/planetdecred/godcr
https://github.com/rstudio/shiny
https://github.com/rstudio/shiny-examples

go install golang.org/x/tools/...@latest
go install honnef.co/go/tools/cmd/structlayout@latest
go install honnef.co/go/tools/cmd/structlayout-pretty@latest
go install honnef.co/go/tools/cmd/structlayout-optimize@latest
go install github.com/ajstarks/svgo/structlayout-svg@latest

structlayout -json ./main.go memAlign | structlayout-pretty
structlayout -json ./main.go memAlign | structlayout-svg
awk '$1 == "module" {print $2}' ./go.mod | xargs fieldalignment

模拟服务
https://github.com/checkr/openmock
比较
https://github.com/google/go-cmp
牌、扑克、德州
https://github.com/cardrank/cardrank

WEB模糊测试
https://github.com/ffuf/ffuf
go install github.com/ffuf/ffuf@latest
ffuf -w /path/to/wordlist -u https://target/FUZZ
ffuf -w /path/to/paramnames.txt -u https://target/script.php?FUZZ=test_value -fs 4242
ffuf -w /path/to/values.txt -u https://target/script.php?valid_name=FUZZ -fc 401
ffuf -w /path/to/postdata.txt -X POST -d "username=admin\&password=FUZZ" -u https://target/login.php -fc 401

https://github.com/rsc/benchstat
go install golang.org/x/perf/cmd/benchstat@latest
go test -bench=. -count=5 | tee old.txt
go test -bench=. -count=5 | tee new.txt
benchstat old.txt new.txt

进程级流量监控
https://github.com/rfyiamcool/go-netflow
https://github.com/chenjiandongx/sniffer
https://github.com/raboof/nethogs
https://github.com/Ettercap/ettercap
https://code.blinkace.com/pdw/iftop.git
http://slist.lilotux.net/linux/nethogs-qt/index_en.html
https://github.com/akshayKMR/hogwatch
https://github.com/iptraf-ng/iptraf-ng
http://nettop.youlink.org/
https://github.com/netsniff-ng/netsniff-ng
https://github.com/imsnif/bandwhich

ssh
https://github.com/antoniomika/sish
https://github.com/windvalley/gossh
time ansible all -i hosts.list -m command -a "uptime" -f 100 -k
time gossh command -i hosts.list -e "uptime" -c 100 -k

打字
https://github.com/bloznelis/typioca
game
https://github.com/oakmound/oak

blog Markdown
https://github.com/writefreely/writefreely
https://github.com/disgoorg/disgo
Go 中的优雅进程重新启动
https://github.com/cloudflare/tableflip #LINUX MACOS

负载测试
https://github.com/fortio/fortio
go install fortio.org/fortio@latest
fortio server
http://localhost:8080/fortio/
fortio server -http-port 10.10.10.10:8088
测试
fortio tcp-echo &
fortio load -qps -1 -n 100000 tcp://localhost:8078
fortio udp-echo &
fortio load -qps -1 -n 100000 udp://localhost:8078/
fortio server &
fortio grpcping -n 5 localhost
fortio grpcping 10.10.10.100:8078
fortio grpcping https://grpc.fortio.org
fortio load http://www.baidu.com

合成声音
https://github.com/rbren/WinslowSynth

Chrome DevTools 协议的浏览器
https://github.com/chromedp/chromedp

bloom
https://github.com/bits-and-blooms/bloom
github.com/bits-and-blooms/bloom/v3
github.com/bits-and-blooms/bitset

UUID NUID snowflake
https://github.com/satori/go.uuid
https://github.com/google/uuid
https://github.com/rs/xid
https://github.com/bwmarrin/snowflake
https://github.com/sony/sonyflake
https://github.com/nats-io/nuid
https://github.com/minio/highwayhash

敏感数据的识别和处置方案
https://github.com/bytedance/godlp

NATS.io（云和边缘原生消息传递系统）的高性能服务器
https://github.com/nats-io/nats-server
https://github.com/nats-io/nats.go
https://github.com/nats-io/nats.js
https://github.com/nats-io/nats.rs


https://github.com/Ullaakut/nmap
Consul 负载均衡
https://github.com/fabiolb/fabio

网盘挂载
https://github.com/alist-org/alist
https://www.raidrive.com.cn/

PGO 5.1 PostgreSQL GUI 的本机集成
https://github.com/CrunchyData/postgres-operator

MONGODB to PGSQL
https://github.com/InfinityBotList/Mongo-2-Postgres

SHELL
https://github.com/jandedobbeleer/oh-my-posh
SHELL脚本工具
https://github.com/charmbracelet/gum
gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert"
gum input --placeholder "scope"
gum input --placeholder "Summary of this change"
gum write --placeholder "Details of this change"
gum write > story.text
cat flavors.text | gum filter > selection.text
gum confirm "Commit changes?" && git commit -m "$SUMMARY" -m "$DESCRIPTION"
#!/bin/sh
TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert")
SCOPE=$(gum input --placeholder "scope")
# Since the scope is optional, wrap it in parentheses if it has a value.
test -n "$SCOPE" && SCOPE="($SCOPE)"
# Pre-populate the input with the type(scope): so that the user may change it
SUMMARY=$(gum input --value "$TYPE$SCOPE: " --placeholder "Summary of this change")
DESCRIPTION=$(gum write --placeholder "Details of this change")
# Commit these changes
gum confirm "Commit changes?" && git commit -m "$SUMMARY" -m "$DESCRIPTION"

GO 备份
https://github.com/huacnlee/gobackup
curl -sSL https://git.io/gobackup | bash
~/.gobackup/gobackup.yml
/etc/gobackup/gobackup.yml
gobackup perform
0 0 * * * /usr/local/bin/gobackup perform

可预测的网络延迟的 TCP 代理
https://github.com/kffl/speedbump
生成一个监听端口 2000 的新实例，它将 TCP 流量代理到 localhost:80，基本延迟为 100 毫秒，正弦波幅度为 100 毫秒（导致增加的最大延迟为 200 毫秒，最小为 0），周期为 1 分钟：
speedbump --latency=100ms --sine-amplitude=100ms --sine-period=1m --port=2000 localhost:80
生成一个基本延迟为 300 毫秒的新实例，以及一个幅度为 200 毫秒、周期为 2 分钟的锯齿波延迟总和：
speedbump --latency=300ms --saw-amplitude=200ms --saw-period=2m --port=2000 localhost:80

生成图片动态大小调整代理
https://github.com/imgproxy/imgproxy
https://github.com/imgproxy/imgproxy/blob/master/BENCHMARK.md
https://progapandist.github.io/imgproxy-form/
https://github.com/imgproxy/imgproxy/releases
URL: /unsigned/rs:fit:500:0/plain/local:///wat-arun.jpg
其他
https://github.com/thumbor/thumbor
URL: /unsafe/500x0/wat-arun.jpg
https://github.com/h2non/imaginary
URL: /fit?width=500&height=500&file=wat-arun.jpg
https://github.com/agschwender/pilbox
URL: /?url=http%3A%2F%2Fimages.dev.com%2Fwat-arun.jpg&w=500&h=500&mode=clip
https://github.com/thoas/picfit
URL: /display/resize/500x0/wat-arun.jpg
https://github.com/willnorris/imageproxy
URL: /500x/http://images.dev.com/wat-arun.jpg

google-chrome
wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
yum install ./google-chrome-stable_current_x86_64.rpm
http://mirror.centos.org/centos/7/os/x86_64/Packages/xdg-utils-1.1.0-0.17.20120809git.el7.noarch.rpm
http://mirror.centos.org/centos/7/os/x86_64/Packages/vulkan-1.1.97.0-1.el7.x86_64.rpm
http://mirror.centos.org/centos/7/os/x86_64/Packages/vulkan-filesystem-1.1.97.0-1.el7.noarch.rpm
http://mirror.centos.org/centos/7/os/x86_64/Packages/emacs-filesystem-24.3-23.el7.noarch.rpm
http://mirror.centos.org/centos/7/os/x86_64/Packages/desktop-file-utils-0.23-2.el7.x86_64.rpm
http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-narrow-fonts-1.07.2-16.el7.noarch.rpm
http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm

yum -y groupinstall Fonts
http://mirror.centos.org/centos/7/os/x86_64/Packages/gnu-free-fonts-common-20120503-8.el7.noarch.rpm

YCSB压力测试
https://github.com/pingcap/go-ycsb
https://github.com/pingcap/go-ycsb/releases/latest
Load
./bin/go-ycsb load basic -P workloads/workloada
Run
./bin/go-ycsb run basic -P workloads/workloada
Supported Database
MySQL / TiDB
TiKV
FoundationDB
Aerospike
Badger
Cassandra / ScyllaDB
Pegasus
PostgreSQL / CockroachDB
RocksDB
Spanner
Sqlite
MongoDB
Redis and Redis Cluster
BoltDB
./bin/go-ycsb load redis -P workloads/workload_dba  -p redis.mode=single -p redis.addr=192.168.2.4:19000
./bin/go-ycsb run  redis -P workloads/workload_dba  -p redis.mode=single -p redis.addr=192.168.2.4:19000
cat workloads/workload_read
recordcount=1000000     # 总共的操作条数
operationcount=1000000  # 总共操作的次数
workload=com.yahoo.ycsb.workloads.CoreWorkload
readallfields=true  # 在读取的时候，是否需要读取所有字段
readproportion=1  # 读取比例
updateproportion=0   # update比例
scanproportion=0
insertproportion=0
requestdistribution=zipfian

memtier压力测试
https://github.com/RedisLabs/memtier_benchmark
memtier_benchmark -s [ip address] –hide-histogram –threads=32 –ratio=1:0
memtier_benchmark -s [ip address] –hide-histogram –threads=32


