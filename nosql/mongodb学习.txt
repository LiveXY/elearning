mongodb 阿里云的源

vi /etc/yum.repos.d/mongodb-org-3.4.repo
[mongodb-org-3.4]
name=MongoDB Repository
baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7/mongodb-org/3.4/x86_64/
gpgcheck=0
enabled=1

这里可以修改 gpgcheck=0, 省去gpg验证，更新时加gpgcheck=1

yum install mongodb-org -y

yum -y erase $(rpm -qa | grep mongodb-org)
rm /var/run/mongodb/ -rf
rm /var/log/mongodb/ -rf
rm /var/lib/mongo/ -rf

vi /etc/mongod.conf
远程访问：把bindIP改成 0.0.0.0所有的机器都可以访问，或者注释掉

nohup mongod --auth --port 27017 --maxConns 20000 --dbpath /home/mongo &
db.serverStatus().connections 查看链接数

systemctl start mongod.service #启动
systemctl stop mongod.service #停止
systemctl restart mongod.service #重启
systemctl enable mongod #开机自启动

mongod --port 27018 --dbpath /home/mongo
mongod --auth --port 27018 --dbpath /home/mongo

db.createUser({user:"root",pwd:"password",roles:[{role:"root",db:"admin"},{role:"readWrite",db:"admin"},{role:"dbAdmin",db:"admin"},{role:"dbOwner",db:"admin"},{role:"readWrite",db:"mmo50"},{role:"dbAdmin",db:"mmo50"},{role:"readWrite",db:"mmo199999"},{role:"dbAdmin",db:"mmo199999"},{role:"readWrite",db:"backstage50"},{role:"dbAdmin",db:"backstage50"},{role:"readWrite",db:"backstage199999"},{role:"dbAdmin",db:"backstage199999"}]})

db.createUser({user:"test",pwd:"test",roles:["dbOwner"]})

MongoDB默认将数据文件存储在/var/lib/mongo目录，
默认日志文件在/var/log/mongodb中。如果要修改,
可以在 /etc/mongod.conf 配置中指定备用日志和数据文件目录

vi /etc/mongod.conf
dbPath: /home/mongodb

chown mongod:mongod /home/mongodb

mongo #连接mongodb
mongo 127.0.0.1:27017/admin #链接mongodb的admin数据库
mongo --nodb 启用shell 不连接数据库

show dbs #查看所有数据库
use local #打开数据库test
show tables #查看所有表
db.startup_log.find() #查表所有数据
db#显示当前数据库名称db.getName()
db.dropDatabase() #删除当前的数据库
db.repairDatabase() #修复当前数据库

启用账号：
var schema = db.system.version.findOne({"_id" : "authSchema"})
schema.currentVersion = 3
db.system.version.save(schema)

use admin
db.createUser({user:"root",pwd:"password",roles:[{role:"root", db:"admin"}]})
db.createUser({user:"root",pwd:"password",roles:["root"]}) #超级用户角色
db.auth("root", "password")

db.createUser({user:"root",pwd:"password",roles:[{"role":"userAdminAnyDatabase","db":"admin"}]}) #用户管理员
db.createUser({user:"test",pwd:"test",roles:[{role:"dbOwner",db:"test"}]}) #数据库所有者角色
db.createUser({user:"test",pwd:"test",roles:[{role:"readWrite",db:"test"}]}) #数据库读写
db.auth("root", "password")
vi /etc/mongod.conf
security:
  authorization: enabled
Built-In Roles（内置角色）：
1. 数据库用户角色：read、readWrite;
2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；
3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；
4. 备份恢复角色：backup、restore；
5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase，userAdminAnyDatabase、dbAdminAnyDatabase
6. 超级用户角色：root
7. 内部角色：__system
db.changeUserPassword("user", "newpwd") #修改密码
db.dropUser("user") #删除管理员
db.getUser("user")
db.dropAllUsers() #删除当前数据下所有用户
db.grantRolesToUser("user", [{role:"", db:""}]) #修改角色
db.revokeRolesFromUser("user", [{role:"", db:""}]) #追加角色

使用链接：mongodb://root:password@127.0.0.1/admin
mongo -u root -p password 127.0.0.1/admin
mongo -u root -p password 127.0.0.1:27017/admin

it#向下查询
.explain()#查询优化

db.cloneDataBase(fromhost) 从目标服务器克隆一个数据库
db.copyDatabase(fromdb,todb,fromhost) 复制数据库fromdb---源数据库名称，todb---目标数据库名称，fromhost---源数据库服务器地址
db.createCollection(name,{size:3333,capped:333,max:88888}) 创建一个数据集，相当于一个表
db.currentOp() 取消当前库的当前操作
db.eval(func,args) run code server-side
db.getCollection(cname) 取得一个数据集合，同用法：db['cname'] or
db.getCollenctionNames() 取得所有数据集合的名称列表
db.getLastError() 返回最后一个错误的提示消息
db.getLastErrorObj() 返回最后一个错误的对象
db.getPrevError() 返回上一个错误对象
db.resetError() 清除错误记录
db.getMongo() 取得当前服务器的连接对象get the server
db.getMondo().setSlaveOk() allow this connection to read from then nonmaster membr of a replica pair
db.getReplicationInfo() 获得重复的数据
db.getSisterDB(name) 返回当前连接的另一个数据库。它允许跨数据库查询，例如：db.getSisterDB('production').getCollectionNames()
db.getCollectionNames() 获得所有聚集的列表。
db.killOp() 停止（杀死）在当前库的当前操作
db.runCommand(cmdObj) run a database command. if cmdObj is a string, turns it into {cmdObj:1}
db.shutdownServer() 关闭当前服务程序
db.version() 返回当前程序的版本信息
db.fsyncLock()/db.fsyncUnlock()
db.getMongo()
db.isMaster()/db.killOp()/db.logout()

show collections#查看所有表
db.printCollectionStats()#查看各表的状态
db.printReplicationInfo()#查看主从复制状态
db.printSlaveReplicationInfo
db.printShardingStatus() 返回当前数据库是否为共享数据库
db.user.dataSize()#查看表数据的大小
db.user.totalIndexSize()#查询所有索引的大小
db.stats()#查看数据库状态
db.user.stats()#查看user表状态
db.repairDatabase()#修复数据库
db.setProfilingLevel(1)#设置记录profiling，0=off 1=slow 2=all
show profile#打印最近耗时大于1ms的profiling操作
db.copyDatabase('mail_addr','mail_addr_tmp')#拷贝数据库

db.addUser('admin','pwd’)#增加或修改用户密码
db.system.users.find()#查看用户列表
show users/show roles/show profile/show databases
db.auth('admin','pwd’)#用户认证
db.removeUser('mongodb')#删除用户

db.user.insert({uid:1, uname:'test’})#添加并插入表数据
db.user.save()#添加数据
db.user.find()#查所有数据
db.user.findOne()#查找一条记录
db.user.find({uid:1}).limit(10)#根据条件检索10条记录
db.inventory.find({$or:[{price:1.99}, {sale:true}]}).sort({item:1}) #or操作
db.user.find({uname:/^Ba/})#正则查
db.user.find({uid:{$exists:true}}) #查存在uid字段的所有数据
db.user.find({'order.oid':1}); #查订单＝1的用户信息
{tags:{$all:["ssl","security"]}}
＝{$and:[{tags:"ssl"},{tags:"security"}]}
={$and:[{tags:["ssl","security"]}]}＝{tags:["ssl","security"]}
＃all操作 表示数组全部都存在集合

.count/.sort({'uid',-1})/.distinct('uid’)/.limit(2).skip(8)从2到8条数据
.bsonsize() 打印一个数据库对象的bson大小
.hint({close:1}) 强制使用索引

$gt/$lt/$gte/$lte/$ne/$in/$nin/$set/$inc/$unset/
$not/$or/$and/$exists/$elemMatch/$size/$where
$regex/$options/$mod/$slice/$rename/
$push/$pushAll/$addToSet/$each/$pop/$pull/$pullAll/$all/

$type=Double(1)/String(2)/Object(3)/Array(4)/Binary data(5)/Object id(7)/Boolean(8)/Date(9)/Null(10)/Regular expression(11)/JavaScript code(13)/Symbol(14)/JavaScript code with scope(15)/32-bit integer(16)/Timestamp(17)/64-bit integer(18)/Min key(255)/Max key(127)

db.user.update({uid:1},{uname:'test1'},true,true)
#根据uid=1条件修改，如果不存在则插入，允许修改多条记录 修改全结点
db.user.update({uid:1},{'$set':{uname:'test2'}},true,true)
#只修改uname结点
db.test0.update({"count":{$gt:5}},{$set:{"test5":"OK"}},true,true );
db.test0.update({"count":{$gt:15}},{$inc:{"count":1}},false,true );


db.user.remove({'uid':1})#删除表数据
db.user.drop()#删除表
db.test.renameCollection(newName) 重命名些数据集名称

db.orders.aggregate([ { $match: { status: "A" } }, { $group: { _id: "$cust_id", total: { $sum: "$amount" } } }, { $sort: { total: -1 } } ])
db.source.copyTo(target)

db.test.group({key:{'name':true},cond:{'name':'foo'},reduce:function(obj,prev){prev.msum+=obj.marks;},initial:{msum:0}}) <==> select name,sum(marks) from test group by name
db.test.find('this.ID<20',{name:1}) <==> select name from test where ID<20
db.collection.createIndex(keys, options)
db.collection.getIndexStats()
db.collection.indexStats()
db.collection.dataSize()
db.collection.dropIndex()
db.collection.dropIndexes()
db.collection.findAndModify()
db.collection.mapReduce()
db.collection.totalSize()

db.test.getDB() 返回此数据集所属的数据库名称
db.test.group({key:...,initial:...,reduce:...[,cond:...]})
db.test.mapReduce(mayFunction,reduceFunction,<optional params>)
db.test.stats() 返回此数据集的状态
db.test.storageSize() 返回此数据集的存储大小
db.test.totalIndexSize() 返回此数据集的索引文件大小
db.test.totalSize() 返回些数据集的总大小
db.test.validate() 验证此数据集
db.test.getShardVersion() 返回数据集共享版本号

db.things.ensureIndex({firstname: 1, lastname: 1}, {unique: true});
#增加排序索引：1(ascending),-1(descending)
db.user.ensureIndex({uname: 1})#索引子对象
db.user.getIndexes()#查看索引信息
db.user.getIndexKeys()
db.user.dropIndex('uname_1')#根据索引名删除索引
db.user.reIndex()#重建索引
unique唯一索引/dropDups删除重复键/sparse稀疏索引/background后台
db.setProfilingLevel(2)#打开剖析器 了解慢查询
db.setProfilingLevel(1, 100)＃只记录100ms+慢查询
db.setProfilingLevel(0)#关闭
.explain(true)#查询优化 显示详细计划

var bulk = db.items.initializeUnorderedBulkOp();
bulk.insert( { item: "abc123", defaultQty: 100, status: "A", points: 100 } ); bulk.insert( { item: "ijk123", defaultQty: 200, status: "A", points: 200 } ); bulk.insert( { item: "mop123", defaultQty: 0, status: "P", points: 0 } ); bulk.execute();

emit()/.forEach()/.getMonth()/.getFullYear()/

复制：主从复制和副本集

副本集配置：一个主节点、一个从节点、一仲裁节点
1,建数据目录
mkdir /data/node1
mkdir /data/node2
mkdir /data/arbiter
2,分别启动独立的mongod，分别在不同的终端窗口操作。
mongod --replSet myapp --oplogSize 1024 设置oplog大小1G
mongod --replSet myapp --dbpath /data/node1 --port 40000
mongod --replSet myapp --dbpath /data/node2 --port 40001
mongod --replSet myapp --dbpath /data/arbiter --port 40002
3,节点终端执行rs.initiate() 生成单成员的副本集
4,添加其它成员
rs.add('localhost:40001')
rs.add('localhost:40002', {arbiterOnly:true})
5,查看副本集摘要db.isMaster()/db.status()
6,操作
mongo arete:40000连接主节点
添加修改删除数据后可自动复制到其它节点


mongostat详解
http://tech.lezi.com/archives/290
Mongodb启动命令mongod参数说明
http://blog.darkmi.com/2012/11/15/2470.html
http://docs.mongodb.org/manual/reference/method/

查询所有的存储过程
db.system.js.find();
执行存储过程
db.eval('myAdd(1,2)');
db.eval(function(){return 3+3;});

db.system.js.save({"_id":"myAdd",value:function add(x,y){ return x+y; }});
db.system.js.update({_id:'myAdd'},{$set:{value:function (x,y){return x*y;}}});

db.loadServerScripts();myAdd(1,2);

db.achievement.remove({id:NumberLong(5000022)});
db.award.remove({id:NumberLong(5000022)});
db.godwar.remove({id:NumberLong(5000022)});
db.fight.remove({id:NumberLong(5000022)});
db.goal.remove({id:NumberLong(5000022)});
db.hook.remove({id:NumberLong(5000022)});
db.hotkey.remove({id:NumberLong(5000022)});
db.legion.remove({id:NumberLong(5000022)});
db.mail.remove({id:NumberLong(5000022)});
db.mailoff.remove({id:NumberLong(5000022)});
db.master.remove({id:NumberLong(5000022)});
db.package.remove({id:NumberLong(5000022)});
db.player_fbrec.remove({id:NumberLong(5000022)});
db.social.remove({id:NumberLong(5000022)});
db.stallage.remove({id:NumberLong(5000022)});
db.status.remove({id:NumberLong(5000022)});
db.task.remove({id:NumberLong(5000022)});
db.team.remove({id:NumberLong(5000022)});

删除角色
db.role.find({"id" : NumberLong(6000065)})
db.role.remove({"id" : NumberLong(6000065)})
db.role.update({"id" : NumberLong(6000072)},{$set:{"delete_type" : 1}},true,true);

更换账号
db.account.remove({"account" : "ce666c6f99b8fe0c18e10a2449759eb6"})
db.account.update({"account" : "xhc"},{$set:{"account" : "ce666c6f99b8fe0c18e10a2449759eb6"}},true,true);
db.role.update({"account" : "xhc"},{$set:{"account" : "ce666c6f99b8fe0c18e10a2449759eb6"}},true,true);
db.validate.update({"account" : "xhc"},{$set:{"account" : "ce666c6f99b8fe0c18e10a2449759eb6"}},true,true);
db.giftbox.update({"account" : "xhc"},{$set:{"account" : "ce666c6f99b8fe0c18e10a2449759eb6"}},true,true);
db.settings.update({"account" : "xhc"},{$set:{"account" : "ce666c6f99b8fe0c18e10a2449759eb6"}},true,true);


更换账号
db.account.remove({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.account.update({"account" : "Shane"},{$set:{"account" : "22991593ae85ab2a4ac9a28532901ea9"}},true,true);
db.achievement.remove({"id" : NumberLong(5000069)})
db.award.remove({"id" : NumberLong(5000069)})
db.fight.remove({"id" : NumberLong(5000069)})
db.giftbox.remove({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.giftbox.update({"account" : "Shane"},{$set:{"account" : "22991593ae85ab2a4ac9a28532901ea9"}},true,true);
db.goal.remove({"id" : NumberLong(5000069)})
db.godwar.remove({"master" : NumberLong(5000069)})
db.guojia_shop.remove({"role_id" : NumberLong(5000069)})
db.head_shop.remove({"role_id" : NumberLong(5000069)})
db.hook.remove({"id" : NumberLong(5000069)})
db.hotkey.remove({"id" : NumberLong(5000069)})
db.league.remove({"chairman_id" : NumberLong(5000069)})
db.legion.remove({"id" : NumberLong(5000069)})
db.mail.remove({"id" : NumberLong(5000069)})
db.mailoff.remove({"roleid" : NumberLong(5000069)})
db.master.remove({"id" : NumberLong(5000069)})
db.package.remove({"id" : NumberLong(5000069)})
db.player_fbrec.remove({"id" : NumberLong(5000069)})
db.produce.remove({"id" : NumberLong(5000069)})
db.role.remove({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.role.update({"account" : "Shane"},{$set:{"account" : "22991593ae85ab2a4ac9a28532901ea9"}},true,true);
db.settings.remove({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.settings.update({"account" : "Shane"},{$set:{"account" : "22991593ae85ab2a4ac9a28532901ea9"}},true,true);
db.social.remove({"id" : NumberLong(5000069)})
db.stallage.remove({"id" : NumberLong(5000069)})
db.status.remove({"id" : NumberLong(5000069)})
db.task.remove({"id" : NumberLong(5000069)})
db.team.remove({"id" : NumberLong(5000069)})
db.tong_guan.remove({"id" : NumberLong(5000069)})
db.validate.remove({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.validate.update({"account" : "Shane"},{$set:{"account" : "22991593ae85ab2a4ac9a28532901ea9"}},true,true);

查询修改后的新账号
db.account.find({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.role.find({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.giftbox.find({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.settings.find({"account" : "22991593ae85ab2a4ac9a28532901ea9"})
db.validate.find({"account" : "22991593ae85ab2a4ac9a28532901ea9"})

查询修改后的老账号
db.account.find({"account" : "Shane"})
db.role.find({"account" : "Shane"})
db.giftbox.find({"account" : "Shane"})
db.settings.find({"account" : "Shane"})
db.validate.find({"account" : "Shane"})

db.account.find({$where: "this.account.length >= 32"})
db.account.find({account: {$type: 2}, $where: "this.account.length >= 32"});
db.account.find({account: {$exists: true}, $where: "this.account.length >= 32"});

修改任务状态
db.task.update({id:NumberLong(5000005)},{$set:{'task.77.status':3}},true,true);
db.task.update({id:NumberLong(5000005),'task.id':100000017},{$set:{'task.$.status':1}},true,true);

修改成就
db.achievement.update(
   { "id":NumberLong(5000037) },
   { $set: { "achievement.$[elem1].detail.$[elem2].price" : 3 } },
   {
     multi: true,
     arrayFilters: [ { "elem1.type_id": 10004 }, { "elem2.subtype_id": 2 } ]
   }
)
db.achievement.findOneAndUpdate(
   { "id":NumberLong(5000037) },
   { $set: { "achievement.$[elem1].detail.$[elem2].price" : 3 } },
   { arrayFilters: [ { "elem1.type_id": 10004 }, { "elem2.subtype_id": 2 } ] }
)
cannot use the part (grades of grades.$[].std) to traverse the element
db.adminCommand( { setFeatureCompatibilityVersion: "3.6" } )

db.achievement.find({"id":NumberLong(5000037),"achievement.type_id":10004},{"achievement.$.detail":1}).forEach(doc => { doc.achievement[0].detail.forEach(printjson) })
var ss = [];
db.achievement.find({"id":NumberLong(5000037),"achievement.type_id":10004},{"achievement.$.detail":1}).forEach(r1 => {
	r1.achievement[0].detail.forEach(r2 => {
		if (r2.subtype_id === 1) r2.price = 3
		ss.push(r2)
	})
});
db.achievement.update({id:NumberLong(5000037),'achievement.type_id':10004},{$set:{'achievement.$.detail': ss }},true,true);
db.achievement.find({"id":NumberLong(5000025),"achievement.type_id":10004},{"achievement.$.detail":1}).forEach(doc => { doc.achievement[0].detail.forEach(printjson) })

修改转生限制
db.player_fbrec.update({id:NumberLong(6000001),'propfresh.id':210200103},{$set:{'propfresh.$.expire':1541433600}},true,true);
db.player_fbrec.update({id:NumberLong(6000001),'propfresh.id':210200104},{$set:{'propfresh.$.expire':1541433600}},true,true);

测试更改数据
db.package.update({id:NumberLong(5000015),'package.item.id':103100026},{$set:{'package.item.$.appraise':15}},true,true);
db.package.update({id:NumberLong(5000009),'package.item.id':103401300},{$set:{'package.item.$.level':15}},true,true);
db.package.update({id:NumberLong(5000009),'package.item.id':103402300},{$set:{'package.item.$.level':15}},true,true);
db.package.update({id:NumberLong(5000009),'package.item.id':102301263},{$set:{'package.item.$.lucky.0.level':2516}},true,true);

技能
db.fight.find({id:NumberLong(6000001)});
db.fight.update({id:NumberLong(5000009)},{$set:{'fight.blood':302491}},true,true);
db.fight.update({id:NumberLong(5000009)},{$set:{'fight.all_property.0':302491}},true,true);
db.fight.update({id:NumberLong(5000009),'fight.skill.id':411000001},{$set:{'fight.skill.$.exp':258586,'fight.skill.$.last_time':1541509632}},true,true);
db.fight.update({id:NumberLong(5000009),'fight.skill.id':462000012},{$set:{'fight.skill.$.exp':14400000}},true,true);

清理邮件
db.mail.find({id:NumberLong(6000001)});
db.mail.update({id:NumberLong(6000001)}, {$set:{"mail":{"allcount":0,"count":0,"info":[]}}}, true, true);

删除一刀999称号
db.achievement.find({'label_new.label_id':1000230})
db.achievement.update({id:NumberLong(6000040),'label_new.label_id':1000230},{$set:{'label_new.$.label_id':1000224}},true,true);
db.achievement.update({id:NumberLong(6000040)},{$set:{'tx_label.0':1000224}},true,true);

--备份单个表
mongodump -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 -c role -o ./test1
--恢复单表
mongorestore -u root -p rbnewlife --authenticationDatabase admin -d mmo50 -c role ./test1/mmo50/role.bson

--备份单个库
mongodump -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 -o ./test2
--恢复单个库：
mongorestore -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 ./test2

--备份所有库
mongodump -u root -p rbnewlife --port 27017 --authenticationDatabase admin -o ./test3
--恢复所有库：
mongorestore -u  root -p rbnewlife --port 27017 --authenticationDatabase admin  ./test3

--备份所有库推荐使用添加--oplog参数的命令，这样的备份是基于某一时间点的快照，只能用于备份全部库时才可用，单库和单表不适用：
mongodump -u root -p rbnewlife --port 27017 --authenticationDatabase admin --oplog -o ./test4
mongodump -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d local -c oplog.rs -o ./test4
--恢复时也要加上--oplogReplay参数，具体命令如下(下面是恢复单库的命令)：
mongorestore -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 --oplogReplay  ./test4/mmo50/


--备份单个表
mongoexport -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 -c role -o role-all.json
mongoexport -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 -c role --type csv -f id,account,server_id,from_type,name,IP,sex -o role.csv

mongoexport -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 -c role -o role.json --query='{"account":"xhc"}' --limit=1


mongoimport -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 -c role role.json --batchSize 2000
mongoimport -u root -p rbnewlife --port 27017 --authenticationDatabase admin -d mmo50 -c role role.json --numInsertionWorkers 100

创建oplog
use local
db.createCollection("oplog.rs", {"capped" : true, "size" : 10000000})

centos 7 ansible 安装 mongodb 集群
https://blog.csdn.net/liangkiller/article/details/100761623
https://blog.csdn.net/qq_39570637/article/details/103744284

https://mp.weixin.qq.com/s/9XAadNklZI_p1JgJowVgPg
几个尖刺点都是执行mongodump导致的。怎么限制mongodump上的cpu使用呢？

mtools是一组用来解析和过滤MongoDB日志文件的脚本工具。mtools中包含以下几个工具：mlogfilter、mloginfo、mplotqueries、mlogvis、mlaunch、mgenerate。
本文主要介绍其中的mlogfilter。
mlogfilter，主要用来解析日志文件，过滤慢查询。
官方文档：http://blog.rueckstiess.com/mtools/install.html


