python

yum install -y python36 python36-pip

brew install python3
ln -s /usr/local/Cellar/python/3.7.0/bin/python3 /usr/local/bin/python3

安装包路径：/usr/local/lib/python3.7/site-packages/

pip3 install matplotlib -i https://pypi.douban.com/simple
https://pypi.tuna.tsinghua.edu.cn/simple
https://mirrors.aliyun.com/pypi/simple/

pip 使用阿里云的源
```
mkdir ~/.pip

cat > ~/.pip/pip.conf << EOF

[global]
trusted-host=mirrors.aliyun.com
index-url=https://mirrors.aliyun.com/pypi/simple/

EOF

Windows系统：
首先在window的文件夹窗口输入 ： %APPDATA%
然后创建pip文件夹
最后创建pip.ini文件，写入如下内容
[global]
index-url = https://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host=mirrors.aliyun.com
```

pip3 list
pip3 list --outdated
pip uninstall 包名

pip install --upgrade pip
pip3 install --upgrade pip

mac: brew install pipenv
dnf install pipenv
yum install pipenv
pipenv graph
pipenv lock
pipenv install --dev
pipenv uninstall --all
pipenv shell
pipenv install requests


yum install -y m2crypto python-setuptools
easy_install pip
pip install yagmail
pip3 install yagmail

EXCEL
https://github.com/ricklamers/gridstudio

brew install rabbitmq
brew services start rabbitmq
brew install redis
brew services start redis

nameko 微服务
pip3 install nameko

vi nameko.py
from nameko.rpc import rpc
class GreetingService:
	name = "nameko"
	@rpc
	def hello(self, name):
		return "Hello, {}!".format(name)

nameko run nameko
nameko shell
> n.rpc.nameko.hello(name="test")
nameko shell --broker amqp://guest:guest@localhost

celery 并行分布式框架
pip3 install celery
pip3 install redis

vi tasks.py
from celery import Celery
import time
#app = Celery('tasks', backend='amqp', broker='amqp://')
app = Celery('tasks', broker='redis://127.0.0.1:6379/0', backend='redis://127.0.0.1:6379/0')
#redis://:password@hostname:port/db_number
@app.task
def add(x, y):
	time.sleep(5)
	return x + y

celery -A tasks worker --loglevel=info
celery shell
> from tasks import add
> res = add.delay(4,4)
> res.ready()
> res.ready()
> res.result

定时器
import schedule
import time

def job():
    print("I'm working...")

schedule.every(10).minutes.do(job)
schedule.every().hour.do(job)
schedule.every().day.at("10:30").do(job)
schedule.every().monday.do(job)
schedule.every().wednesday.at("13:15").do(job)
schedule.every().minute.at(":17").do(job)

while True:
    schedule.run_pending()
    time.sleep(1)

实现一个进度条
from time import sleep
def progress(percent=0, width=30):
    left = width * percent // 100
    right = width - left
    print('
[', '#' * left, ' ' * right, ']',
          f' {percent:.0f}%',
          sep='', end='', flush=True)
for i in range(101):
    progress(i)
    sleep(0.1)

并行处理
https://github.com/luispedro/jug

debugging
https://github.com/cool-RR/pysnooper

在线pyc,pyo反编译python反编译
http://tools.bugscaner.com/decompyle/

使用pyinstaller加密打包exe
其实只要在打包时加个key参数就能加密
pyinstaller.exe -F --key 123456 xxx.py
反编译测试
那么我们再来测试一下加密打包的exe还能不能被反编译。再次执行pyinstxtractor.py
python pyinstxtractor.py .\main-encrypt.exe

pip3 install webssh
# 直接运行wssh，使用默认8888端口
wssh

# 通过绑定IP地址和端口启动
wssh --address='192.168.83.129' --port=8888
wssh --address='0.0.0.0' --port=8888

# 通过绑定IP地址和端口启动，只允许本地地址访问
wssh --address='127.0.0.1' --port=8888

https://github.com/tqdm/tqdm
https://github.com/dbcli/pgcli
https://github.com/dbcli/mycli

pip install rich

q - Run SQL directly on CSV or TSV files
http://github.com/harelba/q
q "SELECT COUNT(*) FROM ./clicks_file.csv WHERE c3 > 32.3"
ps -ef | q -H "SELECT UID, COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3"
https://harelba.github.io/q/
wget https://github.com/harelba/q/releases/download/1.7.1/q-text-as-data-1.7.1-1.noarch.rpm #下载版本
sudo rpm -ivh q-text-as-data-1.7.1-1.noarch.rpm # 安装
q --version  #查看安装版本
https://mp.weixin.qq.com/s/4QpCXwvbaExj73k3vTguZg

