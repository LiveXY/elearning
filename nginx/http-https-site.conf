https://github.com/Canop/rhit
rhit /var/nginx/logs
rhit -f date
rhit -f ip
rhit -f method
rhit -f path
rhit -f ref
rhit -f status
rhit -d 2021/02/15-2021/02/20 -f date
rhit -l 0 -f path -p blog/index
rhit -f ref,path -r '( news | reddit ) & !mountyhall & !redirect'
rhit -l 0 -f date,path -d 2021/03
rhit -l 0 -f date,path -d 2021/03 -k b

http
```
server {
	listen 80;
	server_name domain;

	root /home/laravel/public;
	index index.html index.htm index.php;

	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	gzip on;
	gzip_min_length 1k;
	gzip_buffers 4 16k;
	gzip_http_version 1.0;
	gzip_comp_level 2;
	gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/json;
	gzip_vary off;
	gzip_disable "MSIE [1-6]\.";

	add_header Access-Control-Allow-Origin *;
	add_header Access-Control-Allow-Headers X-Requested-With;
	add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

	location / {
		try_files $uri $uri/ /index.php?$args;
	}
	location ~ ^(.+.php)(.*)$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_NAME $fastcgi_script_name;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	}

	location ~ \.db {
		deny all;
	}
	location ~ /\.git {
		deny all;
	}
	location ~ /\.svn {
		deny all;
	}

	location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico|JPG|GIF|PNG|BMP|SWF|ICO)$ {
		expires	  30d;
	}
	location ~ .*\.(js|css|JS|CSS)$ {
		expires	  12h;
	}
}
```
https
```
server {
	listen 80;
	listen 443 ssl;
	server_name domain;

	root /home/laravel/public;
	index index.html index.htm index.php;

	ssl_certificate /home/ssl/ssl.crt;
	ssl_certificate_key /home/ssl/ssl.key;
	ssl_session_timeout 5m;
	ssl_prefer_server_ciphers on;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	gzip on;
	gzip_min_length 1k;
	gzip_buffers 4 16k;
	gzip_http_version 1.0;
	gzip_comp_level 2;
	gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	gzip_vary off;
	gzip_disable "MSIE [1-6]\.";

	add_header Access-Control-Allow-Origin *;
	add_header Access-Control-Allow-Headers X-Requested-With;
	add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

	location / {
		try_files $uri $uri/ /index.php?$args;
	}
	location ~ ^(.+.php)(.*)$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_NAME $fastcgi_script_name;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	}

	location ~ \.db {
		deny all;
	}
	location ~ /\.git {
		deny all;
	}
	location ~ /\.svn {
		deny all;
	}

	location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico|JPG|GIF|PNG|BMP|SWF|ICO)$ {
		expires	  30d;
	}
	location ~ .*\.(js|css|JS|CSS)$ {
		expires	  12h;
	}
}
```
其它ssl配置
```
openssl ciphers -V TLSv1.2 | column -t

	ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;

	ssl_protocols SSLv2 SSLv3 TLSv1.2;
	ssl_ciphers HIGH:!aNULL:!MD5;
```
奇怪错误
```
小程序 tls 版本必须大于 1.2，NGINX也增加了TLSv1.2一直不生效，yum upgrade nginx 升级了也不生效，只能给全部站点全部使用TLSv1.2重启NGINX才生效
```

限速
你可能还希望仅对较大的文件进行速率限制，这可以通过 limit_rate_after 指令进行。在此示例中，每个文件(来自任何目录)的前 500KB 都不受速度限制地进行传输，之后的所有内容均以 50KB/s 的速度为上限。这样可以加快网站关键部分的交付速度，同时降低其他部分的速度。
location / {
    limit_rate_after 500k;
    limit_rate 50k;
}

nginx 负载均衡
https://mp.weixin.qq.com/s/aIABmcdZJDXdakX4OfBWmQ
ip_hash; 不能把后台服务器直接移除，只能标记down
hash $request_uri;
hash $request_uri consistent;
hash $remote_addr;
hash $cookie_name;
least_conn; 最小连接
 weight=1; 加权轮询
upstream指令参数
max_conns：限制最大同时连接数 1.11.5之前只能用于商业版
slow_start：单位秒，权重在指定时间内从1上升到指定值，不适用与hash负载均衡、随机负载均衡 如果在 upstream 中只有一台 server，则该参数失效（商业版才有）
down：禁止访问
backup：备用机 只有在其他服务器无法访问的时候才能访问到 不适用与hash负载均衡、随机负载均衡
max_fails：表示失败几次，则标记server已宕机，剔出上游服务 默认值1
fail_timeout：表示失败的重试时间 默认值10
least_time header;
最少时间（仅限 NGINX Plus）——对于每个请求，NGINX Plus 选择具有最低平均延迟和最少活动连接数的服务器，其中最低平均延迟是根据指令中包含的以下参数计算得出的：least_time
header– 从服务器接收第一个字节的时间
last_byte– 从服务器接收完整响应的时间
last_byte inflight– 考虑到不完整的请求，从服务器接收完整响应的时间
random two least_time=last_byte;
随机- 每个请求将被传递到随机选择的服务器。如果two指定了参数，首先 NGINX 会根据服务器权重随机选择两台服务器，然后使用指定的方法选择其中一台服务器：
least_conn– 最少的活动连接数
least_time=header(NGINX Plus) – 从服务器接收响应头的最短平均时间 ( $upstream_header_time)
least_time=last_byte(NGINX Plus) – 从服务器接收完整响应的最短平均时间 ( $upstream_response_time)
fair; 按后端服务器的响应时间来分配请求，相应时间短的优先分配。需要安装
