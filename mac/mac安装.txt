截屏
command + shift + 3 快速截取当前的活动屏幕
command + shift + 4 快速截取屏幕的一部分
command + shift + control + 4 同样可以快速截取屏幕的一部分
command + shift + control + space 快速截取某个特定的窗口
command + shift + 5，就会看到一个工具栏，你可以利用这个工具录制整个屏幕，或者其中一部分

mac备份
1，备份：Sublime Text3/SSH Proxy/Microsoft Office 2011/Sequel Pro/MySQLWorkbench/SourceTree/SQLite Professional/Unity/Microsoft Remote Desktop/licecap/Adobe Photoshop CC 2015/Apple Configurator 2/
2，备份配置文件目录：
/opt/local/etc/nginx/conf.d/
/Library/Services/
/etc/hosts
~/.ssh/
~/.bash_profile
~/.bashrc
~/.inputrc

sudo xcodebuild -license
xcode-select --install

mac安装
#商店安装：Go2Shell/Google Chrome/New File Free/PDF Reader X/QQ/QQ音乐/RAR Extractor Free/Thunder/Xcode/Dr. Cleaner/MPlayerX/Color Picker/iHex/Base64Anywhere/App2Dmg/微信/
#下载安装：Sublime Text3/SSH Proxy/MacPorts/nodejs/Microsoft Office 2011/Sequel Pro/MySQLWorkbench/SourceTree/SQLite Professional/Unity/Microsoft Remote Desktop/licecap/Adobe Photoshop CC 2015
xnip 滚动截长屏
permute3 格式转换
airserver 投屏

##设置存历史命令纪录数
```sh
vi ~/.bashrc
shopt -s histappend
HISTSIZE=100000
HISTFILESIZE=1000000
HISTCONTROL=ignoredups
HISTTIMEFORMAT='%F %T '
source ~/.bashrc
echo "$HISTSIZE $HISTFILESIZE"
```

GIT 记住密码
git config --global credential.helper store

vi ~/.inputrc
```
"\e[B": history-search-forward
"\e[A": history-search-backward
set completion-ignore-case On
```

vi ~/.zshrc
```
if [ -f ~/.bash_profile ]; then
	source ~/.bash_profile
fi
bindkey '\e[B' history-search-forward
bindkey '\e[A' history-search-backward
```

vi ~/.bash_profile
```
#alias
alias ll='ls -lG'
alias rm='rm -i'
alias pyc='~/git_pro/packer_yui_compiler/compiler.sh'

export PATH=$PATH:/opt/local/bin
export PATH=$PATH:/opt/local/sbin
export GOPATH=~/go_pro
export PATH=$PATH:~/go_pro/bin/

export ANDROID_HOME=~/android-sdk
export ANDROID_SDK_HOME=~/
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

shopt -s histappend
export HISTCONTROL=ignoredups
export HISTIGNORE="[   ]*:&:bg:fg:exit:cd:ls:open"
export HISTFILESIZE=1000000
export HISTSIZE=100000
export HISTTIMEFORMAT='%F %T '

source ~/git_pro/server/servers.alias

export CLICOLOR=1
export LSCOLORS=gxfxaxdxcxegedabagacad
```
source ~/.bash_profile

安装BREW
#homebrew(http://brew.sh/index_zh-cn.html)
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"


chrome 插件
```
git clone https://github.com/callumlocke/json-formatter
chrome://extensions/ 开启 开发者模式 加载已解压的扩展程序 选择 extension 目录
git clone https://github.com/ETCExtensions/Edit-This-Cookie
https://chrome.google.com/webstore/detail/bcjindcccaagfpapjjmafapmmgkkhgoa
https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg
```

#npm
sudo npm install cnpm -g -ddd
sudo npm install -g cordova -ddd
sudo npm install -g ionic -ddd
sudo npm install uglify-js uglifycss -g

#centos7 webkit2png
git clone https://github.com/adamn/python-webkit2png.git
cd python-webkit2png
python setup.py install
yum -y install PyQt4 PyQt4-devel PyQt4-webkit
yum -y install xorg-x11-server-Xvfb.x86_64
yum -y install wqy-zenhei-fonts.noarch

#~/.ssh/目录权限
chmod a-rwx ~/.ssh/*
chmod u+rw ~/.ssh/*
chmod a+r ~/.ssh/config
chmod a+r ~/.ssh/known_hosts

#安装JDK：http://www.oracle.com/technetwork/java/javase/downloads/index.html
#安装mysql-workbench：http://dev.mysql.com/downloads/workbench/

===============================================
foremost恢复文件
rm test.jpg
brew install foremost
foremost -t jpg -i /dev/sda1 -o /home/gacanepa/rescued
df | grep boot => /dev/sda1
avi bmp dll doc docx exe gif htm jar jpg mbd mov mp4 mpg ole pdf
png ppt pptx rar rif sdw sx sxc sxi sxw vis wav wmv xls xlsx zip

===============================================
npm install 权限问题：EACCES: permission denied
sudo chown -R $USER ~/.npm
sudo chown -R $USER /usr/lib/node_modules
sudo chown -R $USER /usr/local/lib/node_modules
或
mkdir ~/.npm-global
npm config set prefix '~/.npm-global'
~/.bash_profile
export PATH=~/.npm-global/bin:$PATH
source ~/.bash_profile

==============================================
sourcetree 显示提交信息面板
defaults delete com.torusknot.SourceTreeNotMAS "NSSplitView Subview Frames repowindow_LogViewDescSplitter"
==============================================
“Shimo.app”已损坏，打不开。 您应该将它移到废纸篓。
sudo spctl --master-disable
sudo xattr -d com.apple.quarantine Shimo.app

=========================================
sudo gem install -n /usr/local/bin cocoapods
=========================================
/bin/bash: bad interpreter: Operation not permitted
xattr -dr com.apple.quarantine ./*
=========================================
http://anyproxy.io/cn/
npm install -g anyproxy
anyproxy 默认端口8001
anyproxy --port 1080
http://127.0.0.1:8002
https://github.com/qqnp1100/chxg
https://github.com/game-helper/weixin
=========================================
Too many open files
sudo launchctl limit maxfiles unlimited
-----------------------------------------
nc 常用：
侦听任意端口，以TCP/UDP 方式
端口扫描
传输文件
测速
1) -l 用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。
2) -p <port> 限制数据发送原端口
3) -s 指定发送数据的源IP地址，适用于多网卡机
4) -u 指定nc使用UDP协议，默认为TCP
5) -v 输出交互或出错信息，新手调试时尤为有用
6）-w 超时秒数，后面跟数字
7）-z 表示zero，表示扫描时不发送任何数据
nc -vz -w 5 127.0.0.1 1-100 #对 1-100 端口进行扫描
nc -vz -w 5 127.0.0.1 8888 #连接端口
nc -l 8888 -v #监听端口
=======================================
xcode library not found for -libstdc++.6.0.9
tagets->Build Phases ->Link Binary With Libraries下找到这个库
Xcode10后没有libstdc++库 可以使用：https://github.com/devdawei/libstdc-
https://www.jianshu.com/p/6d94278d62b3
========================================
react-native 工程时，出错：xcrun: error: unable to find utility "instruments", not a developer tool or in PATH
解决方法：在 终端执行如下命令 sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/
注意：前提是你已经安装了xcode
=======================================

brew install wget nmap nginx mysql php@7.2 brew-php-switcher pkg-config libmemcached
brew-php-switcher 7.2
php -m
pecl install memcached
brew services restart php
brew services restart nginx
brew services restart memcached

pecl version 查看版本信息
pecl help 可以查看命令帮助
pecl search xdebug  搜索可以安装的扩展信息
pecl install xdebug 安装扩展

dyld: Library not loaded: /usr/local/opt/icu4c/lib/libicui18n.64.dylib
icu4c 66.1 降级到 64.2
cd $(brew --prefix)/Homebrew/Library/Taps/homebrew/homebrew-core/Formula
git log --follow icu4c.rb
git checkout -b icu4c-62.1 896d1018c7a4906f2c3fa1386aaf283497db60a2
brew reinstall ./icu4c.rb
或
brew info icu4c
brew switch icu4c 64.2
=====================================
mac启动项
1，系统偏好设置->用户与群组->登录项 查看：cat ~/Library/Preferences/com.apple.loginitems.plist
2，launch启动项
ll ~/Library/LaunchAgents
ll /Library/LaunchDaemons
ll /Library/LaunchAgents
ll /System/Library/LaunchDaemons
ll /System/Library/LaunchAgents
launchctl list
launchctl load xxx.plist
launchctl unload xxx.plist
plist文件选项：RunAtLoad自动运行/KeepAlive持续运行/StartCalendarInterval设置定时执行
3，/System/Library/StartupItems 和 /Library/StartupItems
4，crontab -l
5，关闭Spotlight系统偏好设置->聚焦
=========================================
Spotlight 关闭掉
sudo mdutil -a -i off
sudo mdutil -a -i on
cd /System/Library/CoreServices/
sudo mv Search.bundle/ Search2.bundle/
sudo mv Search2.bundle/ Search.bundle/
sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
=======================================
mac chrome 书签位置
cp '/Users/hcxiong/Library/Application Support/Google/Chrome/Default/Bookmarks' '/Users/hcxiong/git_pro/Bookmarks'
把Bookmarks文件删除，然后把Bookmarks.bak重命名为Bookmarks
在Chrome浏览器中输入chrome://restart
==================================
已损坏，打不开。您应该将它移到废纸篓
sudo spctl --master-disable
sudo spctl --master-enable
==================================
java -jar ~/compiler.jar --js "$descPath/jsfile.max.js" --create_source_map "$descPath/jsfile.min.js.map" --source_map_format=V3 --js_output_file "$descPath/jsfile.min.js"
==================================
brew install mediainfo
mediainfo 1.png
https://github.com/MediaArea/MediaInfo
brew cask install qlimagesize
https://github.com/Nyx0uf/qlImageSize/releases/latest
qlmanage -r
https://github.com/Nyx0uf/qlImageSize
brew cask install phew
https://github.com/sveinbjornt/Phew
==================================
diskutil list 或 fdisk -l #查看当前系统所有硬盘及分区情况
diskutil info /dev/disk0 #查看具体分区参数
fdisk /dev/disk2 #在指定的硬盘（例：/dev/sda）上创建分区：查看帮助（h），新建分区（n），删除分区（d），查看分区情况（p），分区成功后，写分区表并退出（w）
mkfs.ext4 /dev/sdb1 #对新建分区（例：/dev/sda1）进行格式化
mkdir -p /dfs/dn1 #创建分区挂接目录
mount /dev/sdb1 /dfs/dn1 #挂接分区
vi /etc/fstab
/dev/sdb1 /dfs/dn1 ext4 defaults 0 0
或者
brew install e2fsprogs
brew install https://raw.githubusercontent.com/yalp/homebrew-core/fuse-ext2/Formula/fuse-ext2.rb
mke2fs
brew cask install osxfuse
brew install ext2fuse
brew install ext4fuse
挂载
sudo ext2fuse /dev/disk2s2 ~/Desktop/usbdisk -o rw+
sudo ext4fuse /dev/disk2s2 ~/Desktop/usbdisk -o rw+
sudo mount -t fuse-ext2 /dev/disk2s2 ~/Desktop/usbdisk
格式化ext4，一定要取消挂载后格式化
sudo mkfs.ext4 /dev/disk2s2
sudo umount ~/Desktop/usbdisk

brew install ntfs-3g
mount -t ntfs-3g
mount -t ntfs-3g /dev/sdb1 /mnt/ntfs_disk
ntfs-3g /dev/sdb1 /mnt/ntfs_disk
vi /etc/fstab
ntfs-3g silent,umask=0,locale=zh_CN.utf8 0 0

MACOS磁盘分区
https://www.jianshu.com/p/6a1f365617ad
diskutil listFilesystems #支持的文件系统
diskutil eraseDisk MS-DOS raspberrypi disk2 #将优盘数据擦除并格式化为 FAT32 格式
diskutil eraseDisk ExFAT raspberrypi disk2 #将优盘数据擦除并格式化为 ExFAT 格式
diskutil eraseDisk HFS+ raspberrypi disk2 #将优盘数据擦除并格式化为 Apple_HFS 格式
diskutil eraseDisk ExFAT raspberrypi MBR disk2 #擦除磁盘时指定分区表类型 NTFS 格式
#创建分区：优盘（disk2）上创建了 3 个分区，第一个（F01）格式为 FAT32，大小是 3 Gb。第二个（F02）格式为 JHFS+，大小为 3 Gb。最后一个是『自由空间』，大小为剩余的容量。
diskutil partitionDisk disk2 3 MBR MS-DOS F01 3G JHFS+ F02 3G HFS+ F03 0
diskutil partitionDisk disk2 2 ExFAT rpi 30G ExFAT data 0
#分割分区：优盘的第二个分区（disk2s2）又分割成了两个更小的分区，分别是 FAT32 格式的 F01（disk2s2），和 JHFS+ 格式的 F02（disk2s3）。虽然命令中指定了 F02 的大小是 3G，因为是最后一个分区，所以自动扩展到占用剩余的磁盘空间。最后它的实际大小是 4.5G。
diskutil splitPartition disk2s2 2 MS-DOS F02 1.5g JHFS+ F04 1.5g
#合并分区：disk2s2 disk2s3
diskutil mergePartitions JHFS+ Starky disk2s2 disk2s3
#调整分区大小（无损）
diskutil resizeVolume disk2s2 4g

LINUX磁盘分区
fdisk -l
fdisk /dev/disk2 #在指定的硬盘（例：/dev/sda）上创建分区：查看帮助（h），新建分区（n），删除分区（d），查看分区情况（p），分区成功后，写分区表并退出（w）
[New]--[Primary]--手动输入分区容量，以M为单位。回车，创建成功。
mkfs.ext4 /dev/sdb1
e2label 分区路径 卷标名
mount -t /dev/sdb1 /mnt/sdb1
umount /dev/sdb1
vi /etc/fstab
/dev/sdb1          /mnt/sdb1          ext4     defaults     0 2
chmod 777 /mnt/sdb1
===============================================
如何修复拆分的融合硬盘
https://support.apple.com/zh-cn/HT207584

制做系统启动盘
下载macos-mojave系统：
https://apps.apple.com/cn/app/macos-mojave/id1398502828?aosid=p239&cid=aos-cn-aff-ir&clickid=3k5zbeSSCxyJU5U0EBxnPXevUknzXx3DDUbp2I0&irchannel=13654&ircid=7639&irgwc=1&irpid=1244234&mt=12
格式化U盘MACOS扩展(日志式)，名称为：Mojave
制作系统盘：
sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave /Applications/Install\ macOS\ Mojave.app —nointeraction
开机出现闪烁的问号文件夹解决方法
Command (⌘)-R 重新安装您的 Mac 上装有的最新 macOS（建议操作）
Option-⌘-R 升级到与您的 Mac 兼容的最新 macOS
Shift-Option-Command-R 重新安装 Mac 随附的 macOS 或与它最接近且仍在提供的版本。
================================================================
sqlite3 ~/Library/Containers/com.tencent.QQMusicMac/Data/Library/Application\ Support/QQMusicMac/qqmusic.sqlite
select replace(singer||'-'||name,x'0a',','), file from NEWFOLDERSONGS as a inner join NEWFOLDERS as b on a.seq=b.seq and a.seq=199 inner join SONGS as c on c.id=a.id;
=========================================================
安装Cocospods
更新系统的gem版本：打开终端，输入：sudo gem update --system；
设置国内gem源：gem sources --list输出为https://gems.ruby-china.org/请略过此步；否则先删除官方源再添加gems国内源：gem sources --remove https://rubygems.org/; gem sources --add https://gems.ruby-china.org/；
安装Cocospods：sudo gem install cocoapods。
=========================================================
rvictl
在使用rvictl对手机进行抓包时报错: rvictl: command not found
1>. xcode没有安装Command Line Tools,执行命令 xcode-select --install 安装一下然后重启终端，对我无效
2>. 进入/usr/bin，看有没有rvictls安装。没有的话,进入下面两个目录，安装下两个pkg。
a. Xcode.app/Contents/Resources/Packages/MobileDevice.pkg
b. Xcode.app/Contents/Resources/Packages/MobileDeviceDevelopment.pkg
然后重启下终端，再调用rvictls -s,检查该命令是否生效
我的系统升级为10.15.1后发现常用的上述两个方法依然无法使用,查阅相关资料后发现,是由于该命令被放到其他路径所导致。
将该路径添加到环境path中即可:
vi /etc/paths
添加 /Library/Apple/usr/bin/

system_profiler SPUSBDataType | grep "Serial Number:.*" | sed s#".*Serial Number: "##

rvictl -s 00008020-0004342E3C28002E
rvictl -x 00008020-0004342E3C28002E
=====================================================
Wireshark
过滤关系：eq == ne != gt > lt < ge >= le <= matches ~ bitwise_and & not ! or || and && xor ^^ [...] in contains
过滤条件：
ip.host==192.168.0.158
ip.dst==192.168.0.158 or ip.src==192.168.0.158 and tcp
ip.src==192.168.0.158 and tcp
eth.addr==E0:33:8E:AB:E6:91
ip.src==192.168.0.0/16
tcp.port==8230
tcp.port==80 || udp.port==80
tcp.dstport==80 || tcp.srcport==80
tcp.port >= 1 and tcp.port <= 80
tcp.len>=20
icmp
icmp[0]==8
icmp[0]==0
http.request.method==GET
http.request.method==POST
http contains HTTP
http.content_length <=20
http.request.urimatches "vipscu"

telnet arp snmp dns icmp
protocol：可能值http、https、ftp、udp、tcp、ipv4、ipv6、arp、icmp等协议
direction：可能的值 src、dst、src and dst、src or dst 默认src or dst
host(s):可能的值 net、port、host、portrange 默认host
logical operation（逻辑运算）：not and or not具有最高优先级，and or优先级相同，运算从左向右


TCP连接:SYN ACK RST UTG PSH FIN
三次握手：发送端发送一个SYN=1，ACK=0标志的数据包给接收端，请求进行连接，这是第一次握手；
接收端收到请求并且允许连接的话，就会发送一个SYN=1，ACK=1标志的数据包给发送端，告诉它，可以通讯了，并且让发送端发送一个确认数据包，这是第二次握手；
最后，发送端发送一个SYN=0，ACK=1的数据包给接收端，告诉它连接已被确认，这就是第三次握手。之后，一个TCP连接建立，开始通讯。
*SYN：同步标志
同步序列编号(Synchronize Sequence Numbers)栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端(一般是客户端)的初始序列编号。
在这里，可以把 TCP序列编号看作是一个范围从0到4，294，967，295的32位计数器。通过TCP连接交换的数据中每一个字节都经过序列编号。
在TCP报头中的序列编号栏包括了TCP分段中第一个字节的序列编号。
*ACK：确认标志
确认编号(Acknowledgement Number)栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号(w+1，Figure-1)为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。
*RST：复位标志
复位标志有效。用于复位相应的TCP连接。
*URG：紧急标志
紧急(The urgent pointer) 标志有效。紧急标志置位，
*PSH：推标志
该标志置位时，接收端不将该数据进行队列处理，而是尽可能快将数据转由应用处理。在处理 telnet 或 rlogin 等交互模式的连接时，该标志总是置位的。
*FIN：结束标志
带有该标志置位的数据包用来结束一个TCP回话，但对应端口仍处于开放状态，准备接收后续数据。
TCP的几个状态对于我们分析所起的作用。在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.其中，对于我们日常的分析有用的就是前面的五个字段。它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。
其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。
TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。
RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；
而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。
PSH为1的情况，一般只出现在DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。
========================================================
xcodebuild -project JGKWX.xcodeproj clean
xcodebuild -project JGKWX.xcodeproj build
xcodebuild archive -project JGKWX.xcodeproj build -scheme JGKWX -archivePath ./archive/dsqp.xcarchive
xcodebuild -exportArchive -archivePath ./archive/dsqp.xcarchive -exportPath ./archive/dsqp.ipa -exportOptionsPlist ./archive/dsqp.plist

xcodebuild archive -project JGKWX.xcodeproj build -scheme JGKWX -archivePath ./archive/app.xcarchive -configuration Ad-hoc -sdk iphoneos
xcodebuild -exportArchive -archivePath ./archive/app.xcarchive -exportPath ./archive/app.ipa -exportOptionsPlist ./archive/app.plist

vi dsqp.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>compileBitcode</key>
    <false/>
    <key>method</key>
    <string>enterprise</string>
    <key>provisioningProfiles</key>
    <dict>
        <key>com.laisan.jgkwx</key>
        <string>package_dep</string>
    </dict>
</dict>
</plist>

xcodebuild -target JGKWX build
xcodebuild -scheme shemename -workspace xxx.xcworkspace build
xcrun -sdk iphoneos PackageApplication -v dsqp.app -o dsqp.ipa
security cms -D -i package_dep.mobileprovision
security cms -D -i package_dis.mobileprovision

altool --validate-app -f file -u username [-p password] [--output-format xml]
altool --upload-app -f file -u username [-p password] [--output-format xml]

sudo gem install fastlane
fastlane gym --export_method ad-hoc
fastlane gym --workspace ./Demo.xcworkspace --scheme Demo --clean --configuration Adhoc --archive_path ./archive/Demo.xcarchive" --export_method ad-hoc --output_directory ./ipa --output_name demo.ipa
fastlane gym --project ./JGKWX.xcodeproj --scheme JGKWX --clean --archive_path ./archive/JGKWX.xcarchive --output_directory ./archive --output_name app --export_xcargs -allowProvisioningUpdates

gem install fir-cli
fir login XXX_YOUR_API_TOKEN_XXX
fir publish APP_FILE_PATH
fir publish ${ipa_path} -T "XXX_YOUR_API_TOKEN_XXX" -c "${commit_msg}"
==================================================================
ANDROID签名
sudo jarsigner -tsa http://timestamp.digicert.com -sigalg SHA1withRSA -digestalg SHA1 -keystore nerve-android.keystore -storepass 123456 -signedjar android-release-signed.apk android-release-unsigned.apk nerve
jarsigner -verbose -keystore nerve-android.keystore -storepass 123456 -signedjar android-release-signed.apk -digestalg SHA1 -sigalg MD5withRSA android-release-unsigned.apk nerve
压缩APK包
zipalign -z 4 android-release-signed.apk nerve.apk
IOS重新签名
ausign_linux -email cq@qq.com -p 123456
ausign_linux -login cq@qq.com -p 123456
ausign_linux -password 123456789 -o 123456
普通签名例子
ausign_linux -sign cq.ipa -p 123 -c cq.p12 -m cq.mobileprovision -o cq2.ipa
-dt 自动删除锁签名
-at 20191212 自动插入时间锁
-id com.tencent.wechat22222222 修改应用id后签名
ausign_linux -sign 2.ipa -c my.p12 -m my.mobileprovision -p “123” -o resign-555.ipa -id “com.tencent.wechat3” -n “微信马甲3” -v “1.0.0” -dt -at 20190902
自动删除时间锁，自动插入时间锁设置到期日期20190902，然后把id修改为自己的com.tencent.wechat3，把名字修改为微信马甲3,把版本号改成1.0.0
ausign -apps #查看先有的应用列表
修改应用信息签名到期时间
ausign -app 3aa99adf-72e7-441a-be5b-518c050a79b2 -k expire_time -v 20190801
expire_time（到期时间，格式20190102）,is_bid(是否被禁用,1表示禁用,0不禁用),is_deleted(是否删除),alert_msg(app过期提醒信息),description(应用的备注),contact(应用的联系人信息)
修改应用描述信息
ausign -app 3aa99adf-72e7-441a-be5b-518c050a79b2 -k description -v "微信马甲最新版收150元"
修改应用到期提醒信息
ausign -app 3aa99adf-72e7-441a-be5b-518c050a79b2 -k alert_msg -v "签名已经到期，请联系qq2462611616"
删除app
ausign -app 3aa99adf-72e7-441a-be5b-518c050a79b2 -k is_deleted -v 1
禁用app
ausign -app 3aa99adf-72e7-441a-be5b-518c050a79b2 -k is_bid -v 1
给app设置个联系人信息
ausign -app 3aa99adf-72e7-441a-be5b-518c050a79b2 -k contact -v "张三qq2462611616"
修改统一的签名到期提醒
ausign -user alert_msg -v "签名到期了，请联系xxx"
设置到期后弹窗提示后再闪退
ausign -user expired_alert -v 1
设置到期后直接闪退奔溃
ausign -user expired_alert -v 0
更新应用安装量和运行量报告
ausign -user report -v 1
激活软件
ausign -user code -v "aa99adf-72e7-441"
校验证书密码是否正确
ausign -check my.p12 -p 123456
http://s.kxapp.com/
http://sign.applicationloader.net/
=================================================================
yum install sshpass
sshpass -p 123456 ssh root@10.0.0.10 'll /home'

=================================================================
CleanMyMacX 无法打开
codesign -f -s - --deep /Applications/CleanMyMac\ X.app
sudo xattr -d com.apple.quarantine /Applications/CleanMyMac\ X.app
================================================================
dscl . -list /Users UniqueID           //查看用户
dscl . -list /Groups  PrimaryGroupID   //查看用户组
================================================================
sudo mdutil -i off #关闭索引
sudo mdutil -E #清理索引
sudo mdutil -i o #打开索引
================================================================
Error: Permission denied @ apply2files - /usr/local/lib/docker/cli-plugins
sudo chown -R $(whoami) $(brew --prefix)/*
===============================================================
brew install smartmontools
查询硬盘信息
diskutil list
smartctl -s on disk0
smartctl -a disk0

brew install gsmartcontrol

==============================================================
启动盘制作工具
brew install balenaetcher
=============================================================
rEFind
https://github.com/topics/refind-theme
https://github.com/techysy/rEFInd
http://www.rodsbooks.com/refind/

https://www.ithome.com/0/425/537.htm
http://www.jiyiyq.com/zixun_3/2632135.html
https://baijiahao.baidu.com/s?id=1663958483995327870&wfr=spider&for=pc

debian
sudo apt-add-repository ppa:rodsmith/refind
sudo apt-get update
sudo apt-get install refind
https://newcontinuum.dl.sourceforge.net/project/refind/0.11.4/refind_0.11.4-1_amd64.deb
sudo dpkg -i refind_0.11.4-1_amd64.deb
sudo refind-install
Refind所有的配置信息位于/boot/efi/EFI/refind/refind.conf。
Deepin，引导文件位于deepin/grubx64.efi
Windows引导文件，位于Microsoft/Boot/bootmgfw.efi
而我们需要保留的就这两个，其他的一律屏蔽，屏蔽的命令:
dont_scan_files /EFI/ubuntu/grubx64.efi,XXX,XXX
# 启动吧，屏蔽内核检查的指令如下：
scan_all_linux_kernels false
涉及到refind的主题美化的方面，指令内容为：
include  themes/rEFInd-minimal/theme.config

hideui singleuser,hints,arrows,label,badges
icons_dir themes/rEFInd-minimal/icons
banner themes/rEFInd-minimal/background.png
banner_scale fillscreen
selection_bigthemes/rEFInd-minimal/selection_big.png
selection_small themes/rEFInd-minimal/selection_small.png
showtools shutdown

win10
https://msdn.itellyou.cn/
https://www.microsoft.com/zh-cn/windows
https://www.microsoft.com/zh-cn/software-download/windows10ISO
Ubuntu
https://www.ubuntu.com/download
https://mirror.lzu.edu.cn/ubuntu-releases/20.10/ubuntu-20.10-desktop-amd64.iso

OpenCore
https://oc.skk.moe/
https://www.jianshu.com/p/da68e410612f
https://blog.csdn.net/weixin_50656679/article/details/109504308
==================================
brew install aria2 aria2gui

brew install go #v1.16.2
brew install go@1.15

https://github.com/oott123/WinMTR
brew install mtr
mtr -r baidu.com
mtr -r -c 50 baidu.com

brew install starship
vi ~/.bashrc
eval "$(starship init bash)"
vi ~/.zshrc
eval "$(starship init zsh)"

删除重复文件 RUST开发
brew install gtk+3
brew install rust cargo
cargo install czkawka_gui
cargo install czkawka_cli

brew install youtube-dl

brew install tcpkali
tcpkali --ws -c 100 -m 'hello world!' -r 10k localhost:8081

brew install elasticsearch
brew services restart elasticsearch
elasticsearch-keystore list
elasticsearch-keystore add s3.client.default.secret_key
elasticsearch-keystore remove s3.client.default.secret_key
elasticsearch-keystore create -p
elasticsearch-keystore passwd

brew install openjdk
vim ~/.bash_profile
export JAVA_HOME=/usr/local/opt/openjdk/libexec/openjdk.jdk/Contents/Home
export PATH=$JAVA_HOME/bin:$PATH
source ~/.bash_profile
echo $JAVA_HOME
/usr/libexec/java_home

brew install mysql mysql-client
brew services stop mysql
mysqld_safe --skip-grant-tables &
mysql
> use mysql
> update user set host='%' where user='root';
> update user set host='%' where host='localhost';
> ALTER USER 'root'@'%' IDENTIFIED BY '123456' PASSWORD EXPIRE NEVER;
> ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
> flush privileges;
> ALTER USER 'root'@'%' IDENTIFIED BY '123456';
> flush privileges;
> quit
vi /usr/local/etc/my.cnf
# Default Homebrew MySQL server config
[mysqld]
# Only allow connections from localhost
bind-address = 0.0.0.0
mysqlx-bind-address = 0.0.0.0

MySQL 连接出现 Authentication plugin 'caching_sha2_password' cannot be loaded
> ALTER USER 'root'@'%' IDENTIFIED BY '123456' PASSWORD EXPIRE NEVER;
> ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
> flush privileges;

brew install postgresql
brew postgresql-upgrade-database
brew services start postgresql
initdb /usr/local/var/postgres/data -E utf8 --locale=zh_CN.UTF-8
pg_ctl -D /usr/local/var/postgres/data -l logfile start
pg_ctl -D /usr/local/var/postgres/data stop -s -m fast
lsof -i:5432
createuser root -P
createdb etms -O root -E UTF8 -e
psql -l
psql -U root -d etms -h 127.0.0.1
CREATE TABLE users(id int NOT NULL, name varchar(20) NOT NULL, age int NOT NULL, PRIMARY KEY ("id"));
CREATE TABLE users(id int PRIMARY KEY NOT NULL, name varchar(20) NOT NULL, age int NOT NULL);

INSERT INTO users(id, name, age) VALUES(1, 'name', 16);
SELECT * FROM users WHERE id = 1;
UPDATE users SET name = '11111' WHERE id = 1;
DELETE FROM users WHERE id = 1;
DROP TABLE users;
DROP DATABASE etms;
dropdb -U root etms

记得加 "--locale=zh_CN.UTF-8" 选项，不然会报以下错误：
lc_collate cluster values do not match: old "zh_CN.UTF-8", new "en_US.UTF-8"

pg_upgrade 进行数据迁移：
pg_upgrade -b /usr/local/Cellar/postgresql/9.2.4/bin/ -B /usr/local

批量下载m3u8文件
pip install -U caterpillar-hls
caterpillar manifest.txt
https://example.com/hls/1.m3u8  1.mp4
$ caterpillar --intermediate-format ts 'http://test.com/playlist.m3u8' output.ts

ffmpeg -i 1.mp4 -qscale 0 1.mpg
ffmpeg -i 2.mp4 -qscale 0 2.mpg
cat 1.mpg 2.mpg | ffmpeg -f mpeg -i - -qscale 0 -vcodec mpeg4 output.mp4
mp4box.exe -add video1.mp4 -cat video2.mp4 destvideo.mp4
ffmpeg -i opening.mkv -i episode.mkv -i ending.mkv \
-filter_complex "[0:v] [0:a] [1:v] [1:a] [2:v] [2:a] \
concat=n=3:v=1:a=1 [v] [a]" \
-map "[v]" -map "[a]" output.mkv
cat mylist.txt
file '/path/to/file1'
file '/path/to/file2'
file '/path/to/file3'
$ ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4
(echo file 'first file.mp4' & echo file 'second file.mp4' )>list.txt
ffmpeg -safe 0 -f concat -i list.txt -c copy output.mp4
ffmpeg -i "concat:input1|input2" -codec copy output.mkv

brew install pgloader

mysqldump --compatible=postgresql --default-character-set=utf8 -r traingo.mysql -u root traingo
mysqldump --skip-opt --compatible=ansi --compact --default-character-set=utf8 -r -u root traingo > traingo.sql

mysqldump -h 127.0.0.1 -u root -p --compatible=postgresql -r traingo > traingo.sql
psql -h 127.0.0.1 -d traingo -U root -f ./traingo.sql

pip3 install sqlacrossover[MySQL,PostgreSQL] sqlalchemy
sqlacrossover 'mysql+pymysql://root:123456@127.0.0.1:3306/traingo?charset=utf8mb4' 'postgresql://root:123456@127.0.0.1:5432/traingo?sslmode=disable' --create-all
sqlacrossover 'mysql+pymysql://root:123456@127.0.0.1:3306/traingo?charset=utf8mb4' 'postgresql://root:123456@127.0.0.1:5432/traingo?sslmode=disable'
createdb traingo -O root -E UTF8 -e
psql -U root -d traingo -h 127.0.0.1
select tablename from pg_tables where schemaname='public'
\d tb_test;
explain (analyze,verbose,timing,costs,buffers) select * from t_hash where info in (select info from t_hash limit 1);

go get -u github.com/aktau/gomig
gomig generate-config
gomig migrate -f config.yml


JET / MS Access database (MDB) tools
brew install mdbtools
apt-get install mdbtools
dnf install mdbtools
yum install mdbtools

for TT in $(mdb-tables file.mdb); do
     mdb-export -Q -d '\t' -D '%Y-%m-%d %H:%M:%S' file.mdb "$TT" > "${TT}.tsv"
done
for TT in $(mdb-tables file.mdb); do
     mdb-export -D '%Y-%m-%d %H:%M:%S' file.mdb "$TT" > "${TT}.csv"
done
mdb-tables -1 file.mdb| while read TT
do
     mdb-export -D '%Y-%m-%d %H:%M:%S' file.mdb "$TT" > "${TT}.csv"
done

vi access2psql.sh
#!/bin/sh -e

mdbfn=$1
schemafn=$2
fkfn=$3
datafn=$4
schema=$5

tf=$(tempfile)

pre=""
[ -n "${schema}" ] && pre="\"${schema}\"."

mdb-schema "${mdbfn}" postgres > "${tf}"

# Schema file
echo "BEGIN;\n" > "${schemafn}"

sp=""
[ -n "${schema}" ] && echo "CREATE SCHEMA \"${schema}\";\n" >> "${schemafn}"
[ -n "${schema}" ] && sp="SET search_path = \"${schema}\", pg_catalog;\n" 

echo ${sp} >> "${schemafn}"

awk '($0 !~ /^ALTER TABLE.*FOREIGN KEY.*REFERENCES/) {print;}' "${tf}" >> "${schemafn}"

echo "\nEND;" >> "${schemafn}"

# Foreign keys file
echo "BEGIN;\n" > "${fkfn}"
echo ${sp} >> "${fkfn}"

awk '($0 ~ /^ALTER TABLE.*FOREIGN KEY.*REFERENCES/) {print;}' "${tf}" >> "${fkfn}"

echo "\nEND;" >> "${fkfn}"

# Data file
echo "BEGIN;\n" > "${datafn}"
echo "SET CONSTRAINTS ALL DEFERRED;\n" >> "${datafn}"

mdb-tables -1 "${mdbfn}" | while read TT
do
    mdb-export -Q -d '\t' -D '%Y-%m-%d %H:%M:%S' "${mdbfn}" "$TT" > "${tf}"

    awk -v pre="${pre}" -v TT="${TT}" \
    '(NR==1) {gsub(/\t/,"\",\""); print "COPY " pre "\"" TT "\"(\"" $0 "\") FROM stdin;";}' "${tf}" >> "${datafn}"
    awk '(NR>1) {gsub(/\t\t/,"\t\\N\t"); gsub(/\t$/,"\t\\N"); gsub(/\t\t/,"\t\\N\t"); print;}' "${tf}" >> "${datafn}"

    echo "\\.\n" >> "${datafn}"
done

echo "END;" >> "${datafn}"

rm -f "${tf}"

access2psql.sh file.mdb schema.sql foreignkeys.sql data.sql pg_schema_name
psql -f schema.sql pg_db_name
psql -f data.sql pg_db_name
psql -f foreignkeys.sql pg_db_name


pip3 install pg_chameleon
https://www.convert-in.com/mysql-to-postgres.htm
FULL CONVERT
https://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL

cp, mv, dd, tar, gzip/gunzip, cat progress
brew install progress
progress -w

brew install tldr
tldr --update
tldr curl
alias woman=tldr
woman curl

cat id_rsa.pub | pbcopy
pbpaste

mds mds_stores 关闭
sudo mdutil -a -i off
sudo mdutil -E
sudo mdutil -a -i on
sudo fs_usage -w -f filesys mds_stores

http://www.figlet.org/
https://github.com/cmatsuoka/figlet

brew install toilet
toilet -f ascii12 linuxmi|lolcat
toilet -f ascii9 linuxmi|lolcat
toilet -f bigascii12 linuxmi|lolcat
toilet -f bigascii9 linuxmi|lolcat
toilet -f bigmono12 linuxmi|lolcat
toilet -f bigmono9 linuxmi|lolcat
toilet -f circle linuxmi|lolcat
toilet -f emboss2 linuxmi|lolcat
toilet -f emboss linuxmi|lolcat
toilet -f future linuxmi|lolcat
toilet -f future linuxmi|lolcat
toilet -f letter linuxmi|lolcat
toilet -f mono12 linuxmi|lolcat
toilet -f mono9 linuxmi|lolcat
toilet -f smmono12 linuxmi|lolcat
toilet -f smmono9 linuxmi|lolcat
toilet -f smascii12 linuxmi|lolcat
toilet -f smascii9 www.linuxmi.com|lolcat
toilet -f smblock www.linuxmi.com|lolcat
toilet -f smbraille www.linuxmi.com|lolcat
toilet -f wideterm www.linuxmi.com|lolcat

AVIF图片 https://squoosh.app/
https://github.com/AOMediaCodec/libavif
./avifenc happy_dog.jpg example.avif --min 0 --max 63 -a end-usage=q -a cq-level=32 -a tune=ssim -a deltaq-mode=3 -a sharpness=3 -y 420
./avifenc happy_dog.jpg example.avif --jobs 8
<picture>
  <source type="image/avif" srcset="example.avif" />
  <img src="happy_dog.jpg" />
</picture>
ffmpeg -i input.gif -pix_fmt yuv420p -f yuv4mpegpipe output.y4m
avifenc ice_qcif_15fps.y4m animated.avif
<picture>
  <source type="image/avif" srcset="animated.avif" />
  <img src="ice_qcif_15fps.gif" />
</picture>
WEBP图片
https://developers.google.com/speed/webp/download
https://developers.google.com/speed/webp/docs/precompiled

MAC 自带测速工具（400M）
networkQuality -v
==== SUMMARY ====
Upload capacity: 33.384 Mbps
Download capacity: 40.588 Mbps
Upload flows: 16
Download flows: 12
Responsiveness: Medium (503 RPM)
Base RTT: 1
Start: 2021/11/23 18:09:17
End: 2021/11/23 18:09:33
OS Version: Version 12.1 (Build 21C5021h)
https://www.speedtest.cn/

提示chsh:no changes made 解决办法：终端输入：
dscl . -read /Users/$USER/ UserShell
exec su - $USER

命令行工具
查看系统安装了哪些SHELL
cat /etc/shells
当前使用的SHELL
echo $SHELL
切换SHELL
chsh -s /bin/zsh
usermod -s /bin/zsh root

https://mp.weixin.qq.com/s/C9RQ9DT-BeU2pMI7Qwm_8Q
90后命令行
https://github.com/fish-shell/fish-shell
brew install fish
https://fishshell.com/
fish_config

☄🌌️ 适用于任何 shell 的最小、极快且可无限自定义的提示！
https://github.com/starship/starship
https://starship.rs/
brew install starship
vi ~/.bashrc
vi ~/.zshrc
eval "$(starship init bash)"
vi ~/.config/fish/config.fish
starship init fish | source

命令行模糊查找器
https://github.com/junegunn/fzf
brew install fzf
$(brew --prefix)/opt/fzf/install

https://github.com/asciinema/asciinema
brew install asciinema
asciinema rec [filename]
asciinema play /path/to/asciicast.cast

https://github.com/daveewart/colordiff
https://github.com/so-fancy/diff-so-fancy

简化版的命令帮助手册
pip3 install tldr
npm install -g tldr

sqlite pgsql client
https://github.com/dbcli/litecli
pip install litecli
brew install litecli
.tables
https://github.com/dbcli/pgcli
pip install -U pgcli
brew install pgcli
pgcli [database_name]
pgcli postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]
pgcli postgres://amjith:pa$$w0rd@example.com:5432/app_db?sslmode=verify-ca&sslrootcert=/myrootcert
https://github.com/dbcli/mycli
pip install -U mycli
brew install mycli
dnf install mycli

https://github.com/mas-cli/mas
brew install mas
mas list
mas search Xcode
mas install 808809998
mas lucky twitter
mas purchase 768053424
mas outdated
mas upgrade
mas upgrade 715768417
mas signin mas@example.com
mas signin --dialog mas@example.com

磁盘分析
https://dev.yorhel.nl/ncdu
https://dev.yorhel.nl/ncdu/man2

https://github.com/videolan/vlc
https://www.videolan.org/vlc/download-macosx.html
https://www.videolan.org/vlc/
https://github.com/pulseaudio/pulseaudio

https://github.com/koalaman/shellcheck
yum -y install epel-release
yum install ShellCheck
dnf install ShellCheck
brew install shellcheck
shellcheck yourscript

https://github.com/mvdan/sh
go install mvdan.cc/sh/v3/cmd/shfmt@latest
shfmt -l -w script.sh

https://github.com/withfig/autocomplete
fig.io
brew install fig

Comsol FDTD 电磁波仿真
Ansys工程设计仿真
Multism数学电力电子领域仿真
Mathtype公式编辑器
Mathpix公式截取
Setuna图文同步
Evenything科研文件搜索
Deepl翻译器
天若ocr
Krita 5.0 免费和开源数字绘画应用程序
https://github.com/KDE/krita
Krita 被漫画艺术家、插画家、概念艺术家、哑光和纹理画家以及数字 VFX 行业使用。
https://binary-factory.kde.org/job/Krita_Stable_MacOS_Build/

Zsh + Oh My Zsh，Linux 与 macOS 生产力工具
https://mp.weixin.qq.com/s/ldVO-drVV1ae_PM34ZCiYw
which zsh
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"

sqlitebrowser
dnf install sqlitebrowser
brew install --cask db-browser-for-sqlite

配色神器
https://coolors.co/
http://colormind.io/bootstrap
https://color.adobe.com/zh/create/color-wheel

Dbeaver 无法打开
显示包内容 -> Contents -> info.plist
https://dbeaver.io/download/
下载 DmJdbcDriver18-8.1.2.79.jar
驱动管理器 -> 新建 库增加DmJdbcDriver18-8.1.2.79.jar 找到类
jdbc:dm://127.0.0.1:5236/DM
填用户名SYSDBA和密码

-vm
/usr/libexec/java_home -V
echo $JAVA_HOME
<string>-vm</string><string>/usr/local/Cellar/openjdk/15.0.2/libexec/openjdk.jdk/Contents/Home/bin/java</string>

https://www.baifachuan.com/posts/4862a3b1.html
error: implicit declaration of function 'setresgid' is invalid in C99
brew install FiloSottile/musl-cross/musl-cross
https://github.com/filosottile/homebrew-musl-cross
ln -s /usr/local/opt/musl-cross/bin/x86_64-linux-musl-gcc /usr/local/bin/musl-gcc
brew install mingw-w64
wget https://copr.fedorainfracloud.org/coprs/ngompa/musl-libc/repo/epel-7/ngompa-musl-libc-epel-7.repo -O /etc/yum.repos.d/ngompa-musl-libc-epel-7.repo
yum install -y musl-libc-static

https://github.com/BurntSushi/ripgrep
brew install ripgrep

Blender 3.0 发布，三维动画制作软件重大更新
https://www.blender.org/download/

https://github.com/axboe/fio
https://github.com/khailey-zz/fio_scripts
brew install fio
随机写
fio -filename=/opt/test -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=16k -size=2G -numjobs=30 -runtime=100 -group_reporting -name=mytest
顺序写
fio -filename=/opt/test -direct=1 -iodepth 1 -thread -rw=write -ioengine=psync -bs=16k -size=2G -numjobs=30 -runtime=100 -group_reporting -name=mytest
顺序读
fio -filename=/dev/sda1 -direct=1 -iodepth=1 -rw=read -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=sqe_100read_4k
随机写
fio -filename=/opt/test -direct=1 -iodepth=1 -rw=randwrite -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=rand_100write_4k
70%随机读，30%随机写
fio -filename=/opt/test -direct=1 -iodepth= 1 -rw=randrw -rwmixread=70 -ioengine=psync -bs=4k -size=1000G -numjobs=50 -runtime=180 -group_reporting -name=randrw_70read_4k

免费和开源替代品
https://mp.weixin.qq.com/s/UMnVz6mqfOS2pI9FfRjC1Q
gimp
https://www.gimp.org/
https://www.gimp.org/downloads/
inkscape
https://inkscape.org/release/inkscape-1.1.1/
Inkscape 1.2 已于近日发布，作为此开源、免费和跨平台 SVG（可缩放矢量图形）编辑器
scribus
https://www.scribus.net/
openshot
https://www.openshot.org/
Synfig：
https://www.fosshub.com/Synfig.html/synfigstudio-1.2.0-64bit-r2.appimage
DarkTable：https://www.darktable.org/
Natron：https://natron.fr/
Ardor：https://ardour.org/
https://github.com/Ardour/ardour
Master PDF：
http://get.code-industry.net/public/master-pdf-editor-4.3.10_qt5.amd64.deb
qoi快速无损图像压缩的“相当好的图像格式”
https://github.com/phoboslab/qoi
https://github.com/floooh/qoiview
https://github.com/pfusik/qoi-ci/releases/tag/qoi-ci-1.1.0
https://github.com/iOrange/QoiFileTypeNet/releases/tag/v0.2
https://github.com/iOrange/QOIThumbnailProvider

yum install epel-release
yum install smem
smem -t -r
·VSS- Virtual Set Size 虚拟内存（包含共享库占用的内存）
·RSS- Resident Set Size 实际使用物理内存（包含共享库占用的内存）
·PSS- Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）
·USS- Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）

brew install lolcat
lolcat -h

开发字体
MonoLisa: https://www.monolisa.dev/
JetBrains Mono: https://www.jetbrains.com/lp/mono/
Fira Code: https://github.com/tonsky/FiraCode
Source Code Pro: https://github.com/adobe-fonts/source-code-pro
Steve Matteson: https://www.myfonts.com/person/Steve_Matteson/
AlbertoDorado: https://github.com/AlbertoDorado
发布了一个带有点划线零的版本: https://github.com/AlbertoDorado/droid-sans-mono-zeromod
Monoid: https://larsenwork.com/monoid/

https://marktext.app/
https://github.com/marktext/marktext

https://app.diagrams.net/

大屏可视化
https://mp.weixin.qq.com/s/0sbRtxyAj81eIuc7C9TatQ

brew install fd
fd *.md

brew install exa
显示选项
-1，--oneline：每行显示一个条目
-G，--grid：将条目显示为网格（默认）
-l，--long：显示扩展细节和属性
-R，--recurse：递归到目录
-T，--tree：作为树递归到目录中
-x，--across：对网格进行排序，而不是向下排序
-F，--classify：按文件名显示类型指示器
--colo[u]r：何时使用终端颜色
--colo[u]r-scale : 清楚地突出显示文件大小的级别
--icons : 显示图标
--no-icons : 不显示图标（总是覆盖 --icons）
过滤选项
-a，--all：显示隐藏和“点”文件
-d，--list-dirs：像普通文件一样列出目录
-L，--level=(depth)：限制递归深度
-r，--reverse：反转排序顺序
-s，--sort=(field)：按哪个字段排序
--group-directories-first：在其他文件之前列出目录
-D，--only-dirs：只列出目录
--git-ignore：忽略中提到的文件.gitignore
-I，--ignore-glob=(globs)：要忽略的文件的全局模式（管道分隔）

brew install ag
ag -g （文件名）：类似于 find . -name （文件名）
ag -i sed：忽略大小写搜索含 sed 文本
ag -A sed：搜索含 sed 文本，并显示匹配内容之后的 n 行文本
ag -B sed：搜索含 sed 文本，并显示匹配内容之前的 n 行文本
ag -C sed：搜索含 sed 文本，并同时显示匹配内容以及它前后各 n 行文本的内容
ag -w sed：全匹配搜索，只搜索与所搜内容完全匹配的文本
ag --java sed：在 java 文件中搜索含 sed 的文本
ag --xml sed：在 XML 文件中搜索含 sed 的文本

brew install axel

多设备显示适配
https://github.com/responsively-org/responsively-app
https://responsively.app/

DooTask是一款轻量级的开源在线项目任务管理工具，提供各类文档协作工具、在线思维导图、在线流程图、项目管理、任务分发、即时IM，文件管理等工具
https://github.com/kuaifan/dootask

我们可以通过tune2fs修改预留空间的比例
tune2fs -m 1 /dev/vda1

轻松安全地将内容从一台计算机发送到另一台计算机
https://github.com/schollz/croc
curl https://getcroc.schollz.com | bash
brew install croc
go install github.com/schollz/croc/v9@latest
croc code-phrase
croc send [file(s)-or-folder]
croc send --code [code-phrase] [file(s)-or-folder]
croc --yes --overwrite <code>
croc send --text "hello world"

HandBrake 视频转码
https://github.com/HandBrake/HandBrake
https://handbrake.fr/

恢复工具
https://mp.weixin.qq.com/s/vKDVpLBD5wEshleQhTug_Q
Redo Rescue
Clonezilla
Rescuezilla

FFmpeg5.0
https://evermeet.cx/ffmpeg/

https://github.com/FFmpeg/FFmpeg/tree/n5.0
apt install yasm nasm
./configure
make
make install
ffmpeg -version
ffmpeg -codecs

npm install --global yarn
yarn --version
yarn config set registry https://registry.npm.taobao.org
yarn config list
yarn set version classic #1.23
yarn set version berry #3.1
yarn set version canary #3.2
yarn set version latest
yarn set version 3.x
yarn set version 1.22.17

yum install tcptraceroute bc
apt-get install tcptraceroute bc
wget http://www.vdberg.org/~richard/tcpping
cp tcpping /usr/bin
chmod u+x tcpping
tcpping [-d] [-c] [-r sec] [-x count] ipaddress [端口]
-d: 在每个结果之前打印时间戳。
-c: 使用分列输出以便于解析。
-r：连续探测之间的间隔（以秒为单位）（默认为 1 秒）。
-x: 重复 n 次（默认无限制）。
[port]: 目标端口（默认为 80）。
tcpping www.rumenz.com
-t: 连续 TCPing ，直到使用 Ctrl+C 键停止
tcping -t 1.1.1.1 80
-n 5: TCPing 5次后停止
tcping -i 5 1.1.1.1 80
-w 0.5: 设置超时时间为 0.5秒（1秒=1000毫秒），单位 秒
tcping -w 0.5 1.1.1.1 80
-d:在每行返回信息中加入时间信息
tcping -d 1.1.1.1 80
-s: 当 TCPing 测试成功后（在超时时间以内返回 TCPing 延迟数据）自动停止 TCPing
tcping -s 1.1.1.1 80
-4: 优先 IPv4（如果一个域名有 IPv4 和 IPv6 解析，那么走 IPv4）
tcping -s 1.1.1.1 80
-6:优先 IPv6（如果一个域名有 IPv4 和 IPv6 解析，那么走 IPv6）
tcping -6 www.rumenz.com 80
--file: TCPing 将逐行循环遍历文件内的 服务器IP/域名 信息（一行一个，支持端口，例如：1.1.1.1 443）
tcping --file rumenz.txt

下载工具
downie

# 在vim中通过如下设置文件编码和文件格式
:set fileencodings=utf-8 ，然后 w （存盘）一下即可转化为 utf8 格式，
:set fileformat=unix

#normal模式下 g表示全局, x表示查找的内容, y表示替换后的内容
:%s/x/y/g
#normal模式下
0  # 光标移到行首(数字0)
$  # 光标移至行尾
shift + g # 跳到文件最后
gg # 跳到文件头
# 显示行号
:set nu
# 去除行号
:set nonu
# 检索
/xxx(检索内容)  # 从头检索, 按n查找下一个
?xxx(检索内容)  # 从尾部检索
# 在normal模式下
:w !sudo tee %

# 在mac下使用dos2unix进行文件格式化
find . -name "*.sh" | xargs dos2unix

zsh:no matches found
vim ~/.zshrc
setopt no_nomatch
source ~/.zshrc

VM VirtualBox 虚拟机 挂载ISO
http://download.virtualbox.org/virtualbox/6.1.32/
http://download.virtualbox.org/virtualbox/6.1.32/VirtualBox-6.1.32-149290-OSX.dmg

mount /path/to/image.iso /media/iso -o loop
umount /media/iso

/Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso

wget http://download.virtualbox.org/virtualbox/6.1.32/VBoxGuestAdditions_6.1.32.iso
mount /home/VBoxGuestAdditions.iso /media/iso -o loop
cd /media/iso/
./VBoxLinuxAdditions.run
reboot

查看当前虚拟机中所有连接的虚拟设备
lsscsi (适用于centos7) lsblk  (适用于ubuntu)

mount -t vboxsf htsy /home/htsy/

网络模拟工具
华三hcl
eve
华为ensp

brew tap showwin/speedtest
brew install speedtest
brew update
brew upgrade speedtest

数学公式搜索
https://approach0.xyz/search/
https://github.com/approach0/search-engine

小工具
https://readme.so/editor

Binutils
一组二进制程序处理工具，包括：addr2line、ar、objcopy、objdump、as、ld、ldd、readelf、size等。这一组工具是开发和调试不可缺少的工具，分别简介如下：
addr2line：用来将程序地址转换成其所对应的程序源文件及所对应的代码行，也可以得到所对应的函数。该工具将帮助调试器在调试的过程中定位对应的源代码位置。
as：主要用于汇编，有关汇编的详细介绍请参见后文。
ld：主要用于链接，有关链接的详细介绍请参见后文。
ar：主要用于创建静态库。为了便于初学者理解，在此介绍动态库与静态库的概念：
如果要将多个.o目标文件生成一个库文件，则存在两种类型的库，一种是静态库，另一种是动态库。
在windows中静态库是以 .lib 为后缀的文件，共享库是以 .dll 为后缀的文件。在linux中静态库是以.a为后缀的文件，共享库是以.so为后缀的文件。
静态库和动态库的不同点在于代码被载入的时刻不同。静态库的代码在编译过程中已经被载入可执行程序，因此体积较大。共享库的代码是在可执行程序运行时才载入内存的，在编译过程中仅简单的引用，因此代码体积较小。在Linux系统中，可以用ldd命令查看一个可执行程序依赖的共享库。
如果一个系统中存在多个需要同时运行的程序且这些程序之间存在共享库，那么采用动态库的形式将更节省内存。
ldd：可以用于查看一个可执行程序依赖的共享库。
objcopy：将一种对象文件翻译成另一种格式，譬如将.bin转换成.elf、或者将.elf转换成.bin等。
objdump：主要的作用是反汇编。有关反汇编的详细介绍，请参见后文。
readelf：显示有关ELF文件的信息，请参见后文了解更多信息。
size：列出可执行文件每个部分的尺寸和总尺寸，代码段、数据段、总大小等，请参见后文了解使用size的具体使用实例。


Iperf是一个网络性能测试工具
https://github.com/esnet/iperf
brew install iperf3
启动SERVER
iperf3 -s
测试
iperf3 -c 192.168.1.1

客户端与服务器共用选项
-f, --format [bkmaBKMA]
格式化带宽数输出。支持的格式有：
'b' = bits/sec 'B' = Bytes/sec
'k' = Kbits/sec 'K' = KBytes/sec
'm' = Mbits/sec 'M' = MBytes/sec
'g' = Gbits/sec 'G' = GBytes/sec
'a' = adaptive bits/sec 'A' = adaptive Bytes/sec
自适应格式是kilo-和mega-二者之一。除了带宽之外的字段都输出为字节，除非指定输出的格式，默认的参数是a。
注 意：在计算字节byte时，Kilo = 1024， Mega = 1024^2，Giga = 1024^3。通常，在网络中，Kilo = 1000， Mega = 1000^2， and Giga = 1000^3，所以，Iperf也按此来计算比特（位）。如果这些困扰了你，那么请使用-f b参数，然后亲自计算一下。
-i, --interval #
设置每次报告之间的时间间隔，单位为秒。如果设置为非零值，就会按照此时间间隔输出测试报告。默认值为零。
-l, --len #[KM]
设置读写缓冲区的长度。TCP方式默认为8KB，UDP方式默认为1470字节。
-m, --print_mss
输出TCP MSS值（通过TCP_MAXSEG支持）。MSS值一般比MTU值小40字节。通常情况
-p, --port #
设置端口，与服务器端的监听端口一致。默认是5001端口，与ttcp的一样。
-u, --udp
使用UDP方式而不是TCP方式。参看-b选项。
-w, --window #[KM]
设置套接字缓冲区为指定大小。对于TCP方式，此设置为TCP窗口大小。对于UDP方式，此设置为接受UDP数据包的缓冲区大小，限制可以接受数据包的最大值。
-B, --bind host
绑定到主机的多个地址中的一个。对于客户端来 说，这个参数设置了出栈接口。对于服务器端来说，这个参数设置入栈接口。这个参数只用于具有多网络接口的主机。在Iperf的UDP模式下，此参数用于绑 定和加入一个多播组。使用范围在224.0.0.0至239.255.255.255的多播地址。参考-T参数。
-C, --compatibility
与低版本的Iperf使用时，可以使用兼容模式。不需要两端同时使用兼容模式，但是强烈推荐两端同时使用兼容模式。某些情况下，使用某些数据流可以引起1.7版本的服务器端崩溃或引起非预期的连接尝试。
-M, --mss #[KM}
通过TCP_MAXSEG选项尝试设置TCP最大信息段的值。MSS值的大小通常是TCP/IP头减去40字节。在以太网中，MSS值 为1460字节（MTU1500字节）。许多操作系统不支持此选项。
-N, --nodelay
设置TCP无延迟选项，禁用Nagle's运算法则。通常情况此选项对于交互程序，例如telnet，是禁用的。
-V (from v1.6 or higher)
绑定一个IPv6地址。
服务端：$ iperf -s –V
客户端：$ iperf -c <Server IPv6 Address> -V
注意：在1.6.3或更高版本中，指定IPv6地址不需要使用-B参数绑定，在1.6之前的版本则需要。在大多数操作系统中，将响应IPv4客户端映射的IPv4地址。
服务器端专用选项
-s, --server
Iperf服务器模式
-D (v1.2或更高版本)
Unix平台下Iperf作为后台守护进程运行。在Win32平台下，Iperf将作为服务运行。
-R(v1.2或更高版本，仅用于Windows)
卸载Iperf服务（如果它在运行）。
-o(v1.2或更高版本，仅用于Windows)
重定向输出到指定文件
-c, --client host
如果Iperf运行在服务器模式，并且用-c参数指定一个主机，那么Iperf将只接受指定主机的连接。此参数不能工作于UDP模式。
-P, --parallel #
服务器关闭之前保持的连接数。默认是0，这意味着永远接受连接。
客户端专用选项
-b, --bandwidth #[KM]
UDP模式使用的带宽，单位bits/sec。此选项与-u选项相关。默认值是1 Mbit/sec。
-c, --client host
运行Iperf的客户端模式，连接到指定的Iperf服务器端。
-d, --dualtest
运行双测试模式。这将使服务器端反向连接到客户端，使用-L 参数中指定的端口（或默认使用客户端连接到服务器端的端口）。这些在操作的同时就立即完成了。如果你想要一个交互的测试，请尝试-r参数。
-n, --num #[KM]
传送的缓冲器数量。通常情况，Iperf按照10秒钟发送数据。-n参数跨越此限制，按照指定次数发送指定长度的数据，而不论该操作耗费多少时间。参考-l与-t选项。
-r, --tradeoff
往复测试模式。当客户端到服务器端的测试结束时，服务器端通过-l选项指定的端口（或默认为客户端连接到服务器端的端口），反向连接至客户端。当客户端连接终止时，反向连接随即开始。如果需要同时进行双向测试，请尝试-d参数。
-t, --time #
设置传输的总时间。Iperf在指定的时间内，重复的发送指定长度的数据包。默认是10秒钟。参考-l与-n选项。
-L, --listenport #
指定服务端反向连接到客户端时使用的端口。默认使用客户端连接至服务端的端口。
-P, --parallel #
线程数。指定客户端与服务端之间使用的线程数。默认是1线程。需要客户端与服务器端同时使用此参数。
-S, --tos #
出栈数据包的服务类型。许多路由器忽略TOS字段。你可以指定这个值，使用以"0x"开始的16进制数，或以"0"开始的8进制数或10进制数。
例如，16进制'0x10' = 8进制'020' = 十进制'16'。TOS值1349就是：
IPTOS_LOWDELAY minimize delay 0x10
IPTOS_THROUGHPUT maximize throughput 0x08
IPTOS_RELIABILITY maximize reliability 0x04
IPTOS_LOWCOST minimize cost 0x02
-T, --ttl #
出栈多播数据包的TTL值。这本质上就是数据通过路由器的跳数。默认是1，链接本地。
-F (from v1.2 or higher)
使用特定的数据流测量带宽，例如指定的文件。
$ iperf -c <server address> -F <file-name>
-I (from v1.2 or higher)
与-F一样，由标准输入输出文件输入数据。
杂项
-h, --help
显示命令行参考并退出 。
-v, --version
显示版本信息和编译信息并退出。


TextMate 是适用于 macOS 10.12 或更高版本的图形文本编辑器
https://github.com/textmate/textmate

https://colorbox.io/
https://coolors.co/
https://www.pngtosvg.com/
https://wordmark.it/
http://css3generator.com/
https://www.cssfilters.co/
https://9elements.github.io/fancy-border-radius/
https://passionhacks.com/blob-maker/
https://www.blobmaker.app/
https://getwaves.io/
https://bennettfeely.com/clippy/

Shotcut 22.06 免费、开源和跨平台的 GNU/Linux、macOS 和 Windows 系统视频编辑器在经过几个月的工作后发布，其中包含更多新功能和许多错误修复。
CPU-Z ，能够检测自己的电脑情况
SystemRescue 9.00 发布，更好的 NTFS 支持  
hd tune 专业版v4.60 硬盘专业工具
VirtualBox 6.1.34，同时不要忘记下载 Oracle VM VirtualBox Extension Pack
