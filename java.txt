brew install mvnvm
mvn clean compile #编译完成的.class文件将会出现在target/classes目录下
mvn exec:java -Dexec.mainClass="hello.HelloWorld" #运行项目
mvn clean package #打包完成后，会在target目录下生成一个JAR文件

http://maven.apache.org/download.cgi
使用阿里云源
vi ~/.m2/setting.xml
<mirrors>
    <mirror>
      <id>alimaven</id>
      <name>aliyun maven</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
      <mirrorOf>central</mirrorOf>
    </mirror>
</mirrors>

https://mvnrepository.com/artifact/org.apache.lucene
https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser/8.8.1

mvn clean package
copy ./target/test.war /usr/local/Cellar/tomcat/9.0.14/libexec/webapps/test.war
catalina run
vi /usr/local/Cellar/tomcat/9.0.14/libexec/conf/server.xml
在server.xml文件的 </Host> 闭合标签前面添加一行
<Context docBase="test" path="/" reloadable="true" source="org.eclipse.jst.jee.server:test"/>

mvn clean package -f root/pom.xml -Pproduct -pl ../StormBackend -am
mvn clean package -f root/pom.xml -Pproduct -pl ../MMOServer -am
mvn clean package -f root/pom.xml -Pproduct -pl ../PlannerConfig -am
mvn clean package -f root/pom.xml -Pproduct -pl ../StormLib -am
mvn clean package -f root/pom.xml -Pproduct -pl ../robot -am

yum install tomcat -y
systemctl start tomcat
systemctl enable tomcat

/usr/share/tomcat/webapps/


brew install tomcat
catalina -h #查看帮助
catalina run #运行服务
catalina start
catalina stop

Tomcat的默认端口是8080
点击访问http://localhost:8080

webapp的根目录(CATALINA_HOME)
/usr/local/Cellar/tomcat/9.0.14/libexec/webapps/ROOT
注意自己的版本号

配置到intelliJ IDEA
在intelliJ IDEA的web项目里
运行按钮附近有配置服务器

tomcat home:
/usr/local/Cellar/tomcat/9.0.14/libexec

git clone https://github.com/apache/flink.git
cd flink
mvn clean package -DskipTests # this will take up to 10 minutes

JDK命令行工具
jps	显示指定系统内所有的HotSpot虚拟机的进程
jstat	用于收集HotSpot虚拟机各方面的运行数据
jinfo	显示虚拟机配置信息
jmap	生成虚拟机的内存转存储快照（heapdump文件），利用这个文件就可以分析内存等情况
jhat	用于分析上面jmap生成的heapdump文件，它会建立一个HTTP/HTML服务器，让用户可以在浏览器上查看分析结果
jstack	显示虚拟机的线程快照

jps [选项] [主机id]
jps -l
jps -v

jinfo [选项] pid
jmap [选项] vmid
jstack [选项] vmid
jstat [选项 vmid [interval[s|ms] [count]]]

https://github.com/prestodb/presto
Trino 官方存储库，大数据分布式 SQL 查询引擎，前身为 PrestoSQL ( https://trino.io )
https://github.com/trinodb/trino


Appsmith 是一个用于构建管理面板、内部工具和仪表板的低代码平台
https://github.com/appsmithorg/appsmith
