半小时入门 Rust
https://quickref.me/rust
https://mp.weixin.qq.com/s/_elPKI64bRk1-8lC8V9mMQ
https://github.com/rust-unofficial/awesome-rust
https://course.rs/
https://wiki.mozilla.org/Areweyet

https://www.rust-lang.org/tools/install
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
curl https://sh.rustup.rs -sSf | sh
cargo new notes
cargo run
https://mp.weixin.qq.com/s/trozFjh1XaauX9EGGOiWXg

https://www.rust-lang.org/zh-CN/tools/install
https://www.rust-lang.org/zh-CN/learn
https://github.com/wtklbm/rust-library-i18n
https://serokell.io/blog/open-source-rust

安装 Rust
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
curl https://sh.rustup.rs -sSf | sh

source "$HOME/.cargo/env"

rustc --version
rustup update
rustup update stable
rustup self uninstall
rustup target list
rustup target add

$ # for bash
$ RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup install stable # for stable
$ # for fish
$ env RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup install stable # for stable
$ # for bash
$ RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup install nightly # for nightly
$ # for fish
$ env RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup install nightly # for nightly
$ # for bash
$ RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup install nightly-YYYY-mm-dd
$ # for fish
$ env RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup install nightly-YYYY-mm-dd

$ # for bash
$ echo 'export RUSTUP_UPDATE_ROOT=https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup' >> ~/.bash_profile
$ echo 'export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup' >> ~/.bash_profile
$ # for fish
$ echo 'set -x RUSTUP_UPDATE_ROOT https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup' >> ~/.config/fish/config.fish
$ echo 'set -x RUSTUP_DIST_SERVER https://mirrors.tuna.tsinghua.edu.cn/rustup' >> ~/.config/fish/config.fish

rustup default stable
RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup install stable
rustup default nightly
RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup default nightly

export http_proxy="127.0.0.1:1087"
export https_proxy="127.0.0.1:1087"
export http_proxy=""
export https_proxy=""

rustc hello.rs
./hello

https://cargo.budshome.com/index.html
https://doc.rust-lang.org/cargo/getting-started/installation.html

cargo new hello_world --bin
cargo build
cargo build --release
cargo build --example
热重载
cargo install cargo-watch
cargo uninstall cargo-watch
cargo watch -x 'run --example hello_world'

cargo test
cargo run
cargo tree [options]
cargo search [options] [query...]

cargo install cargo-edit
cargo add
cargo edit
cargo rm
cargo upgrade
cargo set-version
cargo cache verify 将尝试在cargo载缓存中找到损坏或修改的 crates.

cargo install cargo-udeps --locked
cargo +nightly udeps #查找未使用的依赖项
忽略依赖项 要忽略某些依赖项，请添加package.metadata.cargo-udeps.ignore到Cargo.toml.
[package.metadata.cargo-udeps.ignore]
normal = ["if_chain"]
#development = []
#build = []
[dependencies]
if_chain = "1.0.0" # Used only in doc-tests, which `cargo-udeps` cannot check.

cargo install cargo-expand
cargo expand

cargo install cargo-tarpaulin
cargo tarpaulin #代码覆盖率报告

cargo install cargo-audit
cargo audit #安全漏洞审核

cargo install --locked cargo-deny && cargo deny init && cargo deny check
cargo deny #项目的依赖关系图

cargo xcodebuild run

https://github.com/sgeisler/cargo-remote
cargo install --path cargo-remote/
brew install rsync

# 在本机编译
cargo build --release
# 用远程编译
cargo remote -- build --release
# 在本机编译
cargo run --release
# 用远程编译
cargo remote -- run --release
# Install the toolchain to build Linux x86_64 binaries
rustup target add x86_64-unknown-linux-gnu
cargo build --release --target=x86_64-unknown-linux-gnu


https://crates.io/

cargo build --target aarch64_be-unknown-linux-gnucargo build --target aarch64-unknown-linux-gnu_ilp32cargo build --target aarch64_be-unknown-linux-gnu_ilp32

https://actix.rs/

http://lib.rs/

12个Rust的Tips
使用 Cow<str> 作为返回类型
使用 Crossbeam channels 取代标准库
使用 Scopeguard 实现类似 Golang 的延迟运算
使用 Cargo-make 打包
自定义和链接 Panic 处理程序
在 VSCode 中使用 Rust Analyzer
用到闭包时使用 impl Trait
在保存时为 VSCode 启用 Clippy
使用 thiserror 和 anyhow 处理惯用错误
使用 dbg!() 替换 println!()
使用 include_str!() 和 include_bytes!() 宏在编译时读取文件
使用 cc crate 与 C/C++ 代码交互

https://github.com/helix-editor/helix
brew tap helix-editor/helix
brew install helix

https://github.com/sharkdp/hyperfine
brew install hyperfine
cargo install hyperfine
hyperfine 'sleep 0.3'
hyperfine --min-runs 5 'sleep 0.2' 'sleep 3.2'
hyperfine --warmup 3 'grep -R TODO *'
hyperfine --prepare 'make clean' --parameter-scan num_threads 1 12 'make -j {num_threads}'
hyperfine --parameter-scan delay 0.3 0.7 -D 0.2 'sleep {delay}'
hyperfine --show-output "cat /tmp/bigfile"
hyperfine --warmup 3 'fd -e jpg -uu' 'find -iname "*.jpg"'
hyperfine --warmup 3 'fd -HI ".*[0-9]\.jpg$"' 'find . -iname "*[0-9].jpg"' 'find . -iregex ".*[0-9]\.jpg$"'

webdav
https://github.com/sigoden/duf
duf --allow-all folder_name
下载
curl http://127.0.0.1:5000/some-file
curl -o some-folder.zip http://127.0.0.1:5000/some-folder?zip
上传
curl --upload-file some-file http://127.0.0.1:5000/some-file
删除
curl -X DELETE http://127.0.0.1:5000/some-file


websocket
https://github.com/websockets-rs/rust-websocket
https://github.com/housleyjk/ws-rs
https://github.com/snapview/tungstenite-rs
https://github.com/snapview/tokio-tungstenite
https://github.com/actix/actix-web
https://github.com/PrivateRookie/ws-tool

web server
https://github.com/actix/actix-web
https://github.com/hyperium/hyper
https://github.com/seanmonstar/warp
https://github.com/flosse/rust-web-framework-comparison
https://github.com/SergioBenitez/Rocket
https://github.com/gotham-rs/gotham
https://github.com/tokio-rs/tokio
https://github.com/iron/iron
https://github.com/http-rs/tide
https://github.com/salvo-rs/salvo
https://github.com/ntex-rs/ntex
https://github.com/tokio-rs/axum
https://github.com/poem-web/poem
https://github.com/thruster-rs/Thruster
https://github.com/trillium-rs/trillium
https://github.com/tiny-http/tiny-http
https://github.com/Xudong-Huang/may
https://github.com/Xudong-Huang/may_minihttp
https://github.com/ntex-rs/ntex
https://www.techempower.com/benchmarks/#section=data-r20&hw=ph&test=fortune
web app wasm WebAssembly
https://github.com/yewstack/yew
https://yew.rs/
https://github.com/seed-rs/seed
https://github.com/ivanceras/sauron
https://github.com/schell/mogwai
https://github.com/Pauan/rust-dominator
https://github.com/sycamore-rs/sycamore
https://github.com/chinedufn/percy
https://github.com/firecracker-microvm/firecracker
https://github.com/serverless/serverless
https://github.com/cloudflare/quiche #QUIC HTTP3
https://github.com/mozilla/neqo
https://github.com/swc-project/swc
https://swc.rs/
https://github.com/napi-rs/napi-rs
https://github.com/Brooooooklyn/rust-to-nodejs-overhead-benchmark
https://github.com/WasmEdge/WasmEdge
https://github.com/DioxusLabs/dioxus
https://github.com/sycamore-rs/sycamore
https://github.com/ardaku/pasts #轻量级 用于嵌入式系统、GUI 应用程序和视频游戏，而不是专注于 Web 服务器
https://github.com/Zaplib/zaplib #用于使用 Rust 和 WebAssembly 加速 Web 应用程序
https://github.com/fermyon/spin

发邮件
https://crates.io/crates/lettre
https://github.com/lettre/lettre

web client
https://github.com/actix/actix-web
https://github.com/seanmonstar/reqwest
https://github.com/hyperium/hyper
https://github.com/apoelstra/rust-jsonrpc/
https://github.com/paritytech/jsonrpsee
https://github.com/paritytech/jsonrpc
https://github.com/actix/actix-web/tree/master/awc
https://github.com/Orange-OpenSource/hurl

jq json
https://github.com/01mf02/jaq
https://github.com/stedolan/jq

Algorithms
https://github.com/douchuan/algorithm
https://github.com/rmw-link/rmw-utf8

https://github.com/google/tarpc
raft 框架
https://github.com/tikv/raft-rs
https://github.com/ritelabs/riteraft
static site
https://github.com/jameslittle230/stork

容器
Bottlerocket，这是一个用 Rust 编写的基于 Linux 的容器操作系统
https://github.com/bottlerocket-os/bottlerocket

protobuf
https://github.com/stepancheg/rust-protobuf/
https://github.com/tokio-rs/prost

buffer bytes
https://github.com/erenon/cueue

用于远程构建的工具。同步项目到远程机器，执行命令，同步回来。
https://github.com/buildfoundation/mainframer

Rust 模板引擎 template
https://github.com/Kogia-sima/sailfish
https://github.com/Keats/tera
https://github.com/nickel-org/rust-mustache
https://github.com/cobalt-org/liquid-rust
https://github.com/sunng87/handlebars-rust
https://github.com/Stebalien/horrorshow-rs
https://github.com/lfairy/maud
https://github.com/djc/askama
https://github.com/dpc/stpl
https://github.com/kaj/ructe
https://github.com/bodil/typed-html

proxy QUIC protocol
https://github.com/EAimTY/tuic

设计模式
https://github.com/rust-unofficial/patterns

web build tool
https://mp.weixin.qq.com/s/LSIi2P6FKnJ0GTodaTUGKw
https://github.com/parcel-bundler/parcel
https://github.com/parcel-bundler/parcel-css
https://parceljs.org/docs/
yarn add --dev parcel
npm install --save-dev parcel
https://parceljs.org/getting-started/webapp/

https://github.com/rome/tools
替代
https://github.com/eslint/eslint
https://github.com/babel/babel
https://github.com/prettier/prettier
https://github.com/facebook/jest
https://github.com/webpack/webpack
https://github.com/denoland/deno
https://github.com/swc-project/swc
https://github.com/vercel/next.js

Notion
https://github.com/AppFlowy-IO/appflowy
https://mp.weixin.qq.com/s/PvcHpculPHDh8QlUPuzldQ

TCP转发工具
https://github.com/yuchunzhou/tcpforward
tcpforward -h
tcpforward --local-ip <本地ip > --local-port <本地端口> --remote-ip <远程ip > --remote-port <远程端口>

分布式的任务调度
https://github.com/BinChengZhao/delicate
多任务调度中间件
https://github.com/gqf2008/xtask

远程桌面
https://github.com/rustdesk/rustdesk

GO代码检查
https://github.com/golangci/golangci-lint/releases
golangci-lint version
golangci-lint run
golangci-lint run dir1 dir2/... dir3/file1.go
golangci-lint run --disable-all -E errcheck
golangci-lint run -p bugs -p error

https://github.com/mgdm/htmlq
cargo install htmlq
htmlq -h
curl --silent https://www.rust-lang.org/ | htmlq '#get-help'
curl --silent https://www.rust-lang.org/ | htmlq --attribute href a
curl --silent https://nixos.org/nixos/about.html | htmlq  --text .main
curl --silent https://mgdm.net | htmlq --pretty '#posts'

https://github.com/sharkdp/fd
apt install fd-find
dnf install fd-find
dpkg -i fd_8.2.1_amd64.deb
apt-get install fd-find
apk add fd
pacman -S fd
emerge -av fd
zypper in fd
xbps-install -S fd
brew install fd
scoop install fd
choco install fd
nix-env -i fd
pkg install fd-find
npm install -g fd-find
cargo install fd-find
USAGE:
    fd [FLAGS/OPTIONS] [<pattern>] [<path>...]

FLAGS:
    -H, --hidden            搜索隐藏的文件和目录
    -I, --no-ignore         不要忽略 .(git | fd)ignore 文件匹配
        --no-ignore-vcs     不要忽略.gitignore文件的匹配
    -s, --case-sensitive    区分大小写的搜索（默认值：智能案例）
    -i, --ignore-case       不区分大小写的搜索（默认值：智能案例）
    -F, --fixed-strings     将模式视为文字字符串
    -a, --absolute-path     显示绝对路径而不是相对路径
    -L, --follow            遵循符号链接
    -p, --full-path         搜索完整路径（默认值：仅限 file-/dirname）
    -0, --print0            用null字符分隔结果
    -h, --help              打印帮助信息
    -V, --version           打印版本信息

OPTIONS:
    -d, --max-depth <depth>        设置最大搜索深度（默认值：无）
    -t, --type <filetype>...       按类型过滤：文件（f），目录（d），符号链接（l），
                                   可执行（x），空（e）
    -e, --extension <ext>...       按文件扩展名过滤
    -x, --exec <cmd>               为每个搜索结果执行命令
    -E, --exclude <pattern>...     排除与给定glob模式匹配的条目
        --ignore-file <path>...    以.gitignore格式添加自定义忽略文件
    -c, --color <when>             何时使用颜色：never，*auto*, always
    -j, --threads <num>            设置用于搜索和执行的线程数
    -S, --size <size>...           根据文件大小限制结果。

ARGS:
    <pattern>    the search pattern, a regular expression (optional)
    <path>...    the root directory for the filesystem search (optional)
find . -name 标准库
fd 标准库
# 转换 所有 jpg 到  png :
fd -e jpg -x convert {} {.}.png
# Unpack all zip files (if no placeholder is given, the path is appended):
fd -e zip -x unzip
# Convert all flac files into opus files:
fd -e flac -x ffmpeg -i {} -c:a libopus {.}.opus
# Count the number of lines in Rust files (the command template can be terminated with ';'):
fd -x wc -l \; -e rs

正则
https://github.com/rulex-rs/rulex

面向行的搜索工具
ripgrep 递归搜索目录中的正则表达式模式，同时尊重您的 gitignore
https://github.com/BurntSushi/ripgrep
brew install ripgrep
cargo install ripgrep
dnf install ripgrep

rg -n -w '[A-Z]+_SUSPEND'
git grep -P -n -w '[A-Z]+_SUSPEND'
ugrep -r --ignore-files --no-hidden -I -w '[A-Z]+_SUSPEND'
ag -w '[A-Z]+_SUSPEND'
LC_ALL=C git grep -E -n -w '[A-Z]+_SUSPEND'
ack -w '[A-Z]+_SUSPEND'
LC_ALL=en_US.UTF-8 git grep -E -n -w '[A-Z]+_SUSPEND'
rg -uuu -tc -n -w '[A-Z]+_SUSPEND'
ugrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'
egrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'
rg -w 'Sherlock [A-Z]\w+'
ugrep -w 'Sherlock [A-Z]\w+'
LC_ALL=en_US.UTF-8 egrep -w 'Sherlock [A-Z]\w+'

https://github.com/bootandy/dust
brew install dust
Usage: dust
Usage: dust <dir>
Usage: dust <dir>  <another_dir> <and_more>
Usage: dust -p (full-path - Show fullpath of the subdirectories)
Usage: dust -s (apparent-size - shows the length of the file as opposed to the amount of disk space it uses)
Usage: dust -n 30 (shows 30 directories instead of the default [default is terminal height])
Usage: dust -d 3  (shows 3 levels of subdirectories)
Usage: dust -r  (reverse order of output)
Usage: dust -X ignore  (ignore all files and directories with the name 'ignore')
Usage: dust -x (only show directories on the same filesystem)
Usage: dust -b (do not show percentages or draw ASCII bars)
Usage: dust -i (do not show hidden files)
Usage: dust -c (No colors [monochrome])
Usage: dust -f (Count files instead of diskspace)
Usage: dust -t Group by filetype
Usage: dust -e regex Only include files matching this regex (eg dust -e "\.png$" would match png files)
dust -r
dust -d 1

https://github.com/seanmonstar/reqwest：#http request lib
https://github.com/skerkour/kerkour.com

json
https://github.com/serde-rs/serde：#json Serialization
https://github.com/shogan/fstojson-rust #json Serialization
https://github.com/RedisJSON/RedisJSON
redis-server --loadmodule ./target/release/librejson.so
redis-server --loadmodule ./target/release/librejson.dylib

redis
https://github.com/redis-rs/redis-rs
https://github.com/tidwall/redcon.rs
https://github.com/tokio-rs/mini-redis
https://github.com/ekzhang/redis-rope

https://github.com/ducaale/xh
# Send a GET request
xh httpbin.org/json
# Send a POST request with body {"name": "ahmed", "age": 24}
xh httpbin.org/post name=ahmed age:=24
# Send a GET request with querystring id=5&sort=true
xh get httpbin.org/json id==5 sort==true
# Send a GET request and include a header named x-api-key with value 12345
xh get httpbin.org/json x-api-key:12345
# Send a PUT request and pipe the result to less
xh put httpbin.org/put id:=49 age:=25 | less
# Download and save to res.json
xh -d httpbin.org/json -o res.json


Tokio 是一个事件驱动的非阻塞 I/O 平台
https://tokio.rs/tokio/tutorial
https://github.com/tokio-rs/tokio
https://github.com/tokio-rs/axum
https://github.com/ulid/spec

https://github.com/rust-lang/futures-rs
https://github.com/async-rs/async-std
https://github.com/smol-rs/smol
https://github.com/smoltcp-rs/smoltcp
https://github.com/DataDog/glommio
https://github.com/embassy-rs/embassy
https://github.com/bastion-rs/bastion
https://github.com/bytedance/monoio
https://github.com/bytedance/keyhouse

https://github.com/DataDog/glommio

https://github.com/hyperium/hyper：#Rust 的快速且正确的 HTTP/1.1 和 HTTP/2 实现。
https://github.com/hyperium/tonic：基于 HTTP/2 的 gRPC 实现专注于高性能、互操作性和灵活性。
https://github.com/seanmonstar/warp：用于加速速度的超级简单、可组合的 Web 服务器框架。
https://github.com/tower-rs/tower：用于构建强大的网络客户端和服务器的模块化和可重用组件库。
https://github.com/tokio-rs/tracing（以前tokio-trace）：用于应用程序级跟踪和异步感知诊断的框架。
https://github.com/tokio-rs/rdbc：用于 MySQL、Postgres 和 SQLite 的 Rust 数据库连接库。
https://github.com/tokio-rs/mio：对 OS I/O API 的低级、跨平台抽象，为 tokio.
https://github.com/tokio-rs/bytes：用于处理字节的实用程序，包括高效的字节缓冲区。
https://github.com/tokio-rs/loom：并发 Rust 代码的测试工具
https://github.com/epilys/rsqlite3：sqlite3
https://github.com/wangfenjin/duckdb-rs
https://github.com/duckdb/duckdb
https://github.com/rusqlite/rusqlite
https://github.com/apache/arrow-rs
https://github.com/sfackler/rust-postgres

https://github.com/losfair/mvsqlite
https://github.com/canonical/dqlite
https://github.com/rqlite/rqlite
https://github.com/phiresky/sqlite-zstd

https://github.com/tokio-rs/console
https://github.com/googleforgames/quilkin

GraphQL
https://github.com/async-graphql/async-graphql
https://async-graphql.github.io/async-graphql/en/index.html
https://github.com/graphql-rust/juniper

音乐制作
https://github.com/MeadowlarkDAW/Meadowlark
密钥
https://github.com/SpectralOps/keyscope
下载
https://github.com/agourlay/dlm
GPU framework
https://github.com/UpsettingBoy/gpgpu-rs
https://github.com/Eraden/amdgpud
GAME
https://github.com/WanderHuang/game-2048-tui
https://github.com/17cupsofcoffee/tetra
https://github.com/ozkriff/zemeroth
https://github.com/doukutsu-rs/doukutsu-rs
https://github.com/cristicbz/rust-doom
https://github.com/citybound/citybound
https://github.com/rsaarelm/magog
https://github.com/swatteau/sokoban-rs
https://github.com/thetawavegame/thetawave-legacy
https://gitlab.com/veloren/veloren
https://github.com/ozkriff/zoc
https://github.com/fishfight/FishFight
https://github.com/fishfight/FishLauncher
https://github.com/gaxxx/jy-rs/

TIME
https://github.com/wandercn/gostd

Rust 的微型框架
https://github.com/xvxx/vial

https://github.com/kolapapa/surge-ping
https://github.com/japaric/xargo
https://github.com/rust-lang/libc 帮助libc库完善了对于 mips-uclibc 的支持；
https://github.com/rust-lang/socket2 支持了绑定interface的功能，并且添加了对mipsel-uclibc的支持；
https://github.com/kolapapa/surge-ping 一个异步Ping的实现，也可以用作traceroute (ICMP版)；

https://github.com/rustls/rustls

https://github.com/multimeric/emoji_pix
cargo install emoji_pix
emoji_pix ferris.png --width 30

SHELL
https://github.com/nushell/nushell
https://github.com/adam-mcdaniel/dune
https://github.com/withfig/autocomplete
https://github.com/withfig/fig
https://github.com/matklad/xshell

SHELL提示
https://github.com/starship/starship

一个跨平台的 OpenGL 终端模拟器
https://github.com/alacritty/alacritty

命令行cli
https://github.com/Rigellute/spotify-tui
https://github.com/fdehau/tui-rs
https://github.com/cjbassi/ytop
https://github.com/gyscos/cursive
https://github.com/TaKO8Ki/gobang
https://github.com/crossterm-rs/crossterm
https://github.com/FeistyKit/quickstudy
https://github.com/clap-rs/clap
https://github.com/petridish-dev/petridish
https://github.com/killercup/cargo-edit
https://github.com/mitsuhiko/indicatif
https://github.com/simeg/eureka
https://github.com/pier-cli/pier
https://github.com/ndaba1/cmder
https://github.com/jiashiwen/interactcli-rs
https://github.com/pacak/bpaf
https://github.com/console-rs/indicatif #progress
https://docs.rs/crate/getargs/0.5.0/source/
https://github.com/ad4mx/spinoff

Rust 中的命令行应用
https://suibianxiedianer.github.io/rust-cli-book-zh_CN/README_zh.html
一个 Spotify 守护进程
https://github.com/Spotifyd/spotifyd
TUI文件浏览
https://github.com/mgunyho/tere

xss sqlinjection
https://github.com/arvancloud/libinjection-rs
https://github.com/0x727/ObserverWard_0x727
带有 Windows 和 Linux 的交互式绑定/反向 PTY shell 支持由 Rust 实现
https://github.com/b23r0/Cliws

下载网页 一个用 Rust 编写的快速、简单、递归的内容发现工具
https://github.com/epi052/feroxbuster
https://github.com/phra/rustbuster
可编写脚本的网络身份验证破解程序（以前称为“badtouch”）
https://github.com/kpcyrd/authoscope
tcp 连接劫持者，shijack 的 Rust 重写
https://github.com/kpcyrd/rshijack
安全的多线程数据包嗅探器
https://github.com/kpcyrd/sniffglue
密码管理
https://github.com/cortex/ripasso/
端口扫描
https://github.com/RustScan/RustScan

hex viewer
https://github.com/sharkdp/hexyl
apt install hexyl
apt-get install hexyl
pacman -S hexyl
brew install hexyl
cargo install hexyl
scoop install hexyl
hexyl small.png
hexyl -n 256 $(which hexyl)

csv
https://github.com/BurntSushi/xsv
brew install xsv
xsv headers worldcitiespop.csv
xsv index worldcitiespop.csv
xsv stats worldcitiespop.csv --everything | xsv table
xsv count worldcitiespop.csv
xsv slice worldcitiespop.csv -s 3173948 | xsv table
xsv select Country,AccentCity,Population worldcitiespop.csv \
  | xsv sample 10 \
  | xsv table
xsv frequency worldcitiespop.csv --limit 5
xsv search -s Population '[0-9]' worldcitiespop.csv \
  | xsv select Country,AccentCity,Population \
  | xsv sample 10 \
  | xsv table
xsv join --no-case  Country sample.csv Abbrev countrynames.csv | xsv table
xsv join --no-case  Country sample.csv Abbrev countrynames.csv \
  | xsv select 'Country[1],AccentCity,Population' \
  | xsv table
xsv join --no-case Abbrev countrynames.csv Country worldcitiespop.csv \
  | xsv select '!Abbrev,Country[1]' \
  > worldcitiespop_countrynames.csv

ORM
https://github.com/diesel-rs/diesel #PostgreSQL MYSQL SQLITE
https://github.com/rbatis/rbatis #PostgreSQL MYSQL SQLITE Mssql/Sqlserver MariaDB TiDB CockroachDB
https://github.com/ivanceras/rustorm
https://github.com/SeaQL/sea-orm
https://github.com/SeaQL/sea-orm/releases/tag/0.2.2
https://github.com/launchbadge/sqlx
https://github.com/roy-ganz/toql
https://crates.io/crates/sea-orm

database
https://gitlab.com/tglman/persy
https://github.com/tikv/tikv
https://github.com/datafuselabs/databend #云数据仓库
https://databend.rs/doc/deploy/deploying-databend
https://github.com/indradb/indradb
https://github.com/MaterializeInc/materialize
https://github.com/mit-pdos/noria
https://github.com/PumpkinDB/PumpkinDB
https://github.com/seppo0010/rsedis
https://github.com/skytable/skytable
https://github.com/spacejam/sled
https://crates.io/crates/vsdb
https://github.com/ccmlm/vsdb
https://github.com/vorot93/libmdbx-rs
https://github.com/symmetree-labs/infinitree
https://github.com/mrxiaozhuox/dorea/
https://github.com/cberner/redb
https://github.com/LMDB/lmdb
https://github.com/pancake-db/pancake-db
文档数据库
https://github.com/surrealdb/surrealdb
curl -sSf https://install.surrealdb.com | sh
docker run --rm -p 8000:8000 surrealdb/surrealdb:latest start

IndexedDB
https://github.com/devashishdxt/rexie
cache
https://github.com/memc-rs/memc-rs

RisingWave：云中的下一代流式数据库。
https://github.com/singularity-data/risingwave
psql -h localhost -p 4566 -d dev -U root

https://github.com/neondatabase/neon #Neon 是 AWS Aurora Postgres 的无服务器开源替代方案

Pisanix 是一套以数据库为中心的治理框架
https://github.com/database-mesh/pisanix

时序数据库
https://github.com/CeresDB/ceresdb
https://github.com/influxdata/influxdb_iox
https://github.com/tikv/tikv

事件处理
https://github.com/tremor-rs/tremor-runtime

Rust 的 no_std + serde 兼容消息库
https://github.com/jamesmunns/postcard

云环境运行本地应用
https://github.com/metalbear-co/mirrord

模版引擎
https://github.com/Keats/tera
https://github.com/mitsuhiko/minijinja
协作音乐创作
https://github.com/ekzhang/composing.studio
https://composing.studio/productive-animal-5688
音乐播放器
https://github.com/tramhao/termusic
二维码
https://github.com/sayanarijit/qrcode.show
端口转发器
https://github.com/aramperes/onetun

https://github.com/myrfy001/rust_golang_ffi_demo/tree/example_1
https://github.com/myrfy001/rust_golang_ffi_demo/tree/example_2
Golang在编译时可以通过添加-buildmode=c-shared来将一个go写的项目编译成符合CFFI的库文件
首先，这个文件夹结构是通过cargo new --lib rust命令建立的初始架构，然后在src目录下自行新建了ffi.rs和my_app.rs两个文件。
先来查看一下Cargo.toml文件，其中以下的两行是我们自己修改加入的：
[lib]
crate-type = ["cdylib"]
参数解析
https://github.com/Owez/argi

lnx: 一个基于 tantivy 的搜索引擎
它是 MeiliSearch 和 ElasticSearch 的竞品。其基于 tokio-rs，hyper 和 tantivy 进行开发。提供 REST 接口。现已发布 v0.6 版。持续关注。
https://github.com/lnx-search/lnx
https://github.com/valeriansaliou/sonic

https://github.com/pauwels-labs/redact-client
bittorrent client
https://github.com/ikatson/rqbit
自动测试工具
https://github.com/zhiburt/expectrl
不平衡的争吵：为 LD49 制作的自走棋
https://github.com/yopox/LD49

Boa 是一个用 Rust 编写的可嵌入和实验性的 Javascript 引擎
https://github.com/boa-dev/boa
Gameboy 模拟器
https://github.com/jawline/Mimic
fn(Code) -> Docs
https://github.com/anixe/doku
机器人和工具的实时用户界面
https://github.com/rillrate-open/rillrate

https://github.com/rillrate-open/meio
无痛压缩解压
https://github.com/ouch-org/ouch

无服务器数据仓库
https://github.com/datafuselabs/databend
Rust实现的RTPS和DDS。
https://gitee.com/mrunix/lix-dds

https://github.com/rtic-rs/cortex-m-rtic
https://github.com/stm32-rs/stm32f4xx-hal
https://github.com/japaric/heapless

算法
https://github.com/matklad/lock-bench
https://github.com/tidwall/rtree.rs
CAD
https://github.com/hannobraun/Fornjot
氦光网关
https://github.com/helium/gateway-rs
一个简单的批处理文件分类器
https://github.com/Eolien55/FileClassed
通过 TCP、（相互）TLS 或 DNS（权威服务器或直接连接）隧道传输 TCP 或 UDP 流量，在 Rust 中实现
https://github.com/dlemel8/tunneler
分组密码算法集合
https://github.com/RustCrypto/block-ciphers
气象站
https://github.com/codi-hacks/weather-station
Rust 最先进的 Merkle 树库
https://github.com/antouhou/rs-merkle
SixtyFPS 是一个工具包，可以为任何显示器高效开发流畅的图形用户界面：嵌入式设备和桌面应用程序。我们支持多种编程语言，例如 Rust、C++ 或 JavaScript
https://github.com/sixtyfpsui/sixtyfps
命令行表格table
https://github.com/zhiburt/tabled
Linux kernel
https://github.com/nuta/kerla

嵌入式设备
https://github.com/gchp/rustbox

图形 svg 图像处理
https://github.com/ivanceras/svgbob
https://github.com/RazrFalcon/resvg
https://github.com/turnage/valora
https://github.com/Twinklebear/tray_rust

https://github.com/imager-io/imager
https://github.com/colbyn/imager-bench-2019-11-2
https://imager.io/
https://github.com/imager-io/imager/releases/download/auto-release%2Fimager%2F0.3.4/imager-v0.3.4-apple.tar.gz
imager -i input/image.jpeg -o output/image.jpeg -f jpeg
imager -i input/image.jpeg -O output/dir/ -f jpeg webp

纯Rust OPC UA库
https://github.com/locka99/opcua
基于tokio的modbus库
https://github.com/slowtec/tokio-modbus
https://github.com/alttch/rmodbus

可视化
https://github.com/avito-tech/bioyino
https://crates.io/crates/opentelemetry
https://github.com/hubblo-org/scaphandre #功耗监控代理
https://github.com/vectordotdev/vector #高性能、日志、指标和事件路由器
https://github.com/infinyon/fluvio

QUIC IETF 指定的下一代 TCP 继承者
https://github.com/quinn-rs/quinn
Rudra是一个静态分析器，用于检测Rust程序中常见的未定义行为
https://github.com/sslab-gatech/Rudra
便携式 SIMD 模块
https://doc.rust-lang.org/nightly/std/simd/index.html
https://doc.rust-lang.org/nightly/core/index.html
mysql binlog 解析工具
https://github.com/PrivateRookie/boxercrab
中小企业私有云解决方案
https://github.com/rustcc/TTstack
币安API客户端
https://github.com/PrivateRookie/bian-rs
一个微小的硬件加速像素帧缓冲区
https://github.com/parasyte/pixels
TypeScript and JavaScript code formatter
https://github.com/devongovett/dprint-node
ECS library
https://github.com/takahirox/ecs-rust
W806 Rust支持库（外设访问层）
https://github.com/luojia65/w806-pac
ios-app
https://github.com/wooden-worm/ios-app-rs

直播服务器 流媒体 rtmp/httpflv/hls/relay
https://github.com/harlanc/xiu
RTSP/RTP/RTMP/FLV/HLS/MPEG-TS/MPEG-PS/MPEG-DASH/MP4/fMP4/MKV/WebM
https://github.com/ireader/media-server

版本比较 小于、大于或等于
https://github.com/alilleybrinker/semver-explain
$ semver-explain "^1.4.0"
>=1.4.0, <2.0.0
$ semver-explain "~0.5.3"
>=0.5.3, <0.6.0
$ semver-explain "5.6.*"
>=5.6.0, <5.7.0

二进制文件版本控制系统 400 GiB -> 100 MiB，访问时间为 1 秒†
https://github.com/elfshaker/elfshaker
wget "https://github.com/elfshaker/elfshaker/releases/download/v0.9.0/elfshaker_v0.9.0_$(uname -m)-unknown-linux-musl.tar.gz"
mkdir -p ~/.local/opt && mkdir -p ~/.local/bin && tar -xf "elfshaker_v0.9.0_$(uname -m)-unknown-linux-musl.tar.gz" -C ~/.local/opt && ln -s ~/.local/opt/elfshaker/elfshaker ~/.local/bin/elfshaker
rustup install 1.52.1
cargo +1.52.1 build --release --bin elfshaker
./target/release/elfshaker --help
制作 elfshaker store
打包成一个包文件elfshaker pack
elfshaker store <snapshot> [--files-from <file>] [--files0-from <file>]
elfshaker store my-snapshot
elfshaker extract [<pack>:]<snapshot> [--reset] [--verify]
elfshaker extract my-pack:my-snapshot --verify
elfshaker pack <pack> [--frames N]
elfshaker my-pack --frames 8
elfshaker list
elfshaker list <pack>
elfshaker list [<pack>:]<snapshot>
elfshaker show [<pack>:]<snapshot> <path>...
elfshaker show my-pack:my-snapshot my-file some-dir/my-file-2

docker
https://github.com/mrjackwills/oxker

健康检查
https://github.com/tjmaynes/health-check-rust
rustup toolchain install stable
cargo install --path .
DATABASE_URL=postgres://root:postgres@localhost:5432?sslmode=disable \
cargo run
docker compose up

sendemail
https://github.com/quambene/pigeon-rs
pigeon send-bulk \
    sender@your-domain.com \
    --receiver-query "select email from user where newsletter_confirmed = true" \
    --message-file "message.yaml" \
    --display \
    --assume-yes
pigeon send sender@your-domain.com receiver@gmail.com --subject "Test subject" --content "This is a test email."
pigeon send sender@your-domain.com receiver@gmail.com --message-file "message.yaml"

Rustsbi-nezha平台支持包
https://github.com/orangecms/rustsbi-nezha/tree/rustsbi-nezha

backdoor
https://kerkour.com/rust-crate-backdoor/
https://github.com/skerkour/black-hat-rust/tree/main/extra/backdoors
https://github.com/skerkour/black-hat-rust
https://github.com/skerkour/kerkour.com/tree/main/2021/rust_fast_port_scanner
https://github.com/skerkour/kerkour.com

系统OS
https://github.com/vinc/moros
https://github.com/Rust-for-Linux/linux
https://github.com/LibertyOS-Development/kernel
命令行翻译 baidu tencent niutrans
https://github.com/zjp-CN/bilingual
network
https://arewegameyet.rs/ecosystem/networking/

Sniffnet v0.4.0 发布 - 多线程跨平台的网络分析器
https://github.com/GyulyVGC/sniffnet

https://hurryabit.github.io/blog/stack-safety-for-free/

https://github.com/sharkdp/bat
bat README.md
bat src/*.rs
curl -s https://sh.rustup.rs | bat
yaml2json .travis.yml | json_pp | bat -l json
bat -A /etc/hosts
dnf install bat
brew install bat

替代ls
https://github.com/ogham/exa
dnf install exa
brew install exa
cargo install exa

依赖注入
https://www.bumbar.blog/
bumbar.blog/tech/dependency-injection-with-rust/
一个 Rust proc_macro_attribute 来概括通用函数的转换
https://github.com/llogiq/momo

MirChecker：一个简单的 Rust 静态分析工具
https://github.com/lizhuohua/rust-mir-checker

lox tree-walk 解释器
https://github.com/veera-sivarajan/rena
另一个 Rust 解析器库。一个轻量级、无依赖、解析器组合器启发了一组实用方法来帮助解析字符串和切片
https://github.com/jsdw/yap

操作系统OS
https://github.com/0x59616e/SteinsOS
https://github.com/nebulet/nebulet
https://gitlab.redox-os.org/redox-os/redox
https://github.com/thepowersgang/rust_os
https://github.com/tock/tock
https://github.com/oxidecomputer/hubris
https://github.com/theseus-os/Theseus
https://github.com/google/OpenSK

k8s
https://github.com/project-akri/akri
https://github.com/krustlet/krustlet

文本编辑器
https://github.com/federico-terzi/espanso
https://github.com/zee-editor/zee

https://rust-audio.discourse.group/
https://github.com/RustyDAW/rusty-daw-audio-graph
https://github.com/RustyDAW/rusty-daw-io
从结构中获取 Vec<u8> 的过程宏，反之亦然
https://github.com/breuHQ/byteme
DEBUG TOOL
https://github.com/probe-rs/probe-rs
https://github.com/openocd-org/openocd
Rust 中 WebAssembly 的 Raft 分布式共识
https://github.com/shosti/wraft
Rust 的 linter 工具
https://github.com/rust-lang/rust-clippy
根据样式准则格式化 Rust 代码
https://github.com/rust-lang/rustfmt
Rust 代码和资源的精选列表。
https://github.com/rust-unofficial/awesome-rust
让你习惯阅读和编写 Rust 代码的小练习
https://github.com/rust-lang/rustlings

受 Locust 启发的负载测试框架
https://github.com/tag1consulting/goose
将媒体从1个组呼设备转发到N个组呼设备。
https://github.com/signalapp/Signal-Calling-Service
多地ping工具
https://gitlab.com/shodan-public/geonet-rs
一个系统处理程序，用于获取信息CPU MEM
https://github.com/GuillaumeGomez/sysinfo
rust-analyzer
https://github.com/rust-analyzer/rust-analyzer

https://github.com/matklad/cargo-xtask
https://github.com/ur0/lolcat

使用 Prometheus 和 Grafana 监控 Rust Web 应用程序
https://mp.weixin.qq.com/s/BKTd8d0Me6nxuVmG-y6Tjg

用于计算机图形的线性代数和数学库。
https://github.com/rustgd/cgmath

Kali Linux Parrot OS是另一个以安全为中心的发行版
SystemRescue：系统救援型 Linux
https://www.system-rescue.org/Download/
数据恢复工具
http://www.gnu.org/software/ddrescue/manual/ddrescue_manual.html
https://github.com/mruffalo/ddrescue
首先拯救光盘最重要的部分。
     ddrescue -i0 -s50MiB /dev/sdc hdimage 映射文件
     ddrescue -i0 -s1MiB -d -r3 /dev/sdc hdimage 映射文件
然后拯救一些关键的光盘区域。
     ddrescue -i30GiB -s10GiB /dev/sdc hdimage 映射文件
     ddrescue -i230GiB -s5GiB /dev/sdc hdimage 映射文件
现在拯救其余的（不重新复制已经完成的）。
     ddrescue /dev/sdc hdimage 映射文件
     ddrescue -d -r3 /dev/sdc hdimage 映射文件
ddrescue 的输出如下所示：

     GNU 救援 1.25
     按 Ctrl-C 中断
     初始状态（从地图文件中读取）
     获救：1665 MB，尝试：0 B，坏扇区：0 B，坏区域：0
     
     当前状态
          ipos：2874 MB，未修剪：0 B，当前速率：21479 kB/s
          opos：2874 MB，非刮擦：0 B，平均速率：21023 kB/s
     未尝试：13603 MB，坏扇区：0 B，错误率：0 B/s
       获救：2401 MB，坏区：0，运行时间：35s
     获救百分比：15.00%，读取错误：0，剩余时间：10m
      慢读：5，自上次成功读起的时间：0s
     复制未尝试的块...通过 1（转发）
每个字段的含义如下：

ipos
输入位置。当前正在从中读取数据的输入文件中的位置。
opos
输出位置。当前正在写入数据的输出文件中的位置。
non-tried
待尝试的救援域部分的大小。这是所有未尝试块的大小之和。
rescued
已成功恢复的救援域部分的大小。这是所有完成块大小的总和。
pct rescued
已成功恢复的救援域的百分比。
slow reads
读取速率低于 ' 的次数--最小读取率' 在复制阶段的前两次传递期间。见--min-read-rate。
tried
已经尝试过但尚未获救的救援域部分的大小。这是所有未修剪、未刮擦和坏扇区块的大小之和。
non-trimmed
待修整的救援域部分的大小。这是所有未修剪块的大小的总和。
non-scraped
待抓取的救援域部分的大小。这是所有未抓取块的大小之和。
bad-sector
总错误大小。这是已知坏扇区形成的救援域部分的大小。总错误大小是所有坏扇区块大小的总和。它在修剪和刮削阶段会增加，在重试阶段可能会减少。一个扇区不会被标记为坏扇区并被认为是坏区的一部分，直到它被单独尝试而不是作为大块读取的一部分。请注意，当 ddrescue 重试坏扇区块时，找到的好数据可能会将它们分成更小的块，从而减少总错误大小，但会增加坏区的数量。
bad areas
救援域内单独的坏扇区块的数量。未修剪和未刮擦的块不被视为坏区域。见--max-bad-areas。
read errors
失败的读取尝试次数。参见--max-error-rate。
current rate
在最后一秒测量的读取速率。
average rate
当前运行期间测量的平均读取速率。
error rate
在最后一秒测量的读取错误率。
run time
自当前运行开始以来经过的时间。
remaining time
拯救救援域中所有数据的估计剩余时间。剩余时间是使用最近 30 秒的平均速率计算的，并没有考虑救援域的某些部分可能被排除在救援之外（例如使用 '--无修剪')，或者某些区域可能无法恢复。因此，它可能非常不精确，在救援期间可能变化很大，并且可能在救援结束时显示非零值。特别是在第一遍结束时它可能会下降到几秒钟，在接下来的遍中会增长到几小时或几天。这就是 ddrescue 的本质；好的部分通常恢复得很快，而其余的可能需要很长时间。
time since last successful read
自上次成功读取尝试后经过的时间。

https://github.com/solana-labs/solana
Solana（诞生于 2018 年，总价值 500亿美元）是继太坊之后的一个可编程区块链。Solana 的重点是实现高吞吐量、低成本交易，这是当前以太坊网络的两个最大的弱点。Solana 的高性能主要归功于分布式共识设计的多项创新。最近，A16z 向 Solana Labs的代币销售投资了 3.14 亿美元。

CUDA GPU
https://github.com/EmbarkStudios/rust-gpu
https://github.com/Rust-GPU/Rust-CUDA

game
https://github.com/bevyengine/bevy
https://bevy-cheatbook.github.io/setup/bevy-git.html
https://github.com/FyroxEngine/Fyrox #3D 和 2D 游戏引擎
https://github.com/veloren/veloren
https://github.com/tedsteen/nes-bundler

2d 3d
https://github.com/rg3dengine/rg3d
scheduler job
https://github.com/survemobility/gaffer/
利用MITM技术实现请求和返回的重写、重定向、阻断等操作
https://github.com/zu1k/good-mitm
快速密码词表生成器、Smartlist 创建和密码混合掩码分析工具
cracken：密码词表生成器、Smartlist 创建和密码混合掩码分析工具
https://github.com/shmuelamar/cracken
https://github.com/mvniekerk/tokio-cron-scheduler

内网穿透
一款快速, 稳定, 高效, 轻量的内网穿透, 端口转发工具 支持多连接,级联代理,传输加密
https://github.com/editso/fuso
async python web server
https://github.com/sansyrox/robyn/

Git
https://github.com/Byron/gitoxide
https://github.com/o2sh/onefetch
cargo install onefetch


dag 从最新的 GitHub 版本下载
https://github.com/devmatteini/dag
cargo install dag
dag devmatteini/dag-example download
dag devmatteini/dag-example download --output /tmp/dag-example
dag devmatteini/dag-example untag
dag devmatteini/dag-example download --select "dag-example-{tag}-amd64"

Rust interface to Podman
https://github.com/vv9k/podman-api-rs
vec
https://github.com/slightlyoutofphase/staticvec
https://github.com/maniartech/uuidgen
https://github.com/k0kubun/xremap

在没有 Docker 的情况下在 macOS 上交叉编译 Rust Lambdas
在 Rust 中开发 Lambda 函数的标准方法是使用 AWS 提供的自定义 Lambda 运行时并在部署之前交叉编译所有内容。这里介绍如何在 macos 上进行开发 Lambda 函数。
brew tap messense/macos-cross-toolchains
brew install aarch64-unknown-linux-gnu
然后，在您的环境中设置这些变量（例如在bashrc 中）：
export CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-gcc
export CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-g++
export AR_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-ar
export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-unknown-linux-gnu-gcc
现在cargo build --target aarch64-unknown-linux-gnu将在 macOS 上按预期工作，并生成准备部署到 AWS Lambda 的二进制文件 - 无需 Docker
https://noserve.rs/rust-lambdas-macos/

SIMD 加速操作
支持 SSE4.1、AVX2、ARM NEON、Aarch64 NEON 和 WASM SIMD128！
比 fast-hex、base64 和 radix64 更快！
https://github.com/Nugine/simd

frp 的路由器，现在能跑 rathole。
项目地址 https://github.com/rapiz1/rathole

# server.toml
[server]
bind_addr = "0.0.0.0:2333" # `2333` specifys the port that rathole listens for clients
[server.services.my_nas_ssh]
token = "use_a_secret_that_only_you_know" # Token that is used to authenticate the client for the service. Change to a arbitrary value.
bind_addr = "0.0.0.0:5202" # `5202` specifys the port that exposes `my_nas_ssh` to the Internet
./rathole server.toml
# client.toml
[client]
remote_addr = "myserver.com:2333" # The address of the server. The port must be the same with the port in `server.bind_addr`
[client.services.my_nas_ssh]
token = "use_a_secret_that_only_you_know" # Must be the same with the server to pass the validataion
local_addr = "127.0.0.1:22" # The address of the service that needs to be forwarded
./rathole client.toml

LibAFL - 高性能 Rust fuzzer
Fuzzing 可以完全自动化地发现对安全至关重要的错误。
https://github.com/AFLplusplus/LibAFL
zbus 2.0 发布
简要介绍一下 zbus 是什么：D-Bus 是一种在 Linux（尤其是桌面和嵌入式系统）上非常流行的进程间通信 (IPC) 机制
https://docs.rs/zbus/latest/zbus/

GUI
https://github.com/iced-rs/iced
https://github.com/emilk/egui/
https://www.egui.rs/
https://github.com/linebender/druid
https://github.com/fschutt/azul
https://github.com/slint-ui/slint
Dioxus v0.1 发布
Dioxus 是一个新的 Rust GUI 工具包，用于 Web、桌面、移动、SSR、TUI
优雅的类 React 库，用于为桌面、Web、移动、SSR、实时查看等构建用户界面。
https://github.com/DioxusLabs/dioxus
https://github.com/cksac/oxui

https://github.com/lnicola/smem

链接聚合器
https://github.com/LemmyNet/lemmy
https://github.com/LemmyNet/lemmy-ui
https://github.com/LemmyNet/lemmy-js-client
https://github.com/LemmyNet/lemmy-ansible
https://lemmy.ml/

https://github.com/rustsbi/rustsbi
https://github.com/rust-embedded/wg
https://github.com/sixtyfpsui/sixtyfps
https://github.com/greatest-ape/OctaSine
https://github.com/jorgecarleitao/arrow2/

富有表现力的游戏音频库
https://github.com/tesselode/kira
多媒体摄取与分发系统
https://github.com/KallDrexx/mmids/
Blackjack
https://github.com/Arc676/Blackjack
基于节点的建模工具
https://github.com/setzer22/blackjack
Rust 的低级到高级数学库
https://github.com/Aandreba/llml

unix
https://github.com/Andy-Python-Programmer/aero
用于更轻松地切换 git 分支的命令行实用程序
https://github.com/craciuncezar/git-smart-checkout
在添加上下文的同时轻松地将基础错误分配到特定领域的错误中
https://github.com/shepmaster/snafu
呼叫服务
将媒体从 1 个组呼设备转发到 N 个组呼设备
https://github.com/signalapp/Signal-Calling-Service
https://github.com/signalapp/ringrtc
Rust 解析器组合器框架
https://github.com/Geal/nom
BTreeSet/BTreeMap
https://github.com/tnballo/scapegoat
并行迭代器处理库
https://github.com/dpc/pariter
Linux 的内存分析器
https://github.com/koute/bytehound

GUI图像进行排序和分类
https://github.com/Futsch1/image-sieve
微服务能够在整个企业中创建、查找、监视和使用各种微资源以及向其他微服务发送消息
https://github.com/mechtronium/starlane/
树视图文件可视化
https://github.com/angelina-tsuboi/ctv
tesseract
https://github.com/thomasgruebl/rusty-tesseract
一个新的 actor 框架
https://github.com/Zestors/zestors
A command-line pager for JSON data
https://github.com/PaulJuliusMartinez/jless
update-informer 是一个主要为使用 Rust 编写的 CLI 工具创建的库，例如 dotenv- linter 、datanymizer。它检查已发布的新版本，并在发现更新时发送通知
https://github.com/mgrachev/update-informer
RFC
https://github.com/rust-lang/rfcs
https://rust-lang.github.io/rfcs/
resin 3D打印机的固件
https://github.com/nviennot/turbo-resin/
分布式对象存储，S3兼容
https://git.deuxfleurs.fr/Deuxfleurs/garage
CADBase 的主要 API 是 GraphQL API，但 REST API 用于获取授权令牌
https://docs.cadbase.rs/
CNCF Jaeger，一个分布式追踪平台
https://github.com/jaegertracing/jaeger
https://github.com/jaegertracing/jaeger-ui
LLVM
https://github.com/EnzymeAD/Enzyme

https://github.com/rcxxx/MegFlow
https://github.com/MegEngine/MegFlow
具有扩展过滤支持的向量相似性搜索引擎
https://github.com/qdrant/qdrant
https://github.com/dimforge/nalgebra
https://github.com/neuronika/neuronika

https://github.com/tauri-apps/tauri
https://github.com/electron/electron
https://github.com/flutter/flutter
https://github.com/nwjs/nw.js
https://github.com/pwa-builder/PWABuilder
https://github.com/AvaloniaUI/Avalonia

https://github.com/linebender/runebender
https://github.com/fede1024/rust-rdkafka
https://github.com/smoltcp-rs/smoltcp
https://github.com/libp2p/rust-libp2p
https://github.com/near/nearcore
https://github.com/diem/diem
https://github.com/CympleTech/TDN
https://github.com/stateright/stateright
https://github.com/openmls/openmls
https://github.com/ChainSafe/mina-rs
https://github.com/dani-garcia/vaultwarden
https://github.com/tonarino/innernet
https://github.com/RustAudio/cpal
https://github.com/MeadowlarkDAW/Meadowlark

https://github.com/kafka-rust/kafka-rust

github CLIENT
https://github.com/octocat-rs/octocat-rs
端口转发
https://github.com/cfal/tobaru
DataFrame library
https://github.com/pola-rs/polars

Rust Kubernetes client
https://github.com/kube-rs/kube-rs

ls 命令
https://github.com/Peltoche/lsd
https://github.com/Canop/broot
https://github.com/ogham/exa
cd 命令
https://github.com/ajeetdsouza/zoxide
find 命令
https://github.com/junegunn/fzf
https://github.com/sharkdp/fd/
grep 命令
https://github.com/BurntSushi/ripgrep
https://github.com/ggreer/the_silver_searcher
https://github.com/konradsz/igrep
ps 命令
https://github.com/dalance/procs
git diff
https://github.com/so-fancy/diff-so-fancy
git、diff 和 grep 输出的语法高亮分页器
https://github.com/dandavison/delta
ctrl+r的替代品，主要用来搜索 Shell 操作记录
https://github.com/cantino/mcfly
cut 命令
https://github.com/theryangeary/choose
curl
https://github.com/httpie/httpie
https://github.com/rs/curlie
https://github.com/ducaale/xh
dig 命令
https://github.com/ogham/dog

https://github.com/ThijsRay/coppers

Zine - 一个简单而有主见的工具来建立你自己的杂志
https://github.com/zineland/zine
cargo install zine
zine new your-zine-site
cd your-zine-site
zine serve
zine build

go script
https://github.com/oxfeeefeee/goscript
脚本语言
https://github.com/vrtbl/passerine

文件分页查看
https://github.com/arijit79/minus

练习打字
https://github.com/coloradocolby/thokr
cargo install thokr
thokr
thokr -w 100
thokr -p "$(cat foo.txt)"
https://gitlab.com/ttyperacer/terminal-typeracer
cargo install typeracer
typeracer
typeracer -r $(echo 'racing using a passage from elsewhere')
https://github.com/crabtyper/crabtyper


控制台代办时钟
https://github.com/krvoje/clockking
用于接收 BLE 小米 M365 滑板车消息
https://github.com/macbury/m365

Hush 是一个基于 Lua 编程语言的 unix shell
https://github.com/hush-shell/hush

history 历史记录
https://github.com/ellie/atuin

https://github.com/spanasik/pg2rs
https://github.com/sirwart/ripsecrets

构建工具
https://github.com/dimensionhq/fleet
cargo install --git https://github.com/dimensionhq/fleet fleet-rs

分析你的 Rust 应用程序
https://github.com/pyroscope-io/pyroscope-rs
https://github.com/tikv/pprof-rs

pulsar
https://github.com/wyyerd/pulsar-rs

DLHN 小数据序列化
https://github.com/otake84/dlhn

键盘按键音效模拟
https://github.com/yingDev/Tickeys
跨平台多媒体层
https://github.com/Nazariglez/notan

markdown
https://github.com/Cveinnt/LetsMarkdown.com

SQL查询JSON
https://github.com/partiql/partiql-lang-rust
https://github.com/partiql/partiql-lang-kotlin/releases

下一代跟踪器和广告拦截器
https://github.com/Barre/privaxy

https://github.com/mithril-security/blindai
https://github.com/apollographql/router

player
https://github.com/aome510/spotify-player

encryption
https://github.com/brxken128/dexios
一种内存高效的字符串类型，最多可以在堆栈上存储 24* 个字节
https://github.com/ParkMyCar/compact_str
image to ASCII art
https://github.com/FineFindus/artem
https://github.com/lecepin/rust-wasm-image-ascii
npm install rust-wasm-image-ascii
https://github.com/MustafaSalih1993/tai

https://github.com/BLAKE3-team/BLAKE3
https://github.com/oconnor663/bao
https://github.com/rmw-lib/blake3_merkle

venial是syn的轻量替代品
https://github.com/PoignardAzur/venial

https://github.com/matklad/xshell

分布式 PostgreSQL 扩展
https://github.com/citusdata/citus
FIM 是一种基于开源主机的文件检测工具，可执行文件系统分析、文件完整性检查和实时警报
https://github.com/Achiefs/fim
Spleeter 的 Rust 实现 Deezer源分离库
https://github.com/deezer/spleeter
https://github.com/ldm0/rspleeter
https://github.com/larksuite/rsmpeg
公共飞机和航线API axum, PostgreSQL, Redis
https://github.com/mrjackwills/adsbdb
让 Postgres 和 Elasticsearch 使用 Elasticsearch 为 Postgres Indexes 提供支持
https://github.com/zombodb/zombodb

Lisp 编译为 JavaScript ES 模块 JSX
Calcit-js 代替 ClojureScript
https://github.com/calcit-lang/calcit
https://github.com/calcit-lang/editor
https://github.com/Respo/alerts.calcit
用于管理来自 Modrinth、CurseForge 和 Github 版本的 Minecraft 模组和模组包的快速和多源 CLI 程序
https://github.com/gorilla-devs/ferium

log
https://github.com/estk/log4rs
https://github.com/rust-lang/log
https://github.com/slog-rs/slog

font
https://github.com/servo/font-kit
Iconic font
https://github.com/ryanoasis/nerd-fonts

Warp 是一个速度极快的现代基于 Rust 的 GPU 加速终端
https://github.com/warpdotdev/Warp
brew install --cask warp

macos
https://github.com/servo/core-foundation-rs
https://github.com/michaelwu/RustKit

MQTT
https://github.com/rmqtt/rmqtt

VDFS（虚拟分布式文件系统）是一种文件系统，旨在跨各种存储层工作
https://github.com/spacedriveapp/spacedrive

绘图库
https://github.com/plotters-rs/plotters
https://github.com/plotters-rs/plotters-wasm-demo

Rust 最准确的自然语言检测库，适用于长文本和短文本等
https://github.com/pemistahl/lingua-rs

查找和清理软件项目的依赖项和构建，以节省空间或使备份更容易
https://github.com/sigoden/projclean
cargo install projclean
projclean node_modules

为功能强大但侵入性最低的 TUI 提供了处理程序和构建块
https://github.com/facebookincubator/superconsole

ARP聊天
https://github.com/kognise/arpchat

URL解析器
https://github.com/yescallop/fluent-uri-rs
Savage 是一个用纯 Rust 从头开始编写的新计算机代数系统
https://github.com/p-e-w/savage
跨平台的本地文件搜索引擎
https://github.com/naaive/orange

Servo 是一个用 Rust语言编写的原型 Web 浏览器引擎
https://github.com/servo/servo
缓存代理
https://github.com/wayslog/aster

https://github.com/freenet/locutus

无锁hashmap
https://github.com/Cassy343/flashmap
https://github.com/xacrimon/conc-map-bench
https://github.com/jonhoo/evmap

https://github.com/tapeinosyne/hyphenation
https://github.com/nervosnetwork/axon

https://github.com/jeertmans/languagetool-rust
https://github.com/viridIT/vSMTP
https://github.com/knassar702/hacks #网络安全工具
RaidProtect 是一个开源的 Discord 机器人
https://github.com/raidprotect/raidprotect

lurk，这是一个非常简洁而美观的 strace 替代品，它实现了 strace 的绝大部分功能，并且在可读性上做出了很大程度的优化 https://github.com/JakWai01/lurk
跨平台的服务管理器
https://github.com/chipsenkbeil/service-manager-rs
STM32 Emulator
该项目的目标是模拟3D打印机，但任何类型的 stm32 控制器固件都可以工作。
https://github.com/nviennot/stm32-emulator

grep -> ripgrep
cat -> bat
find -> fd
sed -> sd
top -> ytop
coreutils -> uutils
xterm -> alacrity
ls -> exa
gold -> mold
Python -> RustPython
jekyll -> zola
go -> goscript
electron -> tauri
V8 -> spidermonkey
Qt -> iced
BitCoin -> solana
nodejs -> deno
Linux -> Rust for Linux
strace -> lurk

Volo：https://github.com/cloudwego/volo
Volo-rs：https://github.com/volo-rs
Pilota：https://github.com/cloudwego/pilota
Motore：https://github.com/cloudwego/motore
Metainfo：https://github.com/cloudwego/metainfo

valence 是一个用于构建Minecraft服务器的Rust框架
github 地址: https://github.com/valence-rs/valence

https://github.com/railwayapp/nixpacks
https://github.com/becheran/grid
后台处理 任务
https://github.com/ayrat555/fang

压测
https://github.com/lnx-search/rewrk

https://github.com/alexpusch/rust-magic-function-params
https://bevy-cheatbook.github.io/programming/queries.html
Axum 中，get 函数却可以接收不同类型的函数指针

cargo install cargo-careful 快速安装，然后执行 cargo +nightly careful run/test https://github.com/RalfJung/cargo-careful

