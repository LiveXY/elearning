图片中文识别
https://github.com/PaddlePaddle/PaddleOCR
https://github.com/breezedeus/cnocr
python3 scripts/cnocr_predict.py --file text.png
文字处理
https://github.com/hankcs/HanLP
https://github.com/hankcs/pyhanlp
https://github.com/ownthink/Jiagu
分词
hanlp segment <<< '欢迎新老师生前来就餐'
句法分析
hanlp parse <<< '欢迎新老师生前来就餐'
关键词提取
HanLP.extractKeyword('欢迎新老师生前来就餐', 2)
自动摘要
HanLP.extractSummary('欢迎新老师生前来就餐', 3)
依存句法分析
HanLP.parseDependency('欢迎新老师生前来就餐')
语音识别
https://github.com/nl8590687/ASRT_SpeechRecognition
python3 asrserver.py
https://github.com/kaldi-asr/kaldi
http://kaldi-asr.org/
https://github.com/jackyyy0228/Chinese-ASR
TTS
https://github.com/espnet/espnet

预训练模型镜像
https://coggle.club/note/dl/pretrained-models

文字转语音
大声说一句：
say {{"I like to ride my bike."}}
大声朗读文件：
say -f {{filename.txt}}
播放自定义语音和语速的短语：
say -v {{voice}} -r {{words_per_minute}} {{"I'm sorry Dave, I can't let you do that."}}
列出可用的声音：
say -v ?
创建语音文本的音频文件：
say -o {{filename.aiff}} {{"Here's to the Crazy Ones."}}

清华大学自然语言处理
https://github.com/thunlp/THULAC-Python
python3 test.py
python3 -m thulac input.txt output.txt
结巴分词
https://github.com/fxsjy/jieba
处理中文文本内容
https://github.com/isnowfy/snownlp
https://github.com/tsroten/pynlpir

https://github.com/stacklikemind/deepnude_official
https://github.com/lwlodo/deep_nude/
https://github.com/emperorwushi/xi/
https://github.com/NVIDIA/pix2pixHD

Text-To-Speech
######
多语言：
https://github.com/pndurette/gTTS
pip install gTTS
gtts-cli 'hello' --output hello.mp3
https://github.com/cboard-org/cboard

https://github.com/zlargon/google-tts/
npm install google-tts-api --save
https://github.com/vilic/cordova-plugin-tts
https://github.com/naoufal/react-native-speech
web:
https://github.com/guest271314/SpeechSynthesisRecorder
https://github.com/kripken/speak.js
https://github.com/Marak/say.js
命令行：
https://www.npmjs.com/package/voc-cli
py:
https://github.com/buriburisuri/speech-to-text-wavenet
https://github.com/readbeyond/aeneas
http://espeak.sourceforge.net/test/latest.html
https://github.com/Kyubyong/tacotron
完全端到端的文本到语音合成模型，主要是将文本转化为语音，使用了预训练模型(pre-trained)技术
https://github.com/keithito/tacotron
https://keithito.com/LJ-Speech-Dataset/
https://librivox.org/
https://github.com/DragonComputer/Dragonfire

https://github.com/r9y9/deepvoice3_pytorch
git clone https://github.com/r9y9/deepvoice3_pytorch && cd deepvoice3_pytorch
pip install -e ".[bin]"
python synthesis.py --preset=20180505_deepvoice3_ljspeech.json \
  20180505_deepvoice3_checkpoint_step000640000.pth \
  sentences.txt \
  output_dir
python preprocess.py --preset=presets/deepvoice3_ljspeech.json ljspeech ~/data/LJSpeech-1.0
python train.py --preset=presets/deepvoice3_ljspeech.json --data-root=./data/ljspeech
python preprocess.py ljspeech ~/data/LJSpeech-1.0
# warning! this may use different hyper parameters used at preprocessing stage
python train.py --preset=presets/deepvoice3_ljspeech.json --data-root=./data/ljspeech
https://github.com/mozilla/TTS
https://github.com/hgneng/ekho #Chinese
http://www.eguidedog.net/ekho.php

speech-to-text
######
https://github.com/mozilla/DeepSpeech
pip3 install deepspeech
deepspeech --model models/output_graph.pbmm --alphabet models/alphabet.txt --lm models/lm.binary --trie models/trie --audio my_audio_file.wav
pip3 install deepspeech-gpu
deepspeech --model models/output_graph.pbmm --alphabet models/alphabet.txt --lm models/lm.binary --trie models/trie --audio my_audio_file.wav
pre-trained model
wget https://github.com/mozilla/DeepSpeech/releases/download/v0.1.1/deepspeech-0.1.1-models.tar.gz
tar xvfz deepspeech-0.1.1-models.tar.gz
audio files
wget https://github.com/mozilla/DeepSpeech/releases/download/v0.1.1/audio-0.1.1.tar.gz
tar xvfz audio-0.1.1.tar.gz
deepspeech models/output_graph.pb audio/2830-3980-0043.wav models/alphabet.txt models/lm.binary models/trie
Text: experience proves this
deepspeech models/output_graph.pb audio/4507-16021-0012.wav models/alphabet.txt models/lm.binary models/trie
Text: why should one halt on the way
deepspeech models/output_graph.pb audio/8455-210777-0068.wav models/alphabet.txt models/lm.binary models/trie
Text: your power is sufficient i said
deepspeech --model models/output_graph.pbmm --alphabet models/alphabet.txt --lm models/lm.binary --trie models/trie --audio my_audio_file.wav
To download the pre-built binaries, use util/taskcluster.py:
python3 util/taskcluster.py --target .
or if you're on macOS:
python3 util/taskcluster.py --arch osx --target .

https://github.com/asticode/go-astideepspeech
http://www.cstr.ed.ac.uk/projects/festival/

采用densenet识别图中文字
https://github.com/yinchangchang/ocr_densenet

阿里云语音验证码
https://github.com/qingdie/qingdie-aliyun
https://dysmsapi.aliyuncs.com/ #短信验证码
https://dyvmsapi.aliyuncs.com/ #语音验证码

https://github.com/kerlomz/captcha_trainer
https://github.com/kerlomz/captcha_library_c
https://github.com/kerlomz/captcha_demo_csharp
https://github.com/kerlomz/captcha_platform
https://mp.weixin.qq.com/s/6IAEus9OTg-hP9NGKJRm_Q

字典大全
http://www.zd9999.com/
https://github.com/GopherCoder/dictionary-of-chinese
https://github.com/pwxcoo/chinese-xinhua

古诗词
https://github.com/chinese-poetry/chinese-poetry
https://github.com/KomaBeyond/chinese-poetry-mysql
https://github.com/Werneror/Poetry

泼辣有图
http://www.polayoutu.com/collections

查天气
https://github.com/tangjiahao/robotofwx/blob/master/robotmain.py
https://api.seniverse.com/v3/weather/now.json?key=Skb40T46PiBDM35V2&location=%s&language=zh-Hans&unit=c
https://free-api.heweather.net/s6/weather?location=%s&key=a3269a0918a44a62ae97c314dd24f02a

酷狗音乐
http://www.kugou.com/yy/index.php?r=play/getdata&hash=%s&album_id=%s&_=1497972864535
https://wwwapi.kugou.com/yy/index.php?r=play/getdata&callback=jQuery191014887140948582345_1557824383110&hash=%s&album_id=%s&dfid=0zpwSa44LtGp0D89Gr371MJb&mid=51eafc9b0e5eaca4e106b905175401ec&platid=4&_=1557824383112
http://songsearch.kugou.com/song_search_v2?keyword=%spage=1&pagesize=3&userid=-1&clientver=&platform=WebFilter&tag=em&filter=2&iscorrection=1&privilege_filter=0
https://github.com/tangjiahao/robotofwx/blob/master/robotmain.py

机器学习
https://github.com/eriklindernoren/ML-From-Scratch
https://github.com/NELSONZHAO/zhihu

机器翻译machine translation（NMT）
https://github.com/tensorflow/nmt
https://github.com/OpenNMT/OpenNMT-py
http://opennmt.net/OpenNMT-py/speech2text.html
https://github.com/OpenNMT/OpenNMT
https://github.com/THUNLP-MT/MT-Reading-List
https://github.com/xuwenshen/Machine-Translation
https://github.com/foamliu/Machine-Translation-v2

英汉词典
https://github.com/ChestnutHeng/Wudao-dict
https://github.com/program-in-chinese/vscode_english_chinese_dictionary
https://github.com/skywind3000/ECDICT
https://github.com/skywind3000/ECDICT/releases
https://github.com/program-in-chinese/webextension_english_chinese_dictionary
https://github.com/fxsjy/diaosi
https://github.com/chienlungcheung/MyDict


手机短信验证码语音验证码话费充值流量充值
https://github.com/gitchenze/panguPhone
http://www.miaodiyun.com/

语音识别
https://github.com/xxbb1234021/speech_recognition
训练数据下载 清华大学中文语料库（thchs30）http://www.openslr.org/18/
训练
配置conf目录下的conf.ini文件中的各项
在终端运行 python train.py 开始训练
在终端运行 python test.py 测试
也可以使用PyCharm打开

wav 文件转 16k 16bits 位深的单声道pcm文件
ffmpeg -y  -i 16k.wav  -acodec pcm_s16le -f s16le -ac 1 -ar 16000 16k.pcm
44100 采样率 单声道 16bts pcm 文件转 16000采样率 16bits 位深的单声道pcm文件
ffmpeg -y -f s16le -ac 1 -ar 44100 -i test44.pcm  -acodec pcm_s16le -f s16le -ac 1 -ar 16000 16k.pcm
mp3 文件转 16K 16bits 位深的单声道 pcm文件
ffmpeg -y  -i aidemo.mp3  -acodec pcm_s16le -f s16le -ac 1 -ar 16000 16k.pcm
// -acodec pcm_s16le pcm_s16le 16bits 编码器 // -f s16le 保存为16bits pcm格式 // -ac 1 单声道 // -ar 16000 16000采样率
Facebook AI Research的自动语音识别工具包
https://github.com/facebookresearch/wav2letter
https://github.com/brightmart/roberta_zh

https://github.com/facebookresearch/SlowFast 视频分类/视频理解/行为检测

中文语音识别 AISHELL
https://github.com/libai3/masr
识别自己的语音
brew install portaudio
pip3 install pyaudio
语言模型
https://deepspeech.bj.bcebos.com/zh_lm/zh_giga.no_cna_cmn.prune01244.klm

https://github.com/Uberi/speech_recognition
https://pypi.org/project/pocketsphinx/
pip3 install SpeechRecognition
pip3 install https://github.com/bambocher/pocketsphinx-python/archive/master.zip
brew install cmu-pocketsphinx cmu-sphinxbase cmu-sphinxtrain cmuclmtk
https://realpython.com/python-speech-recognition/
https://blog.csdn.net/weixin_40490238/article/details/84841825
https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/Mandarin/cmusphinx-zh-cn-5.2.tar.gz/download
https://jaist.dl.sourceforge.net/project/cmusphinx/Acoustic%20and%20Language%20Models/Mandarin/cmusphinx-zh-cn-5.2.tar.gz
解压到
cd /usr/local/lib/python3.7/site-packages/speech_recognition/pocketsphinx-data
mkdir -p zh-CN/acoustic-model
zh_broadcastnews_16k_ptm256_8000.tar.bz2解压缩到zh-CN/acoustic-model
zh_broadcastnews_utf8.dic重命名为pronounciation-dictionary.dict并放入\zh-CN文件夹
SphinxBase工具将zh_broadcastnews_64000_utf8.DMP转换成language-model.lm.bin并放入\zh-CN文件夹下
pocketsphinx_continuous -hmm /usr/local/lib/python3.7/site-packages/speech_recognition/pocketsphinx-data/zh-CN/acoustic-model/ -lm zh_broadcastnews_64000_utf8.DMP -dict pronounciation-dictionary.dic
pocketsphinx_continuous -hmm zh_broadcastnews_ptm256_8000 -lm zh_broadcastnews_64000_utf8.DMP -dict zh_broadcastnews_utf8.dic -infile myfile-16000.wav > myfile.txt
pocketsphinx_continuous -inmic yes -hmm ../share/pocketsphinx/model/cmusphinx-zh-cn-5.2/zh_cn.cd_cont_5000 -lm ../share/pocketsphinx/model/cmusphinx-zh-cn-5.2/zh_cn.lm.bin -dict ../share/pocketsphinx/model/cmusphinx-zh-cn-5.2/zh_cn.dic
pocketsphinx_continuous -inmic yes -hmm /usr/local/pocketsphinx/share/pocketsphinx/model/cmusphinx-zh-cn-5.2/zh_cn.cd_cont_5000 -lm ./4648.lm -dict ./4648.dic

https://github.com/cmusphinx/sphinxbase
.\sphinx_lm_convert.exe -i .\zh_broadcastnews_64000_utf8.DMP -o language-model.lm -ofmt arpa
.\sphinx_lm_convert.exe -i .\language-model.lm -o language-model.lm.bin
sphinx_lm_convert -i zh_broadcastnews_64000_utf8.DMP -o language-model.lm -ofmt arpa
sphinx_lm_convert -i language-model.lm -o language-model.lm.bin
https://www.cnblogs.com/henjay724/p/9576670.html
http://www.speech.cs.cmu.edu/tools/lextool.html
http://www.speech.cs.cmu.edu/tools/lmtool-new.html
pip3 install cmudict
vi test.txt
窗口 ch uang k ou
打开 d a k ai
关闭 g uan b i
记事本 j i sh ib b en
浏览器 l iu l an q i
音乐 y in uxs uxe
http://www.speech.cs.cmu.edu/tools/lmtool-new.html
pocketsphinx_continuous -lm 6177.lm -dict 6177.dic
/usr/local/Cellar/cmu-pocketsphinx/0.8/share/pocketsphinx/model/hmm/en_US/hub4wsj_sc_8k
pocketsphinx_continuous -hmm tdt_sc_8k -lm 6177.lm -dict 6177.dic
/usr/local/share/pocketsphinx/model/hmm/zh/tdt_sc_8k/
/usr/local/Cellar/cmu-pocketsphinx/0.8/share/pocketsphinx/model/hmm/zh/tdt_sc_8k/
训练大文本数据的语言模型
vi weather.txt
<s> 天气 </s>
<s> 有雨 </s>
<s> 晴朗 </s>
<s> 多云 </s>
<s> 雷电 </s>
产生词汇表vocabulary文件：
text2wfreq < weather.txt | wfreq2vocab > weather.vocab
命令text2wfreq：统计文本文件中每个词出现的次数，得到一个后缀为wfreq的文件
命令wfreq2vocab：统计文本文件中含有多少个词，即有哪些词。
生成 arpa格式的语言模型：
text2idngram -vocab weather.vocab -idngram weather.idngram < weather.txt
idngram2lm -vocab_type 0 -idngram weather.idngram -vocab weather.vocab -arpa weather.arpa
转换为 CMU的二进制格式 (DMP)：
sphinx_lm_convert -i weather.arpa -o weather.lm.DMP
cp -a /usr/local/share/pocketsphinx/model/hmm/zh/tdt_sc_8k .
sphinx_fe -argfile tdt_sc_8k/feat.params -samprate 16000 -c arctic20.fileids -di . -do . -ei wav -eo mfc -mswav yes
https://www.cnblogs.com/qiuhong/articles/3671991.html
sphinx_lm_convert -i model.lm -o model.dmp
sphinx_lm_convert -i model.dmp -ifmt dmp -o model.lm -ofmt arpa
http://www.voidcn.com/article/p-tiryhtrm-zk.html
rec_wav.sh
for i in `seq 1 12`; do
       fn=`printf arctic_%04d $i`;
       read sent; echo $sent;
       rec -r 16000 -e signed-integer -b 16 -c 1 $fn.wav 2>/dev/null;
done < arctic20.txt

Raspberry PI语音控制-PocketSphinx
https://my.oschina.net/RagingTyphoon/blog/493072

IBM:
https://github.com/watson-developer-cloud/speech-to-text-nodejs
https://stream-wdc.watsonplatform.net/speech-to-text/api
https://gateway-syd.watsonplatform.net/speech-to-text/api
https://speech-to-text-demo.ng.bluemix.net/

GOOGLE:
https://console.developers.google.com/
http://www.chromium.org/developers/how-tos/api-keys
https://github.com/gillesdemey/google-speech-v2
brew install sox
rec --encoding signed-integer --bits 16 --channels 1 --rate 16000 test.wav
curl -X POST \
--data-binary @'audio/hello (16bit PCM).wav' \
--header 'Content-Type: audio/l16; rate=16000;' \
'https://www.google.com/speech-api/v2/recognize?output=json&lang=en-us&key=yourkey'
curl -X POST \
--data-binary @audio/good-morning-google.flac \
--header 'Content-Type: audio/x-flac; rate=44100;' \
'https://www.google.com/speech-api/v2/recognize?output=json&lang=en-us&key=yourkey'
https://github.com/evancohen/sonus
npm install --save sonus

科大讯飞
https://www.xfyun.cn/
https://www.xfyun.cn/services/voicedictation
http://member.voicecloud.cn/index.php/default/register
https://www.xfyun.cn/solutions/robots
http://www.devstore.cn/evaluation/testInfo/107-127.html

文字转拼音
https://github.com/janx/ruby-pinyin
https://github.com/sofish/han

微信CLIENT
https://github.com/trazyn/weweChat #只有PC
开源IM
https://github.com/hcxiong/xuanxuan #只有PC
https://github.com/meili/TeamTalk
https://github.com/YiChat
https://github.com/duckchat/gaga
https://github.com/dianbaer/anychat
https://github.com/zulip

https://github.com/gunthercox/ChatterBot
https://github.com/pandolia/qqbot
https://github.com/huangzk/qqchatbot
https://gitee.com/airgzn/QQChatBot
https://gitee.com/airgzn/xiaofeichatbot

APPLE
https://developer.apple.com/documentation/avfoundation/speech_synthesis
https://github.com/CoderTitan/TextAndVoice

http://ai.youdao.com/
https://openapi.youdao.com/api
https://openapi.youdao.com/ocrtransapi
https://openapi.youdao.com/speechtransapi
https://openapi.youdao.com/ocrapi
https://openapi.youdao.com/ocr_structure
https://openapi.youdao.com/ocr_formula
https://www.cnblogs.com/alchemystar/p/13668470.html
http://ai.youdao.com/DOCSIRMA/html/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91/API%E6%96%87%E6%A1%A3/%E6%96%87%E6%9C%AC%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1/%E6%96%87%E6%9C%AC%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1-API%E6%96%87%E6%A1%A3.html
http://ai.youdao.com/DOCSIRMA/html/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91/API%E6%96%87%E6%A1%A3/%E8%AF%AD%E9%9F%B3%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1/%E8%AF%AD%E9%9F%B3%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1-API%E6%96%87%E6%A1%A3.html
http://ai.youdao.com/DOCSIRMA/html/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91/API%E6%96%87%E6%A1%A3/%E5%9B%BE%E7%89%87%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1/%E5%9B%BE%E7%89%87%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1-API%E6%96%87%E6%A1%A3.html
http://ai.youdao.com/DOCSIRMA/html/%E6%96%87%E5%AD%97%E8%AF%86%E5%88%ABOCR/API%E6%96%87%E6%A1%A3/%E9%80%9A%E7%94%A8OCR%E6%9C%8D%E5%8A%A1/%E9%80%9A%E7%94%A8OCR%E6%9C%8D%E5%8A%A1-API%E6%96%87%E6%A1%A3.html

BAIDU
```
https://github.com/Baidu-AIP/nodejs-sdk
npm install baidu-aip-sdk
http://ai.baidu.com/docs#/
http://yuyin.baidu.com/
https://github.com/ChenHao96/VoiceInteraction
https://github.com/eisneim/cytron_tts_gui
https://github.com/apetab/vbot-voice

http://tsn.baidu.com/text2audio
QQ&微信语音silk转换wav
brew install gcc ffmpeg
git clone https://github.com/kn007/silk-v3-decoder.git silk-v3-decoder
cd silk-v3-decoder/silk
make && make decoder
./decoder 123.silk 123.pcm
ffmpeg -y -f s16le -ar 24000 -ac 1 -i 123.pcm -f wav -ar 16000 -b:a 16 -ac 1 123.wav
https://www.jianshu.com/p/b092da81feb0
语音识别
len + speech方式
http://vop.baidu.com/server_api?format=wav&rate=16000&channel=1&token=&cuid=9e:eb:e8:d4:67:00&len=大小&speech=图片base64
url + callback方式
http://vop.baidu.com/server_api?format=wav&rate=16000&channel=1&token=&cuid=9e:eb:e8:d4:67:00&url=123.wav&callback=回调地址
http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=2&text=
https://ai.baidu.com/aidemo?type=tns2&idx=1&tex=%s&cuid=baidu_speech_demo&cod=2&lan=zh&ctp=1&pdt=1&spd=5&per=4&vol=5&pit=5
http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=2&text=你要转换的文字
https://openapi.baidu.com/oauth/2.0/token?grant_type=client_credentials&client_id={}&client_secret={}&
```

https://github.com/nl8590687/ASRT_SpeechRecognition
cp -rf datalist/* dataset/
目前可用的模型有24、25和251
本项目开始训练请执行：
$ python3 train_mspeech.py
本项目开始测试请执行：
$ python3 test_mspeech.py
测试之前，请确保代码中填写的模型文件路径存在。
ASRT API服务器启动请执行：
$ python3 asrserver.py
如果要训练和使用模型251，请在代码中 import SpeechModel 的相应位置做修改。
dataset/data_thchs30/train/*.wav
dataset/data_thchs30/dev/*.wav
dataset/data_thchs30/test/*.wav
dataset/ST-CMDS-20170001_1-OS/*.wav
https://github.com/nl8590687/ASRT_SpeechRecognition/wiki

https://github.com/apachecn/AiLearning
https://feisky.xyz/machine-learning/
自然语言处理 中文分词 词性标注 命名实体识别 依存句法分析 关键词提取 新词发现 短语提取 自动摘要 文本分类 拼音简繁
http://hanlp.com/
https://github.com/hankcs/HanLP
https://github.com/hankcs/pyhanlp
pip3 install pyhanlp
hanlp update
hanlp --help
hanlp segment <<< '欢迎新老师生前来就餐'
hanlp parse <<< '徐先生还具体帮助他确定了把画雄鹰、松鼠和麻雀作为主攻目标。'
https://github.com/fighting41love/cocoNLP

https://github.com/ownthink/Jiagu

https://github.com/PaddlePaddle/LARK/tree/develop/ERNIE
pip3 install paddlepaddle
https://mp.weixin.qq.com/s/nb3g1RV3fk2rm8a_v_ZUEA
https://mp.weixin.qq.com/s/osfV54FRU1vw5c4CZuSR1A
https://github.com/PaddlePaddle/book
http://www.paddlepaddle.org/documentation/docs/zh/1.2/beginners_guide/quick_start/index.html

https://github.com/explosion/spaCy

https://github.com/visipedia/iwildcam_comp
https://github.com/visipedia/inat_comp
https://github.com/macaodha/inat_comp_2018
https://github.com/Microsoft/AirSim
https://www.microsoft.com/en-us/ai/ai-for-earth?activetab=pivot1%3aprimaryr6
http://cocodataset.org/#download
https://hackaday.io/project/159737-spectra-open-biomedical-imaging

人工智能开发平台
https://github.com/ifeegoo/Prometheus
https://github.com/huanghe/ai
https://mp.weixin.qq.com/s/-y_01EBYVxiCwLddCvyFfg
https://github.com/intel-analytics/analytics-zoo
https://analytics-zoo.github.io/0.4.0/

以太坊智能合约+DApp 工作流实战案例：抽奖程序
https://github.com/wangshijun/ethereum-lottery-dapp
https://infura.io/project/08ed39a60be74cd78974ecfed000fe6f
https://infura.io/docs/gettingStarted/authentication
npm install wscat -g
wscat -c wss://mainnet.infura.io/ws/v3/08ed39a60be74cd78974ecfed000ff
> {"jsonrpc": "2.0", "id": 1, "method": "eth_blockNumber", "params": []}

npm install -g solc truffle ganache-cli
https://github.com/trufflesuite/ganache-cli
https://truffleframework.com/ganache
https://github.com/wangzukun/truffle4-demo
truffle init

推荐
https://mp.weixin.qq.com/s/E6EH6aJjzTwN2UZf_4nwoA

Synonyms 中文近义词工具包，可以用于自然语言理解的很多任务：文本对齐，推荐算法，相似度计算，语义偏移，关键字提取，概念提取，自动摘要，搜索引擎等
https://github.com/huyingxi/Synonyms

语言/知识表示工具
https://github.com/PaddlePaddle/LARK

句子、QA相似度匹配
https://github.com/NTMC-Community/MatchZoo

https://polyglot.readthedocs.io/en/latest/Installation.html
https://github.com/aboSamoor/polyglot
brew install polyglot
pip3 install polyglot

pyltp
https://github.com/HIT-SCIR/pyltp
https://mp.weixin.qq.com/s/gLzdYZVoegjAPmnMAUq19g
pip3 install pyltp
https://pyltp.readthedocs.io/zh_CN/develop/api.html

反向传递: https://www.cnblogs.com/charlotte77/p/5629865.html
CNN原理: http://www.cnblogs.com/charlotte77/p/7759802.html
RNN原理: https://blog.csdn.net/qq_39422642/article/details/78676567
LSTM深入浅出的好文: https://blog.csdn.net/roslei/article/details/61912618

语音翻译 面对面翻译小程序
https://github.com/Tencent/Face2FaceTranslator

中英文翻译
https://github.com/xuwenshen/Machine-Translation
https://github.com/liuhuanyong/ChineseTextualInference
https://github.com/quincyliang/nlp-public-dataset

中文语料
https://github.com/yanwii/machine-translation
https://github.com/brightmart/nlp_chinese_corpus

https://github.com/FeeiCN/dict

http://www.iciba.com/
http://www.iciba.com/hello
https://github.com/justinyhuang/BashCiba

https://github.com/Neoyyy/google-CommandLine-Translation-Tool
https://translate.google.cn/translate_a/single?hl=zh-CN&sl=zh-CN&tl=en&q=%E4%B8%AD%E5%9B%BD&client=tw-ob


http://www.baidu.com/
http://fanyi.baidu.com/basetrans
https://github.com/AnuoF/TranslateTool

http://fanyi.youdao.com/openapi?path=data-mode
http://fanyi.youdao.com/openapi.do?keyfrom=wufeifei&key=716426270&type=data&doctype=json&version=1.1&q=测试

代码安全审计
https://github.com/WhaleShark-Team/cobra

XLNET/NLP预训练新方法
自编码语言模型（Autoencoder LM）
https://github.com/zihangdai/xlnet

bert中文分类实践/ELMO
自回归语言模型（Autoregressive LM）
https://github.com/NLPScott/bert-Chinese-classification-task
https://github.com/yuanxiaosc/BERT_Paper_Chinese_Translation
https://github.com/terrifyzhao/bert-utils
http://icrc.hitsz.edu.cn/info/1037/1162.htm
https://github.com/NVIDIA/Megatron-LM

https://github.com/ymcui/Chinese-BERT-wwm
以TensorFlow版本为例，下载完毕后对zip文件进行解压得到：
chinese_wwm_L-12_H-768_A-12.zip
    |- bert_model.ckpt      # 模型权重
    |- bert_model.meta      # 模型meta信息
    |- bert_model.index     # 模型index信息
    |- bert_config.json     # 模型参数
    |- vocab.txt            # 词表
https://github.com/ymcui/cmrc2018
CMRC 2018数据集是哈工大讯飞联合实验室发布的中文机器阅读理解数据。根据给定问题，系统需要从篇章中抽取出片段作为答案，形式与SQuAD相同。
https://github.com/DRCKnowledgeTeam/DRCD
DRCD数据集由中国台湾台达研究院发布，其形式与SQuAD相同，是基于繁体中文的抽取式阅读理解数据集。
https://github.com/shiyybua/NER
中文命名实体识别（NER）任务中，我们采用了经典的人民日报数据以及微软亚洲研究院发布的NER数据。
THUCNews
http://thuctc.thunlp.org/
由清华大学自然语言处理实验室发布的新闻数据集，需要将新闻分成10个类别中的一个。

识别/塑造面部
https://deepfakes.com.cn/
https://deepfakes.com.cn/index.php/95.html
https://deepfakes.com.cn/index.php/265.html
https://deepfakes.com.cn/index.php/243.html
https://github.com/deepfakes/faceswap
https://github.com/deepfakes/faceswap/blob/master/INSTALL.md
从您的安装文件夹中运行python faceswap.py extract。这将从src文件夹拍摄照片并将面部提取到extract文件夹中。
从您的安装文件夹中运行python faceswap.py train。这将从包含两张脸的照片的两个文件夹中拍摄照片，并训练将保存在models文件夹内的模型。
从您的安装文件夹中运行python faceswap.py convert。这将从original文件夹中拍摄照片并将新面孔应用到modified文件夹中。
您可以通过运行来运行GUI python faceswap.py gui
换脸/换头
https://github.com/iperov/DeepFaceLab
https://radek350.wordpress.com/2018/02/17/myfakeapp-fakeapp-alternative/
https://github.com/sunattic/AISuperstar
https://github.com/joshua-wu/deepfakes_faceswap
https://github.com/llSourcell/deepfakes
https://github.com/dfaker/df
https://github.com/gsurma/face_generator

CTR
https://github.com/shenweichen/DeepCTR

经过预先训练的30多种语言的单词向量
https://github.com/hcxiong/wordvectors
人名、地址、邮箱、手机号、手机归属地 等信息的抽取，rake短语抽取算法。
pip3 install cocoNLP
清华大学XLORE:中英文跨语言百科知识图谱
https://xlore.org/ttl/xlore.all.zip

智能家居
https://github.com/apanly/piRobot
https://github.com/apanly/autohome
https://github.com/2shou/TextGrocery.git #短文本分类工具
BeautifulSoup(HTML/XML的解析器)
http://www.pm25.in/api_doc
https://www.faceplusplus.com.cn/
pip3 install jieba tgrocery

远程控制玩具车
https://github.com/pjq/rpi

sudo apt-get install libttspico-utils
https://github.com/GwadaLUG/pico-read-speaker
- libttspico-data (https://openrepos.net/content/mickaelh/libttspico-data)
- libttspico0 (https://openrepos.net/content/mickaelh/libttspico0)
- libttspico-utils (https://openrepos.net/content/mickaelh/libttspico-utils)
- libttspico-dev (https://openrepos.net/content/mickaelh/libttspico-dev)
or
- sudo apt-get install libttspico0 libttspico-utils libttspico-data
 wget https://raw.githubusercontent.com/stevenmirabito/asterisk-picotts/master/picotts-install.sh -O - | sh
- svox (pico2wave) https://packages.debian.org/source/squeeze/svox
https://github.com/mscdex/speaky
https://github.com/grigi/talkey
https://pbxinaflash.com/community/threads/svox-pico-tts-for-asterisk.17859/
pico2wave -l fr-FR -w /tmp/test.wav "Ceci est un test"
aplay /tmp/test.wav

https://github.com/zaf/asterisk-googletts
brew install sox mpg123 pulseaudio espeak
soxi sox play
play existing-file.wav
sox existing-file.wav −d

https://www.google.com.hk/speech-api/v1/recognize?xjerr=1&client=chromium&pfilter=2&lang=zh-CN&maxresults=6
https://github.com/apanly/piRobot/blob/master/stt/google.py

cd /
wget http://incrediblepbx.com/picotts.tar.gz
tar zxvf picotts.tar.gz
cd /root
./picotts-install.sh
sed -i 's|en)|en-US)|' /etc/asterisk/extensions_custom.conf
sed -i 's|googletts|picotts|' /etc/asterisk/extensions_custom.conf
asterisk -rx "dialplan reload"

espeak --stdout "this is a test" | paplay
echo "these are my notes" > text.txt
espeak --stdout -f text.txt > text.wav
paplay text.wav # you should hear "these are my notes"
play text.wav

基于STM32的孤立词语音识别
https://github.com/gk969/stm32-speech-recognition
http://gk969.com/stm32-speech-recognition/

图灵
聊天
http://www.tuling123.com/openapi/api

图片识别文字
pip3 install baidu-aip
https://github.com/shuoGG1239/Image2Text
https://github.com/lancezhange/smoke_recognition 图片烟雾识别
python3 smokeDetection.py
pip3 install pytesseract

https://www.cnblogs.com/wzben/p/5930538.html
brew install --with-training-tools --all-languages tesseract
https://github.com/tesseract-ocr/tessdata
https://github.com/tesseract-ocr/tessdata/tree/3.04.00
https://github.com/tesseract-ocr/tessdata_fast/

tesseract -v tesseract --list-langs 查看版本+语音
tesseract 图片名称 生成的结果文件的名称 字库
tesseract test.jpg result -l chi_sim
tesseract -l chi_sim+eng
tesseract 1234.png 1234 -l chi_sim -psm 6
tesseract --help-psm
 0 定向脚本监测（OSD）
 1 使用OSD自动分页
 2 自动分页，但是不使用OSD或OCR（Optical Character Recognition，光学字符识别）
 3 全自动分页，但是没有使用OSD（默认）
 4 假设可变大小的一个文本列。
 5 假设垂直对齐文本的单个统一块。
 6 假设一个统一的文本块。
 7 将图像视为单个文本行。
 8 将图像视为单个词。
 9 将图像视为圆中的单个词。

将图片转换成tif格式，用于后面生成box文件。可以通过画图，然后另存为tif即可
[lang].[fontname].exp[num].tif
生成box文件
tesseract mjorcen.normal.exp0.jpg mjorcen.normal.exp0 -l chi_sim batch.nochop makebox
box文件和对应的tif一定要在相同的目录下，不然后面打不开。
打开jTessBoxEditor矫正错误并训练 打开train.bat
tesseract  mjorcen.normal.exp0.jpg mjorcen.normal.exp0  nobatch box.train
unicharset_extractor mjorcen.normal.exp0.box
新建一个font_properties文件
里面内容写入 normal 0 0 0 0 0 表示默认普通字体
shapeclustering -F font_properties -U unicharset mjorcen.normal.exp0.tr
mftraining -F font_properties -U unicharset -O unicharset mjorcen.normal.exp0.tr
cntraining mjorcen.normal.exp0.tr
最后会生成五个文件，把目录下的unicharset、inttemp、pffmtable、shapetable、normproto这五个文件前面都加上normal.
combine_tessdata normal.
得到训练好的字库。
把 normal.traineddata 复制到Tesseract-OCR 安装目录下的tessdata文件夹中
tesseract mjorcen.normal.exp0.jpg mjorcen.normal.exp0 -l normal

素材合成，(多个素材合成)
打开jTessBoxEditor工具，菜单栏：tools->Merge TIFF...，选中要合成的图片并保存为为：huiyi.fitt。
生成box文件
tesseract  huiyi.tif huiyi -l chi_sim -psm 10 batch.nochop makebox
执行后会在生成一个名为huiyi.box的box文件。
用文本编辑器或者xcode打开编辑保存
生成.tr文件
tesseract huiyi.tif huiyi -psm 10 nobatch box.train
生成unicharset文件
unicharset_extractor huiyi.box

jTessBoxEditor
https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/
java -Xms4096m -Xmx4096m -jar jTessBoxEditor.jar

图片转tiff
pip3 install tifffile
python3 /usr/local/lib/python3.7/site-packages/tifffile/tifffile.py --help
vi ~/.bash_profile
alias tifffile='python3 /usr/local/lib/python3.7/site-packages/tifffile/tifffile.py'
source ~/.bash_profile
tifffile --help

go get -u github.com/brunsgaard/img2tiff
cd $GOPATH/src/github.com/brunsgaard/img2tiff

https://blog.csdn.net/qq_25806863/article/details/67637567
vi process-tessdata.sh
#!/bin/sh
read -p "输入你语言:" lang
echo ${lang}
read -p "输入你的字体:" font
echo ${font}
echo "所以完整文件名为："
echo ${lang}.${font}.exp0.tif
echo "开始。。。"
echo ${font} 0 0 0 0 0 >font_properties
tesseract  ${lang}.${font}.exp0.tif ${lang}.${font}.exp0  nobatch box.train
unicharset_extractor ${lang}.${font}.exp0.box
shapeclustering -F font_properties -U unicharset ${lang}.${font}.exp0.tr
mftraining -F font_properties -U unicharset -O unicharset ${lang}.${font}.exp0.tr
cntraining ${lang}.${font}.exp0.tr
echo "开始重命名文件"
mv inttemp ${font}.inttemp
mv normproto ${font}.normproto
mv pffmtable ${font}.pffmtable
mv shapetable ${font}.shapetable
mv unicharset ${font}.unicharset
echo "生成最终文件"
combine_tessdata ${font}.
echo "完成"


识别车牌
https://github.com/zeusees/HyperLPR
pip install hyperlpr

CNN的OCR车牌识别
https://github.com/huxiaoman7/mxnet-cnn-plate-recognition


一款入门级的人脸、视频、文字检测以及识别的项目.
https://github.com/vipstone/faceai
https://github.com/bairdzhang/smallhardface

pip3 install dlib
训练模型用于是人脸识别的关键，用于查找图片的关键点。
wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2
当然你也可以训练自己的人脸关键点模型，这个功能会放在后面讲。
下载好的模型文件，我的存放地址是：C:\Python36\Lib\site-packages\dlib-data\shape_predictor_68_face_landmarks.dat.bz2
解压：shape_predictor_68_face_landmarks.dat.bz2得到文件：shape_predictor_68_face_landmarks.dat
https://github.com/hcxiong/faceai/blob/master/doc/detectionDlib.md
https://github.com/hcxiong/faceai/blob/master/doc/videoOpenCV.md
https://github.com/hcxiong/faceai/blob/master/doc/videoDlib.md
https://github.com/hcxiong/faceai/blob/master/doc/faceRecognitionOutline.md

人脸检测
https://github.com/610265158/DSFD-tensorflow

https://github.com/kpzhang93/MTCNN_face_detection_alignment
https://github.com/ydwen/caffe-face
https://github.com/deepinsight/insightface
https://github.com/deepinsight/insightface/wiki/Model-Zoo
MS1M-Arcface
https://pan.baidu.com/s/1S6LJZGdqcZRle1vlcMzHOQ
https://github.com/Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB

https://github.com/ZhaoJ9014/face.evoLVe.PyTorch
https://github.com/Cadene/pretrained-models.pytorch

2012年视觉对象课程挑战（VOC2012）
http://host.robots.ox.ac.uk:8080/pascal/VOC/voc2012/index.html

https://github.com/fighting41love/funNLP
中英文敏感词过滤 https://github.com/observerss/textfilter
97种语言检测 https://github.com/saffsd/langid.py
另一个语言检测https://code.google.com/archive/p/language-detection/
中国手机归属地查询 https://github.com/ls0f/phone
phone国际手机、电话归属地查询 https://github.com/AfterShip/phone
根据名字判断性别： https://github.com/observerss/ngender
人名语料库 https://github.com/wainshine/Chinese-Names-Corpus
中文缩写库 https://github.com/zhangyics/Chinese-abbreviation-dataset/blob/master/dev_set.txt
汉语拆字词典 https://github.com/kfcd/chaizi
词汇情感值 https://github.com/rainarch/SentiBridge/blob/master/Entity_Emotion_Express/CCF_data/pair_mine_result
中文词库、停用词、敏感词 https://github.com/dongxiexidian/Chinese
汉字转拼音 https://github.com/mozillazg/python-pinyin
中文繁简体互转 https://github.com/skydark/nstools/tree/master/zhtools
英文模拟中文发音引擎 funny chinese text to speech enginee https://github.com/tinyfool/ChineseWithEnglish
同义词库、反义词库、否定词库 https://github.com/phunterlau/wangfeng-rnn
无空格英文串分割、抽取单词 https://github.com/keredson/wordninja
结巴中文分词 https://github.com/fxsjy/jieba
百度中文词法分析（分词+词性+专名）系统 https://github.com/baidu/lac
https://github.com/baidu/AnyQ 百度FAQ自动问答系统
https://github.com/baidu/Senta 百度情感识别系统
Scattertext 文本可视化:https://github.com/JasonKessler/scattertext
中文字符数据:https://github.com/skishore/makemeahanzi
中文识别
https://github.com/breezedeus/cnocr
python3 scripts/cnocr_predict.py --file multi-line_cn1.png
https://github.com/diaomin/crnn-mxnet-chinese-text-recognition

语料
https://github.com/codemayq/chaotbot_corpus_Chinese
https://github.com/gunthercox/chatterbot-corpus
https://github.com/MarkWuNLP/MultiTurnResponseSelection
https://github.com/wb14123/couplet-dataset
中文古诗自动作诗机器人
https://github.com/jinfagang/tensorflow_poems
python3 train.py
python3 compose_poem.py
python3 main.py -w poem --no-train

基於向量匹配的情境式聊天機器人
https://github.com/zake7749/Chatbot
https://github.com/zake7749/PTT-Chat-Generator
用于主题建模，文档索引 和大型语料库的相似性检索。目标受众是 自然语言处理（NLP）和信息检索（IR）社区。
https://github.com/RaRe-Technologies/gensim
PTT 八卦版問答中文語料
https://github.com/zake7749/Gossiping-Chinese-Corpus

处理中文文本内容
https://github.com/isnowfy/snownlp
文本相似度
https://github.com/seatgeek/fuzzywuzzy
https://github.com/sloria/TextBlob

ocr
http://apis.baidu.com/apistore/idlocr/ocr
https://github.com/deloz/baiduocr
https://github.com/tesseract-ocr/tesseract
brew install --with-training-tools --all-languages tesseract
brew install imagemagick
tesseract imagename outputbase [-l lang] [--oem ocrenginemode] [--psm pagesegmode] [configfiles...]
tesseract -l chi_sim data/test_data.png out_test_data
chi_sim.traineddata
eng.traineddata
https://github.com/naptha/tesseract.js
http://tesseract.projectnaptha.com/
https://github.com/madmaze/pytesseract
https://github.com/thiagoalessio/tesseract-ocr-for-php
https://github.com/otiai10/gosseract
https://github.com/Greedysky/TTKOCR
https://github.com/Aixtuz/CardScanner
https://github.com/iChenwin/pytesseractID
https://github.com/csxiaoyaojianxian/BloodTestReportOCR
https://github.com/bigchao8/Opencv-ImageBase
基于caffe
https://github.com/JinpengLI/deep_ocr
python reco_chars.py
实现ctpn+crnn+ctc实现不定长场景文字OCR识别
https://github.com/xiaofengShi/CHINESE-OCR
环境部署
Bash
##GPU环境
sh setup.sh
##CPU环境
sh setup-cpu.sh
##CPU python3环境
sh setup-python3.sh
使用环境：python3.6+tensorflow1.7+cpu/gpu
https://github.com/jimmyleaf/ocr_tensorflow_cnn
安装
http://caffe.berkeleyvision.org/install_osx.html
brew tap homebrew/science
brew install hdf5 opencv

文字识别
http://www.robots.ox.ac.uk/~vgg/data/text/
https://yq.aliyun.com/articles/109555?t=t1
https://github.com/YCG09/chinese_ocr
sh setup.sh #环境部署
python demo.py #Demo 将测试图片放入test_images目录，检测结果会保存到test_result中
训练 数据集：https://pan.baidu.com/s/1QkI7kjah8SPHwOQ40rS1Pw (密码：lu7m) 图片解压后放置到train/images目录下，描述文件放到train目录下
cd train
python train.py
https://github.com/JarveeLee/SynthText_Chinese_version
https://github.com/Belval/TextRecognitionDataGenerator
https://github.com/Sanster/text_renderer

用keras实现OCR定位、识别
https://github.com/xiaomaxiao/keras_ocr

https://github.com/eragonruan/text-detection-ctpn 文字区域检测CTPN
https://github.com/eragonruan/text-detection-ctpn/releases
python ./ctpn/demo_pb.py
cd lib/utils
chmod +x make.sh
./make.sh
prepare data
cd lib/prepare_training_data
python split_label.py
it will generate the prepared data in current folder, and then run
python ToVoc.py
python ./ctpn/train_net.py

主流ocr算法研究实验性的项目，目前实现了CNN+BLSTM+CTC架构
https://github.com/senlinuc/caffe_ocr
https://github.com/isee15/Card-Ocr
基于caffe的LSTM OCR案例，能够利用该案例完成序列的识别，包括验证码、车牌、身份证号码、地址等长序列动长的内容识别
https://github.com/dlunion/CaffeLSTM-OCR

物体识别
https://github.com/open-mmlab/mmdetection
https://github.com/HRNet/HRNet-Object-Detection

CTC可以被用来训练端对端的语音识别系统
https://github.com/baidu-research/warp-ctc
git clone https://github.com/baidu-research/warp-ctc.git
cd warp-ctc
mkdir build
cd build
cmake ../
make
http://ilovin.me/2017-04-06/tensorflow-lstm-ctc-ocr/
https://github.com/ilovin/lstm_ctc_ocr

https://github.com/bgshih/crnn
https://github.com/meijieru/crnn.pytorch

腾讯优图OCR云平台识别身份证、银行卡、行驶证、驾驶证，依赖包小，识别次数免费
https://api.youtu.qq.com/youtu/ocrapi/
https://open.youtu.qq.com/#/open
https://github.com/Tencent-YouTu/nodejs_sdk
https://github.com/Tencent-YouTu/Python_sdk
https://github.com/Tencent-YouTu/Go_sdk
https://github.com/TencentYouTu/ios_sdk
https://github.com/TencentYouTu/android_sdk

基于Xception的腾讯验证码识别（样本+代码）
https://github.com/bojone/n2n-ocr-for-qqcaptcha
10万验证码样本公开如下：
链接: https://pan.baidu.com/s/1mhO1sG4 密码: j2rj
https://github.com/keras-team/keras

百度莱茨狗抢购脚本
https://github.com/Acamy/pet-chain-buyer
https://github.com/yanwii/pet-chain
https://pet-chain.baidu.com/

图片验证码识别
https://www.showapi.com/api/view/184
https://github.com/Yaoshicn/decaptcha
https://github.com/dingyaguang117/ImageRecognizeOf58
https://github.com/CrazyHusen/IdentificationCodes

百度二代身份证识别
https://github.com/DophinL/baidu-ocr-idcard
https://github.com/Freeza91/baidu_ocr
百度OCR文字识别API For Ruby Gems
https://rubygems.org/gems/baidu_ocr
https://aip.baidubce.com/rest/2.0/ocr/v1/general
https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic
https://aip.baidubce.com/rest/2.0/ocr/v1/general_enhanced
https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic
https://aip.baidubce.com/rest/2.0/ocr/v1/accurate
https://aip.baidubce.com/rest/2.0/ocr/v1/bankcard
https://aip.baidubce.com/rest/2.0/ocr/v1/idcard
https://aip.baidubce.com/rest/2.0/ocr/v1/webimage
https://aip.baidubce.com/rest/2.0/ocr/v1/driving_license
https://aip.baidubce.com/rest/2.0/ocr/v1/vehicle_license
https://aip.baidubce.com/rest/2.0/ocr/v1/license_plate
https://aip.baidubce.com/rest/2.0/ocr/v1/business_license
https://aip.baidubce.com/rest/2.0/ocr/v1/receipt
https://github.com/UEdge/OCRCard
https://github.com/chasecs/react-native-baidu-ocr
语音识别,语音合成,中文分词, 中文词向量表示, 短文本相似度, 中文DNN语言模型, 评论观点抽取, 词性标注, 人脸识别, 人脸N:N比对, 身份证识别, 黄色图片识别, 图片查找, 等接口的golang调用sdk
https://github.com/ghostwwl/baiduai

aliyun
https://market.aliyun.com/aliyunocrnew
https://data.aliyun.com/product/ocr

图片识别
http://image.baidu.com/pictureup/uploadshitu?fr=flash&fm=index&pos=upload
curl -i -F 'image=@3.jpg' 'http://image.baidu.com/pictureup/uploadshitu?pos=upload&uptype=upload_pc&fm=index' -L

人脸识别
https://github.com/ageitgey/face_recognition
https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py
pip3 install face_recognition
识别照片或文件夹中的面部照片
face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/
在照片或文件夹中找到满是照片的面孔
face_detection  ./folder_with_pictures/
face_detection  ./unknown_pictures/test1.png
face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/
face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/test1.png
face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/
face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2
face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/
https://github.com/vipstone/faceai/blob/master/doc/faceRecognition.md

https://github.com/foamliu/InsightFace-v2
https://github.com/foamliu/InsightFace-v3
https://github.com/deepinsight/insightface

人脸属性
https://github.com/foamliu/Face-Attributes
CASIA-webface人脸数据集（vk36）
https://pan.baidu.com/s/1cnnKrYQDheNfoEhcDoShyA
https://www.jianshu.com/p/44311bccbbc6
人脸识别数据集：Glint360K
https://github.com/deepinsight/insightface/tree/master/recognition/partial_fc#glint360k
https://github.com/deepinsight/insightface

头像特效合成
https://github.com/vipstone/faceai/blob/master/doc/compose.md

性别识别
https://github.com/vipstone/faceai/blob/master/doc/gender.md
pip3 install keras
pip3 install tensorflow
https://github.com/oarriaga/face_classification

表情识别
https://github.com/oarriaga/face_classification
Run real-time emotion demo:
python3 video_emotion_color_demo.py
Run real-time guided back-prop demo:
python3 image_gradcam_demo.py
Make inference on single images:
python3 image_emotion_gender_demo.py <image_path>
python3 image_emotion_gender_demo.py ../images/test_image.jpg
https://github.com/hcxiong/faceai/blob/master/doc/emotion.md

https://blog.csdn.net/ZWX2445205419/article/details/79086288
https://blog.csdn.net/ZWX2445205419/article/details/79030001

表情识别
https://github.com/deepak-ucfknight/Emotion-Recognition
https://github.com/YouYouExcellent/keras_emotion_classify

视频对象提取
https://github.com/vipstone/faceai/blob/master/doc/hsv-opencv.md
图片修复
https://github.com/vipstone/faceai/blob/master/doc/inpaint.md

https://github.com/davidsandberg/facenet
pip3 install facenet

https://github.com/deepinsight/insightface
https://jiankangdeng.github.io/

https://github.com/cmusatyalab/openface/
https://github.com/ShiqiYu/libfacedetection
https://github.com/OAID/Tengine/tree/master/examples/YuFaceDetectNet
https://github.com/justadudewhohacks/face-api.js
https://github.com/justadudewhohacks/face-recognition.js

Open Pose 代表了第一个在单个图像上联合检测人体、手、面部和足部关键点（总共 135 个关键点）的实时多人系统。
https://github.com/CMU-Perceptual-Computing-Lab/openpose
https://github.com/TadasBaltrusaitis/OpenFace
https://github.com/dlunion/OpenPose
https://github.com/tensorlayer/openpose-plus
https://github.com/ZhaoJ9014/face.evoLVe.PyTorch

https://github.com/zangruirui/facenet_regonistant
pip3 install -r requirements.txt
python3 face_recognition_api.py #访问地址是XXXXXX:8088 这个可以配置
python3 face_recognition_savepic.py #人脸信息提取出来并保存到单独的文件夹下
修改文件参数
1.images_path：要处理的图片文件夹路径
2.modelpath： 模型存放路径
3.out_path： 将每个图片中每个人脸转换为128维向量保存到json文件中

人脸识别c++
https://github.com/seetaface/SeetaFaceEngine

AutoIT自动化脚本工具与脚本录制
https://www.autoitscript.com/site/autoit/downloads
https://github.com/ellysh/au3src
https://www.jb51.net/shouce/autoit/
https://github.com/acalcutt/Vistumbler 无线网络扫描仪
https://github.com/9aylas/Shortcut-Payload-Generator
https://github.com/9aylas/PE-Binary-Dumper
https://github.com/9aylas/Automated-UPX-Packer
https://github.com/9aylas/Administrator-Tool
https://github.com/9aylas/Wireless-Recovery-Tool
https://github.com/xwxbug/autoit-cn
https://github.com/xhawk18/node-autoit
https://github.com/dragana-r/autoit-winhttp
https://github.com/ellysh/l2bot 天堂2机器人
https://github.com/jvanegmond/au3_uiautomation
https://github.com/3gstudent/AutoIt-Keylogger
https://github.com/geekcomputers/AutoIt
https://github.com/nurupo/chrome-mouse-wheel-tab-scroller
https://github.com/GkevinOD/msl-bot 怪物超级联赛AutoIT机器人
https://github.com/Kirlovon/Devil-Backdoor 恶魔后门
https://github.com/turbo/OOPEAu3
https://github.com/xLinkOut/telegram-udf-autoit
https://github.com/admiralmachado/AutoIt-Uplay
https://github.com/Pahiro/AutoIT-Scripts
https://github.com/J2TEAM/AutoIt-Imgur-UDF
https://github.com/upig/TxtSpider 抓取小说
https://github.com/QstarLLC/Black-Desert-Fishing-Bot-AutoItScript- 黑色沙漠在线鱼机器人
https://github.com/jogonba2/Autoit-Obfuscator 自动代码混淆
https://github.com/genokolar/Genotools
https://github.com/cornernote/autoit-poker_bot 自动化玩德州扑克
https://github.com/rcmaehl/IRC-UDFs
https://github.com/tarreislam/Autoit-Socket-IO
https://github.com/subnet-/AutoIT
https://github.com/ormaaj/d2au3 暗黑破坏神II自动化框架
https://github.com/J2TEAM/autoit-updater
https://github.com/AchmadFathoni/Duellink-PC-Bot
https://github.com/Amatsukan/MemorySystem-AutoIT
https://github.com/gileli121/share-variables-in-ram
https://github.com/wsguest/LiveRobot 24小时转播艾菲卡的机器人
https://github.com/JoshuaDoes/PPMIt
https://github.com/Dateranoth/ConanExilesServerUtility
https://github.com/ialsaud/PianoTilesAutoit
https://github.com/Trailerbreaker/LauncherAoS 黑桃王牌游戏的发射器
https://github.com/KBebel/ZombidleAuto
https://github.com/opdo/autoit-hanoitower
https://github.com/jack-c-taylor/AutoIT-Card-Game 纸牌游戏
https://github.com/ulfgebhardt/autoit_pokeautopilot 口袋妖怪
https://github.com/Genotypek/TWMB-AutoIT3
https://github.com/MrAutoIt/Flash_Game_Automation_Example
https://github.com/WildGenie/WildNosBot
https://github.com/xLinkOut/lumberjack-bot
https://github.com/dbechrd/Vondido 益智游戏
https://github.com/jcageman/d2itemreader 暗黑破坏神2
https://github.com/Dateranoth/RustServerUtility
https://github.com/Isonyx/QADCA
https://github.com/RobertoGalois/Automation-LevelUp-Megaman-Zero-GBA
https://github.com/dolong/PathofExilePixelRecognitionProject

https://github.com/codebroken/BrokenBot
https://brokenbot.org
https://github.com/CodeSlinger69/ClAsHbOt 部落冲突农场机器人
https://github.com/blackdaddy/ClashBot ClashBot 6.0错误修复程序
https://github.com/xseano/ClashBotV2 企业Clash Bot版本2
https://github.com/trickymast3r/clashbot 5.6版本
https://github.com/nhocly/AutoIt-ClashBot
https://github.com/iminjured/ClashBot-v6.2.3
https://github.com/nhocly/COC-Bot
https://github.com/Phid/COC-Bot
https://github.com/nhocly/Coc-bot-Csharp
https://github.com/nhocly/cgb-unofficial
https://github.com/nhocly/pokubot
https://mybot.run/
https://github.com/ChackBR/MyBot_v7
https://github.com/Envyus/GameBot
https://github.com/ChackBR/MyBot6_5m

https://ntcore.com/?page_id=388
https://ntcore.com/files/ExplorerSuite.exe
https://ntcore.com/files/CFF_Explorer.zip

https://autohotkey.com/
https://github.com/floowsnaake/Starcraft-1-Bot-thingy 星际争霸

FB机器人
https://github.com/facebookresearch/pyrobot
cd ~
mkdir -p low_cost_ws/src
cd ~/low_cost_ws/src
source ~/${virtualenv_name}/bin/activate
git clone --recurse-submodules https://github.com/facebookresearch/pyrobot.git
cd pyrobot/
pip install .

淘宝自动发货机器人
https://github.com/localhost02/Taobao_order_robot

tts
http://zhangjikai.com/text2sound/
https://github.com/hiddentao/google-tts
https://developer.chrome.com/apps/tts
https://github.com/yyx990803/Speech.js
https://github.com/smithclay/sayeasy
https://github.com/5paceManSpiff/ttsmp3

https://github.com/sekaiamber/tts.js

webkitSpeechRecognition
https://www.google.com/intl/en/chrome/demos/speech.html
https://github.com/jediKn8/speechtotext
https://speechnotes.co/
https://speechnotes.co/resources/scriptA2.min.js
https://speechnotes.co/resources/scriptB2.min.js
https://dictation.io/
https://dictation.io/dictation.js

watson-developer-cloud
https://github.com/watson-developer-cloud/node-tts-player
https://github.com/watson-developer-cloud/raspberry-pi-time-weather-demo
https://github.com/watson-developer-cloud/raspberry-pi-speech-to-text

http://www.ibm.com/watson/developercloud/speech-to-text/api/v1/#get_models

http://www.ibm.com/watson/developercloud/speech-to-text.html
https://github.com/watson-developer-cloud/speech-to-text-nodejs

espeak
http://espeak.sourceforge.net/commands.html
http://espeak.sourceforge.net/languages.html
http://espeak.sourceforge.net/data/
brew install espeak
cd /usr/local/Cellar/espeak/1.48.04_1/share/espeak-data/voices
wget http://espeak.sourceforge.net/data/zh_listx.zip
wget http://espeak.sourceforge.net/data/zhy_list.zip
espeak --compile=zh
espeak --compile=zh-yue
espeak "This is a test"
espeak -f <text file>
espeak -v en "[[D,Is Iz sVm f@n'EtIk t'Ekst 'InpUt]]"
espeak -v zh "这里是文字内容"
espeak -vzhy "粤语"

oddcast
http://www.oddcast.com/home/demos/tts/tts_example.php?sitepal

ispeech
http://www.ispeech.org/p/generic/getaudio?text=test%2C&voice=chchinesefemale&speed=0&action=markers
http://www.ispeech.org/p/generic/getaudio?text=test%2C&voice=chchinesefemale&speed=0&action=convert

baidu
https://github.com/skechboy/SpeakIt
http://tts.baidu.com/text2audio?lan=zh&pid=101&ie=UTF-8&text=%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C&_=11111111111
http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=2&text=你要转换的文字
http://fanyi.baidu.com/gettts?lan=en&source=web&text=这里是文字内容
http://tts.baidu.com/text2audio?idx=1&tex=%25E7%2599%25BE%25E5%25BA%25A6%25E8%25AF%25AD%25E9%259F%25B3%25EF%25BC%258C%25E9%259D%25A2%25E5%2590%2591%25E5%25B9%25BF%25E5%25A4%25A7%25E5%25BC%2580%25E5%258F%2591%25E8%2580%2585%25E6%25B0%25B8%25E4%25B9%2585%25E5%2585%258D%25E8%25B4%25B9%25E5%25BC%2580%25E6%2594%25BE%25E8%25AF%25AD%25E9%259F%25B3%25E5%2590%2588%25E6%2588%2590%25E6%258A%2580%25E6%259C%25AF%25E3%2580%2582%25E6%2589%2580%25E9%2587%2587%25E7%2594%25A8%25E7%259A%2584%25E7%25A6%25BB%25E5%259C%25A8%25E7%25BA%25BF%25E8%259E%258D%25E5%2590%2588%25E6%258A%2580%25E6%259C%25AF%25EF%25BC%258C%25E6%25A0%25B9%25E6%258D%25AE%25E5%25BD%2593%25E5%2589%258D%25E7%25BD%2591%25E7%25BB%259C%25E7%258A%25B6%25E5%2586%25B5%25EF%25BC%258C%25E8%2587%25AA%25E5%258A%25A8%25E5%2588%25A4%25E6%2596%25AD%25E4%25BD%25BF%25E7%2594%25A8%25E6%259C%25AC%25E5%259C%25B0%25E5%25BC%2595%25E6%2593%258E%25E6%2588%2596%25E8%2580%2585%25E4%25BA%2591%25E7%25AB%25AF%25E5%25BC%2595%25E6%2593%258E%25EF%25BC%258C%25E8%25BF%259B%25E8%25A1%258C%25E8%25AF%25AD%25E9%259F%25B3%25E5%2590%2588%25E6%2588%2590%25EF%25BC%258C%25E5%2586%258D%25E4%25B9%259F%25E4%25B8%258D%25E7%2594%25A8%25E6%258B%2585%25E5%25BF%2583%25E6%25B5%2581%25E9%2587%258F%25E6%25B6%2588%25E8%2580%2597%25E4%25BA%2586%25EF%25BC%2581&cuid=baidu_speech_demo&cod=2&lan=zh&ctp=1&pdt=1&spd=5&per=3&vol=5&pit=5

google
https://github.com/zlargon/google-tts
https://translate.google.com/translate_tts?ie=UTF-8&q=%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C&tl=zh&total=1&idx=0&textlen=4&tk=883703.737194&client=t&prev=input&ttsspeed=1
http://www.google.com/speech-api/v1/recognize?xjerr=1&client=chromium&lang=zh-CN&maxresults=1
https://github.com/ashafir20/node-google-text-to-speech
https://github.com/olragon/gtts.js
google+tts-api
https://github.com/ajay-gandhi/light-tts

itri
http://tts.itri.org.tw/
http://tts.itri.org.tw/online_tts/display.php
http://tts.itri.org.tw/development/web_service_api.php
http://tts.itri.org.tw/development/javascript_api.php

ivona
https://www.ivona.com/
https://github.com/IonicaBizau/text-to-speech-js

https://github.com/Marak/say.js

text2wave
https://github.com/PatrickStankard/say-p-i

naturalreaders
https://api.naturalreaders.com/v2/tts/?t=测试&r=1&s=1&requesttoken=af7c15ef6e0846703e15a77204bf7176


http://blog.csdn.net/yylsheng/article/details/8364487

say
http://qiita.com/zakuroishikuro/items/0c17acb21f119647c205
https://github.com/hbouvier/node-tts
say "さんをつけろよデコ助野郎！"
say -f sample.txt
say -v Otoya "そぉいっ！！！"
say -v Alex -r 10 "Hello"
say "さんをつけろよデコ助野郎！" -o say.m4a
text2mp3:
say -f script.txt -o greetings.aiff
say 你好 -o 1.m4a
say -v Sin-ji 你好。
say -v Mei-Jia 你好。
say -v Ting-Ting 你好。
say -v ?

MP3转换工具
brew install lame
lame -m m greetings.aiff greetings.mp3

stt

cris
https://github.com/ritazh/speech-to-text-demo


https://github.com/facebookresearch/pytext
python3 -m venv pytext_venv
$ source pytext_venv/bin/activate
(pytext_venv) $ pip install pytext-nlp

https://github.com/google/jax
git clone https://github.com/google/jax
cd jax
python3 build/build.py --enable_cuda
pip3 install -e build
pip3 install -e .


https://github.com/ansible/ansible
并由 Facebook 作为其机器学习的框架发布由强 GPU 支持的加速张量计算（如 NumPy ），其深度神经网络是建立在基于磁盘的 autograd 包上
https://github.com/pytorch/pytorch
https://github.com/alibaba/MNN
创新开发深度学习和强化学习的算法以用于生成歌曲、图像、绘图和其他素材
https://github.com/tensorflow/magenta
https://github.com/tensorflow/magenta-demos

https://github.com/requests/requests
https://github.com/nicolargo/glances
https://github.com/giampaolo/psutil
https://github.com/kootenpv/yagmail
https://github.com/MechanicalSoup/MechanicalSoup
https://github.com/webpy/webpy

https://github.com/mongodb/mongo-python-driver

https://github.com/fxsjy/jieba
https://github.com/baidu/lac
https://github.com/baidu/AnyQ
https://github.com/baidu/Senta

http://ml.apachecn.org/mlia/
https://github.com/apachecn/MachineLearning
https://morvanzhou.github.io/tutorials/
https://github.com/MorvanZhou/tutorials
http://sklearn.apachecn.org/cn/0.19.0/
http://www.magedu.com/72257.html
核心库
https://github.com/scikit-image/scikit-image
https://github.com/numpy/numpy
https://github.com/scipy/scipy
https://github.com/pandas-dev/pandas
https://github.com/vaexio/vaex
可视化 http://www.magedu.com/70783.html
https://github.com/matplotlib/matplotlib
https://github.com/mwaskom/seaborn
https://github.com/bokeh/bokeh
https://github.com/pyecharts/pyecharts
from pyecharts import WordCloud
name = data_10['关键词'].tolist()
value = data_10['出现频率'].tolist()
wordcloud = WordCloud(width=1300, height=620)
wordcloud.add("", name, value, word_size_range=[20, 100])
wordcloud.render('./参考案例HTML/关键词统计词云图.html')
wordcloud
图像词云
from PIL import Image
import numpy as np
from wordcloud import WordCloud, ImageColorGenerator
# 读取原始文本
with open('linuxmi.txt', mode='rt', encoding='utf-8') as fi:
    source_text = fi.read()
# 创建蒙板图像
mask_array = np.array(Image.open('linuxmi.com.jpg'))
image_color = ImageColorGenerator(mask_array)
# 创建词云
wc = WordCloud(mask=mask_array, color_func=image_color, background_color='white').generate(source_text)
# 直接保存在文件中的情况下，用to_file方法
wc.to_file('linuxmi.com.png')
# 用PIL表示
#image_array = wc.to_array()
#img = Image.fromarray(image_array)
#img.show()

https://github.com/plotly/plotly.py
https://github.com/amueller/word_cloud
https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud
https://github.com/fyuanfen/wordcloud
https://github.com/gaussic/weibo_wordcloud
https://github.com/wvengen/d3-wordcloud
https://github.com/MasterScrat/Chatistics
https://gitee.com/zlikun/python-crawler-douban-movie
数据挖掘和数据分析
https://github.com/scikit-learn/scikit-learn
https://www.cnblogs.com/lianyingteng/p/7811126.html
http://sklearn.apachecn.org/cn/0.19.0/index.html
深度学习
https://github.com/keras-team/keras
https://github.com/tensorflow/tensorflow
https://www.tensorflow.org/install/
https://github.com/pytorch/pytorch
https://github.com/fastai/fastai
https://github.com/apache/incubator-mxnet
https://github.com/apache/incubator-mxnet
https://github.com/Theano/Theano
https://github.com/google-research/bert
DeepCreamPy 是一款基于深度学习的工具，通过使用深度神经网络去除马赛克
https://github.com/deeppomf/DeepCreamPy
https://github.com/facebookresearch/Horizon
https://github.com/jantic/DeOldify 照片颜色恢复
https://github.com/tensorflow/adanet AUTOML
https://github.com/deepmind/graph_nets
https://github.com/M-J-Murray/MAMEToolkit
https://github.com/Tencent/PocketFlow

https://github.com/facebookresearch/maskrcnn-benchmark 对象检查
https://conda.io/docs/user-guide/install/macos.html
https://conda.io/miniconda.html

自然语言处理 http://www.magedu.com/71122.html
https://github.com/nltk/nltk
训练中文詞向量
https://github.com/RaRe-Technologies/gensim
pip3 install --upgrade gensim
数据挖掘，统计学，爬虫
https://github.com/scrapy/scrapy
https://github.com/statsmodels/statsmodels
自动控制
https://github.com/autopilot-rs/autopy
https://github.com/python-pillow/Pillow
GUI
https://github.com/flexxui/flexx
https://github.com/cztomczak/cefpython
https://github.com/kivy/kivy
人脸识别
https://github.com/ageitgey/face_recognition
https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py
pip3 install face_recognition
识别照片或文件夹中的面部照片
face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/
在照片或文件夹中找到满是照片的面孔
face_detection  ./folder_with_pictures/
face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/
face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/
face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2
face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/

人脸识别c++
https://github.com/seetaface/SeetaFaceEngine

自动识别
https://github.com/nutonomy/nuscenes-devkit

强化学习
全新的基于 Tensorflow 的框架——Dopamine，旨在为 RL 研究人员提供灵活性、稳定性和可重复性
https://github.com/google/dopamine

家庭自动化平台
https://github.com/home-assistant/home-assistant

Facebook 人工智能实验室推出的最新的物体检测算法实现
https://github.com/facebookresearch/Detectron
https://github.com/facebookresearch/DensePose

AI
https://wit.ai/docs/recipes
https://www.jianshu.com/p/aa8c759cbbab

http://www.tuling123.com/

https://api.ai/

https://github.com/tech-sketch/JuliusForAndroid
https://github.com/julius-speech/julius
https://github.com/zzmp/juliusjs
https://cmusphinx.github.io/

https://github.com/Melissa-AI/Melissa-Core
https://github.com/Melissa-AI/Melissa-Web

https://github.com/Clarifai/clarifai-python
https://github.com/Clarifai/clarifai-javascript

JS可以根据既定的颜色样式在草图上绘制、或在草图上创建绘制自己的颜色风格、亦或者将现有的风格转换至另一种风格
https://github.com/lllyasviel/style2paints
https://s2p.moe/
https://style2paints.github.io/README_zh

未配对和成对的图像到图像转换
https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix
语音风格转移将任意人的声音转换为著名的英国女演员 Kate Winslet 的声音
https://github.com/andabi/deep-voice-conversion
将源图像转换成不同的发型、皮肤类型、年龄、性别和不同的情绪。
https://github.com/yunjey/stargan
Uber AI Labs 构建了这个深度概率编程库，用于简化其运输服务的预测和优化收益。 任何处理概率建模的人都会对这个库感兴趣。

年龄和性别深度学习 --class_type gender
https://github.com/dpressel/rude-carnie
年龄
python3 guess.py --model_type inception --model_dir ./22801 --filename test1.png
性别
python3 guess.py --model_type inception --model_dir ./21936 --filename test1.png
下载后解压到本地工程里面的22801目录 http://pan.baidu.com/s/1mhLBIHy
wget http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz
https://blog.csdn.net/nanjingdreamfly/article/details/62418036

https://github.com/uber/pyro
ParlAI 是一个用于在各种公开可用的对话数据集上训练和评估 AI 模型的框架。 ParlAI 是一个在为研究人员提供访问许多流行数据集的权限的同时，也可以共享和测试对话模型的统一框架。
https://github.com/uber-research/plato-research-dialogue-system
这是柏拉图对话系统，一个开发会话AI代理的灵活平台。
https://github.com/uber/ludwig
https://uber.github.io/ludwig/examples/
Ludwig是一个基于TensorFlow构建的工具箱，可以训练和测试深度学习模型
https://github.com/myleott/mnist_png

https://github.com/facebookresearch/ParlAI
Facets 一种可视化机器学习数据集的工具可视化的关键是跨多个数据集的异常检测和分布比较。 有趣的值（例如，大量的缺失数据，或跨多个数据集非常不同的特征分布）以红色突出显示。
https://github.com/PAIR-code/facets
该项目基于 Gatys 的艺术风格的神经算法， Johnson 对实时样式转换和超分辨率的感知损失以及 Ulyanov 的实例规范化的组合
https://github.com/lengstrom/fast-style-transfer
图片风格转换工具
https://github.com/NVIDIA/FastPhotoStyle
FastText 是一个有效学习单词意思和句子分类的库。
https://github.com/facebookresearch/fastText
AirSim 是一款基于 Unreal Engine 的无人机，汽车的模拟器
https://github.com/Microsoft/AirSim
https://github.com/simondlevy/AirSimTensorFlow
Deep Image Prior 是基于神经网络的修复图像工具 – 并不是机器学习。
去噪、去水印、超分辨率
https://github.com/DmitryUlyanov/deep-image-prior

局部着色工具
https://github.com/msracver/Deep-Exemplar-based-Colorization
快速准确的神经网络训练
https://github.com/fastai/fastai
通过运用深度神经网络来从下一代 DNA 序列数据中预测遗传变异
https://github.com/google/deepvariant
快速的图像增强库，它易于使用并封装了其他一些图像处理库的功能
https://github.com/albu/albumentations
MangaCraft 是当前最佳的半自动化漫画着色项目
https://github.com/lllyasviel/MangaCraft
http://mangacraft.net/
用于强化学习和机器人研究的模拟器
https://github.com/byu-pccl/holodeck
基于神经网络的视觉生成器和混合器，能够利用神经网络进行 VJing 过程
https://github.com/keijiro/Ngx
是一个使用无监督和监督学习进行股票预测的开源项目，通过堆叠神经网络的实现来预测股票的盈利值
https://github.com/VivekPa/AlphaAI
Tencent-ml-images 是包含当前最大的多标签图像数据库(ml-images) 的开源项目，共由 11166 个图像类别，17609752 张训练图像和 88739  哥验证数据的URL 地址组成。此外，通过迁移学习，将ml-images 上预训练好的ResNet-101 模型迁移到 ImageNet  数据库上，能够实现 80.73% 的 Top1 精度。
https://github.com/Tencent/tencent-ml-images

https://github.com/microsoft/onnxruntime

git clone https://github.com/facebookresearch/ParlAI.git
cd ParlAI; python3 setup.py develop
python examples/display_data.py -t babi:task1k:1
python examples/display_data.py -t babi:task1k:1,squad -n 100

InstaGAN：实例感知图像转换
https://github.com/sangwoomo/instagan
图像标注
https://github.com/tzutalin/labelImg
深度学习库
https://github.com/tensorlayer/tensorlayer
神经网络训练
https://github.com/tensorpack/tensorpack
一系列Docker图像（及其生成器），可让您快速设置深度学习研究环境
https://github.com/ufoym/deepo
《动手学深度学习》
https://zh.d2l.ai/
一种多用户分布式计算环境，用于在基于英特尔®至强®可扩展处理器的系统上运行DL模型培训实验
https://github.com/intelAI/Nauta
Neo AI是机器学习模型的编译器和运行时。编译器优化各种目标硬件的机器学习模型。运行时在目标硬件上执行模型。
https://github.com/neo-ai/neo-ai-dlr
用于超级参数调整的Google Vizier的开源实现
https://github.com/tobegit3hub/advisor
Learning to Rank in TensorFlow
https://github.com/tensorflow/ranking
阿布量化交易系统(股票，期权，期货，比特币，机器学习) 基于python的开源量化交易，量化投资架构
https://github.com/bbfamily/abu
https://github.com/maxmon/abu_ml
http://www.abuquant.com/lecture/lecture_0.html
学习Q＃和量子计算的编程练习
https://github.com/Microsoft/QuantumKatas
ML.NET是.NET的开源和跨平台机器学习框架
https://github.com/dotnet/machinelearning
Tinn 是一个用 C99 编写的仅有 200 行代码微型神经网络库，无依赖，轻量级
https://github.com/glouw/tinn
开源的卷积神经网络和医疗影像分析平台 NiftyNet
https://github.com/NifTK/NiftyNet
deepfake 的深度学习技术，这款工具本来的用途是用来识别和交换图片、视频中人物脸部图像的工具
https://github.com/deepfakes/faceswap
内容感知图像压缩/扩展库 Caire
https://github.com/esimov/caire
Apache Fluo 是  Google Percolator（搜索索引）的开源实现，允许用户对存储在 Apache Accumulo 中的大型数据集进行增量更新，而无需重新处理
https://github.com/apache/fluo
多数据流实时分布式分析系统 Confluo
https://github.com/ucbrise/confluo
Apache Traffic Control 是一个分布式、可扩展的冗余解决方案，可用于构建、监视和配置大型内容交付网络（CDN），项目起源于 Traffic Server ，实现
https://github.com/apache/trafficcontrol
万维网之父 Tim Berners-Lee 爵士对今天的中心化 Web 非常不满，他想要拯救互联网，方法是重新去中心化
https://github.com/solid/solid
TensorSpace是一套用于构建神经网络3D可视化应用的框架
https://github.com/tensorspace-team/tensorspace
Sparser 是一个用于解析原始数据的解析引擎，由斯坦福大学开源，用于非结构化和半结构化的数据格式，例如 JSON、Avro 和 Parquet
https://github.com/stanford-futuredata/sparser
Tink 是一个多语言、跨平台的加密开发库，提供安全，易于正确使用和难以滥用的加密 API，目前 Tink 已经被用于保护许多谷歌内部产品的数据，如 AdMob、Google Pa
https://github.com/google/tink
Sourcegraph 是一款能够根据语义来把 Web 上的开源代码编入索引的代码搜索浏览工具，提供代码搜索和代码语义智能感知功能
https://github.com/sourcegraph/sourcegraph

手势识别
https://github.com/alvinwan/hand-tracking-pong
https://github.com/victordibia/handtrack.js/
https://github.com/MrEliptik/HandPose
https://victordibia.github.io/handtrack.js/#/
https://github.com/victordibia/handtracking

姿势检测
https://github.com/tensorflow/tfjs-models/tree/master/posenet

用于从大规模图形结构数据生成嵌入的软件
https://github.com/facebookresearch/PyTorch-BigGraph
pip3 install torchbiggraph

动漫人物图片自动修复，去马赛克，填补，去瑕疵
https://github.com/youyuge34/Anime-InPainting
https://github.com/knazeri/edge-connect
http://places2.csail.mit.edu/download.html
http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html
https://github.com/pathak22/context-encoder
https://people.eecs.berkeley.edu/~pathak/context_encoder/

微信机器人
https://github.com/littlecodersh/ItChat
https://itchat.readthedocs.io/zh/latest/
https://github.com/youfou/wxpy
https://wxpy.readthedocs.io/zh/latest/
https://github.com/Urinx/WeixinBot
https://github.com/node-webot/weixin-robot
https://github.com/nodeWechat/wechat4u
QQ机器人
https://github.com/Yinzo/SmartQQBot
https://github.com/newbe36524/Newbe.Mahua.Framework
http://www.newbe.pro/2019/01/25/Newbe.Mahua/Start-With-Mahua-In-V2.0/
http://www.newbe.pro/
逗音机器人
https://github.com/wangshub/Douyin-Bot
简单、灵活、优雅的中文语音对话机器人/智能音箱项目
https://github.com/wzpan/wukong-robot
https://wukong.hahack.com/#/install
https://wukong.hahack.com/#/README
聊天机器人，使用TensorFlow实现的Sequence to Sequence的聊天机器人模型
https://github.com/zhaoyingjun/chatbot
https://github.com/qhduan/Seq2Seq_Chatbot_QA
https://github.com/dingdang-robot/dingdang-robot
https://github.com/RasaHQ/rasa_core
https://github.com/RasaHQ/rasa
https://github.com/littleredhat1997/chatbot-aiml-webqa
机器人视觉 移动机器人 VS-SLAM ORB-SLAM2 深度学习目标检测 yolov3 行为检测 opencv PCL 机器学习 无人驾驶
https://github.com/Ewenwan/MVision
https://github.com/Ewenwan/AI-Security-Learning
https://github.com/ifzhang/ByteTrack
自动驾驶
https://github.com/ApolloAuto/apollo
https://github.com/carla-simulator/carla
https://github.com/commaai/openpilot
https://comma.ai/
https://github.com/jeankalud/neo/tree/tesla_giraffe/giraffe/tesla
https://github.com/commaai/neo
https://github.com/commaai/openpilot-tools
https://github.com/ApolloAuto/apollo
https://github.com/autonomousdrivingkr/Awesome-Autonomous-Driving
https://github.com/sidroopdaska/SelfDrivingRCCar
https://github.com/daviddao/deep-autonomous-driving-papers
https://github.com/sagar448/Self-Driving-Car-3D-Simulator-With-CNN
https://github.com/aleju/self-driving-truck
https://github.com/Microsoft/AirSim
https://github.com/wwoody827/cvpr-2018-autonomous-driving-autopilot-solution
https://github.com/HadXu/auto-drive

自动驾驶数据集
https://level5.lyft.com/dataset/?source=post_page---------------------------

阿波罗指导计算机 - 或简称为“AGC”
https://github.com/virtualagc/virtualagc
http://www.ibiblio.org/apollo/

强化学习
https://github.com/rll/rllab
https://github.com/keras-rl/keras-rl
https://github.com/dennybritz/reinforcement-learning

训练关键词
https://github.com/kitt-ai/snowboy
https://snowboy.kitt.ai/

https://liuhuanyong.github.io/
文本三元组抽取
https://github.com/liuhuanyong/EventTriplesExtraction
WordForm,针对中文词语的笔画拆解，偏旁查询，拼音转换接口
https://github.com/liuhuanyong/ChineseCixing
基于Textrank算法的文本摘要抽取与关键词抽取，基于TFIDF算法的关键词抽取
https://github.com/liuhuanyong/KeyInfoExtraction
事件三元组抽取
https://github.com/liuhuanyong/EventTriplesExtraction

医药领域知识图谱
https://github.com/liuhuanyong/QASystemOnMedicalKG
医疗领域知识图谱的问答系统
https://github.com/zhihao-chen/QASystemOnMedicalGraph

用于句子中时间词的抽取和转换
https://github.com/zhanzecheng/Time_NLP
100+ Chinese Word Vectors 上百种预训练中文词向量
https://github.com/Embedding/Chinese-Word-Vectors
最全中华古诗词数据库,  唐宋两朝近一万四千古诗人,  接近5.5万首唐诗加26万宋诗.  两宋时期1564位词人，21050首词。
https://github.com/chinese-poetry/chinese-poetry
csvSQL 可以让你通过SQL来查看csv文件数据
https://github.com/jackeyGao/csvSQL
https://github.com/alex/csv-sql
古诗词语料库
https://github.com/panhaiqi/AncientPoetry
https://github.com/huangjianke/weapp-poem/
简繁转换
https://github.com/BYVoid/OpenCC
brew install opencc
opencc -i t2s.txt -o t2s.log -c t2s.json #繁體到簡體
opencc -i s2t.txt -o s2t.log -c s2t.json #簡體到繁體
s2t.json Simplified Chinese to Traditional Chinese 簡體到繁體
t2s.json Traditional Chinese to Simplified Chinese 繁體到簡體
s2tw.json Simplified Chinese to Traditional Chinese (Taiwan Standard) 簡體到臺灣正體
tw2s.json Traditional Chinese (Taiwan Standard) to Simplified Chinese 臺灣正體到簡體
s2hk.json Simplified Chinese to Traditional Chinese (Hong Kong Standard) 簡體到香港繁體（香港小學學習字詞表標準）
hk2s.json Traditional Chinese (Hong Kong Standard) to Simplified Chinese 香港繁體（香港小學學習字詞表標準）到簡體
s2twp.json Simplified Chinese to Traditional Chinese (Taiwan Standard) with Taiwanese idiom 簡體到繁體（臺灣正體標準）並轉換爲臺灣常用詞彙
tw2sp.json Traditional Chinese (Taiwan Standard) to Simplified Chinese with Mainland Chinese idiom 繁體（臺灣正體標準）到簡體並轉換爲中國大陸常用詞彙
t2tw.json Traditional Chinese (OpenCC Standard) to Taiwan Standard 繁體（OpenCC 標準）到臺灣正體
t2hk.json Traditional Chinese (OpenCC Standard) to Hong Kong Standard 繁體（OpenCC 標準）到香港繁體（香港小學學習字詞表標準）
在线工具
https://github.com/jackeyGao/online_tools
Convert your dayone journal to pdf book.
https://github.com/jackeyGao/dayone2PDF
一个测颜值的小程序，只为最美的你~
https://github.com/zce/weapp-beauty/
统计你的微信连接多少人，包括好友、群聊人数，并提供去重后的长图结果
https://github.com/Bravest-Ptt/WxConn
Scrapy抓取简书热门生成电子书发送到Kindle http://jackeygao.github.io/jianshuHot
https://github.com/jackeyGao/jianshuHot
Markdown
https://github.com/joemccann/dillinger
https://github.com/adam-p/markdown-here
https://github.com/prettier/prettier
https://github.com/knsv/mermaid
https://github.com/GitbookIO/gitbook
https://github.com/markedjs/marked
https://github.com/jgm/pandoc
https://github.com/benweet/stackedit
https://github.com/BoostIO/Boostnote
https://github.com/notable/notable
https://github.com/marktext/marktext
https://github.com/docsifyjs/docsify
https://github.com/nhn/tui.editor
正则工具
https://github.com/gskinner/regexr/


数据集
http://www.ipcv.org/category/code-data/dataset/
http://www.ifp.illinois.edu/~vuongle2/helen/
http://www.robots.ox.ac.uk/~vgg/data/hands/index.html
http://cogcomp.org/Data/Car/
http://www.vision.caltech.edu/archive.html
http://www.vision.caltech.edu/Image_Datasets/CaltechPedestrians/
http://vision.ics.uci.edu/datasets/
http://www.vision.caltech.edu/Image_Datasets/CaltechPedestrians/datasets/USA/
https://engineering.purdue.edu/elab/eVDS/
http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html
http://image-net.org/download
http://elderlab.yorku.ca/SOD/#download
http://hlt.suda.edu.cn/index.php/Nlpcc-2019-shared-task
https://voice.mozilla.org/en/datasets
http://sighan.cs.uchicago.edu/bakeoff2005/
https://dumps.wikimedia.org/zhwiki/
https://dumps.wikimedia.org/zhwiki/20190401/zhwiki-20190401-pages-articles.xml.bz2
http://shannon.cs.illinois.edu/DenotationGraph/
http://cocodataset.org/#overview
http://sidgan.me/technical/2016/01/09/Exploring-Datasets
http://www.statmt.org/europarl/
https://www.isi.edu/natural-language/download/hansard/
http://www.statmt.org/

https://rajpurkar.github.io/SQuAD-explorer/
https://github.com/deepmind/rc-data
http://jmcauley.ucsd.edu/data/amazon/qa/
http://voxforge.org/
http://www.openslr.org/12/
https://catalog.ldc.upenn.edu/LDC93S1

http://www.crowdhuman.org/download.html
https://arxiv.org/abs/1805.00123

https://arxiv.org/pdf/1906.06337.pdf 这是一套端到端系统，生成的视频拥有与音频同步的唇部运动和自然的面部表情，例如眨眼和皱眉
https://arxiv.org/pdf/1710.06425.pdf 用于机器人抓取的域随机化和模型生成
https://arxiv.org/pdf/1809.10790.pdf 用于抓取家居物品的语义机器人抓取的深度物体姿态估计算法

https://github.com/arcelien/pba
有效学习增强政策

https://mp.weixin.qq.com/s/dnnby0KNLFWITx_uugUrvQ
降维：
https://en.wikipedia.org/wiki/Dimensionality_reduction
PCA：
https://en.wikipedia.org/wiki/Principal_component_analysis
协方差矩阵：
https://en.wikipedia.org/wiki/Covariance_matrix
特征向量：
https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors
多变量统计/多元统计：
https://en.wikipedia.org/wiki/Multivariate_statistics
高斯分布：
https://en.wikipedia.org/wiki/Normal_distribution
概率分布：
https://en.wikipedia.org/wiki/Probability_distribution
马氏距离：
https://en.wikipedia.org/wiki/Mahalanobis_distance
自动编码器：
https://en.wikipedia.org/wiki/Autoencoder
人工神经网络：
https://en.wikipedia.org/wiki/Artificial_neural_network
有效数据编码：
https://en.wikipedia.org/wiki/Feature_learning
无监督：
https://en.wikipedia.org/wiki/Unsupervised_learning
多层感知器：
https://en.wikipedia.org/wiki/Multilayer_perceptron
NASA 数据下载：
http://data-acoustics.com/measurements/bearing-faults/bearing-4/

http://kaldi-asr.org/models.html
http://www.openslr.org/resources.php
wget -c -t 0 http://www.openslr.org/resources/33/data_aishell.tgz
axel -n 3 -av http://cn-mirror.openslr.org/resources/38/ST-CMDS-20170001_1-OS.tar.gz
wget -c -t 0 http://119.28.8.46/data_aishell.tgz
https://storage.googleapis.com/bert_models/2018_11_03/chinese_L-12_H-768_A-12.zip

SVG
https://github.com/Kozea/pygal
https://mp.weixin.qq.com/s/qHQ2Rd4X7hZpZTZUMJXC7w

视觉库
https://github.com/pytorch/vision
https://github.com/chainer/chainercv
https://github.com/kuangliu/torchcv
http://host.robots.ox.ac.uk:8080/leaderboard/displaylb.php?challengeid=11&compid=3#KEY_FPNSSD
https://github.com/python-pillow/Pillow
https://github.com/uploadcare/pillow-simd
https://github.com/pytorch/accimage
https://python-pillow.org/pillow-perf/
https://github.com/chainer/chainer
https://github.com/mitmul/chainer-faster-rcnn
https://github.com/rbgirshick/py-faster-rcnn
https://github.com/ShaoqingRen/faster_rcnn
https://keras.io/applications/
https://github.com/keras-rl/keras-rl
https://github.com/OlafenwaMoses/ImageAI
https://github.com/OlafenwaMoses/IntelliP

模型（model）：计算机层面的认知
学习算法（learning algorithm），从数据中产生模型的方法
数据集（data set）：一组记录的合集
示例（instance）：对于某个对象的描述
样本（sample）：也叫示例
属性（attribute）：对象的某方面表现或特征
特征（feature）：同属性
属性值（attribute value）：属性上的取值
属性空间（attribute space）：属性张成的空间
样本空间/输入空间（samplespace）：同属性空间
特征向量（feature vector）：在属性空间里每个点对应一个坐标向量，把一个示例称作特征向量
维数（dimensionality）：描述样本参数的个数（也就是空间是几维的）
学习（learning）/训练（training）：从数据中学得模型
训练数据（training data）：训练过程中用到的数据
训练样本（training sample）:训练用到的每个样本
训练集（training set）：训练样本组成的集合
假设（hypothesis）：学习模型对应了关于数据的某种潜在规则
真相（ground-truth）:真正存在的潜在规律
学习器（learner）：模型的另一种叫法，把学习算法在给定数据和参数空间的实例化
预测（prediction）：判断一个东西的属性
标记（label）：关于示例的结果信息，比如我是一个“好人”。
样例（example）：拥有标记的示例
标记空间/输出空间（label space）：所有标记的集合
分类（classification）：预测是离散值，比如把人分为好人和坏人之类的学习任务
回归（regression）：预测值是连续值，比如你的好人程度达到了0.9，0.6之类的
二分类（binary classification）：只涉及两个类别的分类任务
正类（positive class）：二分类里的一个
反类（negative class）：二分类里的另外一个
多分类（multi-class classification）：涉及多个类别的分类
测试（testing）：学习到模型之后对样本进行预测的过程
测试样本（testing sample）：被预测的样本
聚类（clustering）：把训练集中的对象分为若干组
簇（cluster）：每一个组叫簇
监督学习（supervised learning）：典范--分类和回归
无监督学习（unsupervised learning）：典范--聚类
未见示例（unseen instance）：“新样本“，没训练过的样本
泛化（generalization）能力：学得的模型适用于新样本的能力
分布（distribution）：样本空间的全体样本服从的一种规律
独立同分布（independent and identically distributed，简称i,i,d.）:获得的每个样本都是独立地从这个分布上采样获得的。

儿童学习
https://projects.raspberrypi.org/en/codeclub
https://projects.raspberrypi.org/en/projects
https://scratch.mit.edu/
https://scratch.mit.edu/download
https://scratch.mit.edu/projects/editor/?tutorial=getStarted
https://github.com/backups123/Scratch-Project-Editor-With-Flash-Builder
https://github.com/LLK/scratch-flash
http://scratch.codepku.com/editor
http://www.kidsprogram.com.cn/home/kp/KidsProgram.html
https://www.tynker.com/ide/
https://github.com/yst199324/scratch
https://github.com/ustczhangyang/Programming-education-website
https://github.com/sdu75/scratch

https://opensource.com/article/17/3/logo-scratch-teach-programming-kids
https://scratch.mit.edu/projects/editor/
https://en.scratch-wiki.info/wiki/Scratch_2.0
https://www.amazon.com/CanaKit-Raspberry-Starter-Premium-Black/dp/B07BCC8PK7/ref=pd_sim_14_5/139-8014457-4255447?_encoding=UTF8&pd_rd_i=B07BCC8PK7&pd_rd_r=88e72822-628a-11e9-b12e-253105b62179&pd_rd_w=5iOd5&pd_rd_wg=1rDxT&pf_rd_p=90485860-83e9-4fd9-b838-b28a9b7fda30&pf_rd_r=58ZZGY36WVQT3XC208V0&psc=1&refRID=58ZZGY36WVQT3XC208V0
https://scratch.mit.edu/download/scratch2

https://mp.weixin.qq.com/s/XZft9e5WH6zR3O7f8jc0UQ
https://linux.cn/article-10644-1.html
https://www.raspbian.org/RaspbianFAQ
https://www.raspberrypi.org/downloads/noobs/
https://www.raspberrypi.org/documentation/installation/noobs.md
https://www.raspberrypi.org/
https://www.raspberrypi.org/products/

https://github.com/Drewsif/PiShrink

PaddleHub是基于PaddlePaddle开发的预训练模型管理工具，可以借助预训练模型更便捷地开展迁移学习工作。
https://github.com/PaddlePaddle/PaddleHub
https://github.com/PaddlePaddle/PaddleHub/wiki/PaddleHub%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7
pip3 search paddlepaddle paddlehub
pip3 install paddlehub==1.0.1
pip3 install paddlepaddle==1.5.1

https://www.paddlepaddle.org.cn/hubdetail?name=lac&en_category=LexicalAnalysis
https://github.com/PaddlePaddle/models
https://www.paddlepaddle.org.cn/hublist

$ hub search
模型：
lac词法分析 百度自建数据集
Lexical Analysis of Chinese，简称 LAC，是一个联合的词法分析模型，能整体性地完成中文分词、词性标注、专名识别任务。在百度自建数据集上评测，LAC效果：Precision=88.0%，Recall=88.7%，F1-Score=88.4%。该PaddleHub Module支持预测。
hub install lac==1.1.1
# 使用百度LAC词法分析工具进行分词
hub run lac --input_text "今天是个好日子"

senta_bilstm 使用百度Senta情感分析模型对句子进行预测
情感倾向分析（Sentiment Classification，简称Senta）针对带有主观描述的中文文本，可自动判断该文本的情感极性类别并给出相应的置信度，能够帮助企业理解用户消费习惯、分析热点话题和危机舆情监控，为企业提供有利的决策支持。该模型基于一个双向LSTM结构，情感类型分为积极、消极。该PaddleHub Module支持预测和Fine-tune。
hub install senta_bilstm==1.0.1
hub run senta_bilstm --input_text "这家餐厅很好吃"
hub run senta_bilstm --input_text "今天是个好日子"
hub run senta_bilstm --input_file test.txt

senta_lstm
情感倾向分析（Sentiment Classification，简称Senta）针对带有主观描述的中文文本，可自动判断该文本的情感极性类别并给出相应的置信度，能够帮助企业理解用户消费习惯、分析热点话题和危机舆情监控，为企业提供有利的决策支持。该模型基于一个LSTM结构，情感类型分为积极、消极。该PaddleHub Module支持预测和Fine-tune。
hub install senta_lstm
hub run senta_lstm --input_text "这家餐厅很好吃"

senta_gru
情感倾向分析（Sentiment Classification，简称Senta）针对带有主观描述的中文文本，可自动判断该文本的情感极性类别并给出相应的置信度，能够帮助企业理解用户消费习惯、分析热点话题和危机舆情监控，为企业提供有利的决策支持。该模型基于一个GRU结构，情感类型分为积极、消极。该PaddleHub Module支持预测和Fine-tune。
hub install senta_gru
hub run senta_gru --input_text "这家餐厅很好吃"

senta_cnn
情感倾向分析（Sentiment Classification，简称Senta）针对带有主观描述的中文文本，可自动判断该文本的情感极性类别并给出相应的置信度，能够帮助企业理解用户消费习惯、分析热点话题和危机舆情监控，为企业提供有利的决策支持。该模型基于一个CNN结构，情感类型分为积极、消极。该PaddleHub Module支持预测和Fine-tune。
hub install senta_cnn
hub run senta_cnn --input_text "这家餐厅很好吃"

senta_bow
情感倾向分析（Sentiment Classification，简称Senta）针对带有主观描述的中文文本，可自动判断该文本的情感极性类别并给出相应的置信度，能够帮助企业理解用户消费习惯、分析热点话题和危机舆情监控，为企业提供有利的决策支持。该模型基于一个BOW结构，情感类型分为积极、消极。该PaddleHub Module支持预测和Fine-tune。
hub install senta_bow
hub run senta_bow --input_text "这家餐厅很好吃"

lm_lstm
语言模型（Langauage Model，LM）采用了序列任务常用的RNN网络，网络结构为一个两层的LSTM网络，根据LSTM的结果去预测下一个词出现的概率。其预训练数据集为PTB数据集。PTB数据集的词汇表大小为10000，预训练的word embedding维度大小是200。该PaddleHub Module可支持预测。
hub install lm_lstm
hub run lm_lstm --input_text "the plant which is owned by <unk> & <unk> co. was under contract with <unk> to make the cigarette filter"

word2vec_skipgram语义模型 海量百度搜索数据集
Word2vec是常用的词嵌入（word embedding）模型。该PaddleHub Module基于Skip-gram模型，在海量百度搜索数据集下预训练得到中文单词预训练词嵌入。其支持Fine-tune。Word2vec的预训练数据集的词汇表大小为1700249，word embedding维度为128。
hub install word2vec_skipgram

simnet_bow 百度海量搜索数据
SimNet是一个计算短文本相似度的模型，可以根据用户输入的两个文本，计算出相似度得分。该PaddleHub Module基于百度海量搜索数据进行训练，支持命令行和Python接口进行预测
hub install simnet_bow
hub run simnet_bow --text_1 "这道题太难了" --text_2 "这道题不简单"

emotion_detection_textcnn
对话情绪识别（Emotion Detection，简称EmoTect）专注于识别智能对话场景中用户的情绪，针对智能对话场景中的用户文本，自动判断该文本的情绪类别并给出相应的置信度，情绪类型分为积极、消极、中性。该模型基于TextCNN（多卷积核CNN模型），能够更好地捕捉句子局部相关性。该PaddleHub Module预训练数据集为百度自建数据集，支持预测和Fine-tune。
hub install emotion_detection_textcnn
hub run emotion_detection_textcnn --input_text "今天天气真好"
https://www.paddlepaddle.org.cn/hubdetail?name=emotion_detection_textcnn&en_category=SentimentAnalysis

ernie文本分类 百科类、资讯类、论坛对话类数据等中文语料
ERNIE通过建模海量数据中的词、实体及实体关系，学习真实世界的语义知识。相较于BERT学习原始语言信号，ERNIE直接对先验语义知识单元进行建模，增强了模型语义表示能力，以Transformer为网络基本组件，以Masked Bi-Language Model和Next Sentence Prediction为训练目标，通过预训练得到通用语义表示，再结合简单的输出层，应用到下游的NLP任务，在多个任务上取得了SOTA的结果。其可用于文本分类、序列标注、阅读理解等任务。预训练数据集为百科类、资讯类、论坛对话类数据等中文语料。该PaddleHub Module可支持Fine-tune。
hub install ernie==1.0.2
https://www.paddlepaddle.org.cn/hubdetail?name=ernie&en_category=SemanticModel

elmo语义模型 百科类数据集
ELMo是重要的通用语义表示模型之一，以双向LSTM为网路基本组件，以Language Model为训练目标，基于百科类数据预训练，通过预训练得到通用的语义表示，将通用的语义表示作为Feature迁移到下游NLP任务中，会显著提升下游任务的模型性能。该PaddleHub Module仅支持Fine-tune。ELMo的预训练数据集的词汇表大小为52445，ELMo embedding维度为1024。
hub install elmo

bert_chinese_L-12_H-768_A-12 中文维基百科数据
BERT是一个迁移能力很强的通用语义表示模型，以Transformer为网络基本组件，以Masked Bi-Language Model和Next Sentence Prediction为训练目标，通过预训练得到通用语义表示，再结合简单的输出层，应用到下游的NLP任务，在多个任务上取得了SOTA的结果。其可用于文本分类、序列标注、阅读理解的任务。预训练数据集为中文维基百科数据。该PaddleHub Module只支持Fine-tune。当该PaddleHub Module用于Fine-tune时，其输入是单文本（如Fine-tune的任务为情感分类等）或文本对（如Fine-tune任务为文本语义相似度匹配等）。
hub install bert_chinese_L-12_H-768_A-12

bert_cased_L-12_H-768_A-12 英文维基百科
bert_uncased_L-12_H-768_A-12 英文维基百科
bert_cased_L-24_H-1024_A-16 英文维基百科
bert_uncased_L-24_H-1024_A-16 英文维基百科
bert_multi_cased_L-12_H-768_A-12 每种语言对应的维基百科语料库

ssd_mobilenet_v1_pascal图片目标检测
# 使用SSD检测模型对图片进行目标检测，检测结果如下图所示
hub run ssd_mobilenet_v1_pascal --input_path ../test-images/animal/3.jpg

yolov3_coco2017对象诊断
YOLOv3是由Joseph Redmon和Ali Farhadi提出的单阶段检测器, 该检测器与达到同样精度的传统目标检测方法相比，推断速度能达到接近两倍。 YOLOv3将输入图像分成S*S个格子，每个格子预测B个bounding box，每个bounding box预测内容包括: Location(x, y, w, h)、Confidence Score和C个类别的概率，因此YOLOv3输出层的channel数为S*S*B*(5 + C)。YOLOv3的loss函数由三部分组成：Location误差，Confidence误差和分类误差。该PaddleHub Module预训练数据集为COCO2017，可支持预测。
速度和精度均衡的目标检测网络，相比于原作者darknet中的YOLO v3实现，PaddlePaddle实现参考了论文Bag of Tricks for Image Classification with Convolutional Neural Networks 增加了mixup，label_smooth等处理，精度(mAP(0.5：0.95))相比于原作者提高了4.7个绝对百分点，在此基础上加入synchronize batch normalization, 最终精度相比原作者提高5.9个绝对百分点。
hub run yolov3_coco2017 --input_path ../test-images/animal/3.jpg
https://www.paddlepaddle.org.cn/hubdetail?name=yolov3_coco2017&en_category=ObjectDetection

faster_rcnn_coco2017
Faster_RCNN是两阶段目标检测器。通过对图像生成候选区域，提取特征，判别特征类别并修正候选框位置。Faster_RCNN整体网络可以分为4个主要内容，一是ResNet-50作为基础卷积层，二是区域生成网络，三是Rol Align，四是检测层。Faster_RCNN是在MS-COCO数据集上预训练的模型。该PaddleHub Module可支持预测。
hub install faster_rcnn_coco2017
hub run faster_rcnn_coco2017 --input_path ../test-images/animal/3.jpg

Mask-RCNN
经典的两阶段框架，在Faster R-CNN模型基础上添加分割分支，得到掩码结果，实现了掩码和类别预测关系的解藕，可得到像素级别的检测结果。

RetinaNet
经典的一阶段框架，由ResNet主干网络、FPN结构、和两个分别用于回归物体位置和预测物体类别的子网络组成。在训练过程中使用Focal Loss，解决了传统一阶段检测器存在前景背景类别不平衡的问题，进一步提高了一阶段检测器的精度。

pyramidbox_face_detection
PyramidBox是一种基于SSD的单阶段人脸检测器，它利用上下文信息解决困难人脸的检测问题。PyramidBox在六个尺度的特征图上进行不同层级的预测。该工作主要包括以下模块：LFPN、PyramidAnchors、CPM、Data-anchor-sampling。该PaddleHub Module的预训练数据集为WIDER FACE数据集，可支持预测。
PyramidBox 模型是百度自主研发的人脸检测模型，利用上下文信息解决困难人脸的检测问题，网络表达能力高，鲁棒性强。于18年3月份在WIDER Face数据集上取得第一名
hub install pyramidbox_face_detection
hub run pyramidbox_face_detection --input_path ../test-images/face/1.jpg
hub run pyramidbox_face_detection --input_file test.txt
https://github.com/PaddlePaddle/models/tree/develop/PaddleCV/face_detection

vgg19_imagenet
VGG是牛津大学计算机视觉组和DeepMind在2014年提出的一种图像分类模型。该系列模型探索了卷积神经网络的深度与其性能之间的关系，通过实验证明了增加网络的深度能够在一定程度上影响网络最终的性能，到目前为止，VGG仍然被许多其他图像任务用作特征提取的BackBone网络。该PaddleHub Module结构为VGG19，基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
在AlexNet的基础上使用3*3小卷积核，增加网络深度，具有很好的泛化能力
hub install vgg19_imagenet==1.0.0
hub install vgg16_imagenet==1.0.0
hub install vgg13_imagenet==1.0.0
hub install vgg11_imagenet==1.0.0
hub run vgg19_imagenet --input_path ../test-images/fruit/1.jpg

shufflenet_v2_imagenet
ShuffleNet V2是由旷视科技在2018年提出的轻量级图像分类模型，该模型通过pointwise group convolution和channel shuffle两种方式，在保持精度的同时大大降低了模型的计算量。该PaddleHub Module结构为ShuffleNet V2，基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
ECCV2018，轻量级CNN网络，在速度和准确度之间做了很好地平衡。在同等复杂度下，比ShuffleNet和MobileNetv2更准确，更适合移动端以及无人车领域
hub install shufflenet_v2_imagenet==1.0.0
hub run shufflenet_v2_imagenet --input_path ../test-images/fruit/5.jpg

se_resnext50_32x4d_imagenet
Squeeze-and-Excitation Networks是由Momenta在2017年提出的一种图像分类结构。该结构通过对特征通道间的相关性进行建模，把重要的特征进行强化来提升准确率。SE_ResNeXt基于ResNeXt模型添加了SE Block，并获得了2017 ILSVR竞赛的冠军。该PaddleHub Module结构为SE_ResNeXt50_32x4d，基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
在ResNeXt 基础、上加入了SE（Sequeeze-and-Excitation） 模块，提高了识别准确率，在ILSVRC 2017 的分类项目中取得了第一名
hub install se_resnext50_32x4d_imagenet==1.0.0
hub install se_resnext101_32x4d_imagenet==1.0.0

resnet_v2_50_imagenet
ResNet系列模型是图像分类领域的重要模型之一，模型中提出的残差单元有效地解决了深度网络训练困难的问题，通过增加模型的深度提升了模型的准确率。该PaddleHub Module结构为ResNet50，基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
Residual Network，引入了新的残差结构，解决了随着网络加深，准确率下降的问题
hub install resnet_v2_152_imagenet==1.0.1
hub install resnet_v2_101_imagenet==1.0.1
hub install resnet_v2_50_imagenet==1.0.1
hub install resnet_v2_34_imagenet==1.0.0
hub install resnet_v2_18_imagenet==1.0.0
hub run resnet_v2_101_imagenet --input_path ./_/动物/597404831cc74b04390778603649be44.jpg
hub run resnet_v2_152_imagenet --input_path ./_/动物/597404831cc74b04390778603649be44.jpg
hub run resnet_v2_50_imagenet --input_path ./_/动物/597404831cc74b04390778603649be44.jpg

ResNet-D
融合最新多种对ResNet改进策略，ResNet50_vd的top1准确率达到79.84%

Inception-v4
将Inception模块与Residual Connection进行结合，通过ResNet的结构极大地加速训练并获得性能的提升

pnasnet_imagenet
PNASNet是Google通过AutoML自动训练出来的图像分类模型。该PaddleHub Module基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
hub install pnasnet_imagenet==1.0.1
hub run pnasnet_imagenet --input_path ./_/动物/597404831cc74b04390778603649be44.jpg

nasnet_imagenet
NASNet是Google通过AutoML自动训练出来的图像分类模型。该PaddleHub Module基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
hub install nasnet_imagenet==1.0.1
hub run nasnet_imagenet --input_path ./_/动物/597404831cc74b04390778603649be44.jpg

mobilenet_v2_imagenet
MobileNet V2是Mark Sandler, Andrew Howard等人在2018年提出的一个图像分类模型，该系列模型（MobileNet）是为移动和嵌入式设备提出的高效模型，在模型参数较少的情况下仍然保持了较高的分类准确率。该PaddleHub Module基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
将传统的卷积结构改造成两层卷积结构的网络，在基本不影响准确率的前提下大大减少计算时间，更适合移动端和嵌入式视觉应用
MobileNet结构的微调，直接在thinner的bottleneck层上进行skip learning连接以及对bottleneck layer不进行ReLu非线性处理可取得更好的结果
hub install mobilenet_v2_imagenet==1.0.1
hub run mobilenet_v2_imagenet --input_path ./_/动物/597404831cc74b04390778603649be44.jpg

googlenet_imagenet
GoogleNet是图像分类中的经典模型。由Christian Szegedy等人在2014年提出，并获得了2014年ILSVRC竞赛冠军。该PaddleHub Module结构为GoogleNet，基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
在不增加计算负载的前提下增加了网络的深度和宽度，性能更加优越
hub install googlenet_imagenet==1.0.0

alexnet_imagenet
AlexNet是图像分类中的经典模型。模型由Alex Krizhevsky于2012年提出，并在2012年ILSVRC比赛中夺得冠军。该PaddleHub Module结构为AlexNet，基于ImageNet-2012数据集训练，接受输入图片大小为224 x 224 x 3，支持直接通过命令行或者Python接口进行预测。
首次在CNN中成功的应用了ReLU、Dropout和LRN，并使用GPU进行运算加速
hub install alexnet_imagenet==1.0.0

cyclegan_cityscapes 图像生成
CycleGAN是生成对抗网络（Generative Adversarial Networks ）的一种，与传统的GAN只能单向生成图片不同，CycleGAN可以同时完成两个domain的图片进行相互转换。该PaddleHub Module使用Cityscapes数据集训练完成，支持图片从实景图转换为语义分割结果，也支持从语义分割结果转换为实景图。
hub install cyclegan_cityscapes

tsn_kinetics400 视频分类
TSN（Temporal Segment Network）是视频分类领域经典的基于2D-CNN的解决方案。该方法主要解决视频的长时间行为判断问题，通过稀疏采样视频帧的方式代替稠密采样，既能捕获视频全局信息，也能去除冗余，降低计算量。最终将每帧特征平均融合后得到视频的整体特征，并用于分类。TSN的训练数据采用由DeepMind公布的Kinetics-400动作识别数据集。该PaddleHub Module可支持预测。
hub install tsn_kinetics400
TSM（Temporal Shift Module）是由MIT和IBM Watson AI Lab的JiLin，ChuangGan和SongHan等人提出的通过时间位移来提高网络视频理解能力的模块。TSM的训练数据采用由DeepMind公布的Kinetics-400动作识别数据集。该PaddleHub Module可支持预测。
hub install tsm_kinetics400
StNet模型框架为ActivityNet Kinetics Challenge 2018中夺冠的基础网络框架，是基于ResNet50实现的。该模型提出super-image的概念，在super-image上进行2D卷积，建模视频中局部时空相关性。另外通过temporal modeling block建模视频的全局时空依赖，最后用一个temporal Xception block对抽取的特征序列进行长时序建模。StNet的训练数据采用由DeepMind公布的Kinetics-400动作识别数据集。该PaddleHub Module可支持预测。
hub install stnet_kinetics400
Non-local Neural Networks是由Xiaolong Wang等研究者在2017年提出的模型，主要特点是通过引入Non-local操作来描述距离较远的像素点之间的关联关系。其借助于传统计算机视觉中的non-local mean的思想，并将该思想扩展到神经网络中，通过定义输出位置和所有输入位置之间的关联函数，建立全局关联特性。Non-local模型的训练数据采用由DeepMind公布的Kinetics-400动作识别数据集。该PaddleHub Module可支持预测。
hub install nonlocal_kinetics400

OCR文字识别
支持中英文数字组合识别、竖排文本识别、长文本识别，可以支持直接预测
chinese_ocr_db_crnn_server
chinese_ocr_db_crnn_mobile
视频分类
videotag_tsn_lstm
stnet_kinetics400
动物识别
resnet50_vd_animals
mobilenet_v2_animals
口罩检测
pyramidbox_lite_mobile_mask
pyramidbox_lite_server_mask
肺炎CT影像分析
Pneumonia_CT_LKM_PP


ICNet
主要用于图像实时语义分割，能够兼顾速度和准确性，易于线上部署

DeepLab V3+
通过encoder-decoder进行多尺度信息的融合，同时保留了原来的空洞卷积和ASSP层， 其骨干网络使用了Xception模型，提高了语义分割的健壮性和运行速率

Simple Baselines
coco2018关键点检测项目亚军方案，网络结构非常简单，效果达到state of the art

图像生成
CGAN	条件生成对抗网络，一种带条件约束的GAN，使用额外信息对模型增加条件，可以指导数据生成过程	Mnist
DCGAN	深度卷积生成对抗网络，将GAN和卷积网络结合起来，以解决GAN训练不稳定的问题	Mnist
Pix2Pix	图像翻译，通过成对图片将某一类图片转换成另外一类图片，可用于风格迁移	Cityscapes
CycleGAN	图像翻译，可以通过非成对的图片将某一类图片转换成另外一类图片，可用于风格迁移	Cityscapes
StarGAN	多领域属性迁移，引入辅助分类帮助单个判别器判断多个属性，可用于人脸属性转换	Celeba
AttGAN	利用分类损失和重构损失来保证改变特定的属性，可用于人脸特定属性转换	Celeba
STGAN	人脸特定属性转换，只输入有变化的标签，引入GRU结构，更好的选择变化的属性	Celeba

场景文字识别
CRNN-CTC	使用CTC model识别图片中单行英文字符，用于端到端的文本行图片识别方法	单行不定长的英文字符串图片	错误率= 22.3%
OCR Attention	使用attention 识别图片中单行英文字符，用于端到端的自然场景文本识别，	单行不定长的英文字符串图片	错误率 = 15.8%

度量学习
ResNet50未微调	使用arcmargin loss训练的特征模型	Stanford Online Product(SOP)	78.11%
ResNet50使用triplet微调	在arcmargin loss基础上，使用triplet loss微调的特征模型	Stanford Online Product(SOP)	79.21%
ResNet50使用quadruplet微调	在arcmargin loss基础上，使用quadruplet loss微调的特征模型	Stanford Online Product(SOP)	79.59%
ResNet50使用eml微调	在arcmargin loss基础上，使用eml loss微调的特征模型	Stanford Online Product(SOP)	80.11%
ResNet50使用npairs微调	在arcmargin loss基础上，使用npairs loss微调的特征模型	Stanford Online Product(SOP)	79.81%

视频分类和动作定位
TSN	ECCV'16提出的基于2D-CNN经典解决方案	Kinetics-400	Top-1 = 67%
Non-Local	视频非局部关联建模模型	Kinetics-400	Top-1 = 74%
stNet	AAAI'19提出的视频联合时空建模方法	Kinetics-400	Top-1 = 69%
TSM	基于时序移位的简单高效视频时空建模方法	Kinetics-400	Top-1 = 70%
Attention LSTM	常用模型，速度快精度高	Youtube-8M	GAP = 86%
Attention Cluster	CVPR'18提出的视频多模态特征注意力聚簇融合方法	Youtube-8M	GAP = 84%
NeXtVlad	2nd-Youtube-8M最优单模型	Youtube-8M	GAP = 87%
C-TCN	2018年ActivityNet夺冠方案	ActivityNet1.3	MAP=31%

阅读理解
MRC(Machine Reading Comprehension)机器阅读理解(MRC)是自然语言处理(NLP)中的关键任务之一，开源的DuReader升级了经典的阅读理解BiDAF模型，去掉了char级别的embedding，在预测层中使用了pointer network，并且参考了R-NET中的一些网络结构，效果上有了大幅提升

emotion_detection_ernie_finetune
lexical_analysis
lexical_analysis_finetuned
dureader_machine_reading-bidaf
simnet_bow_pairwise
dmtk_models
auto_dialogue_evaluation_matching_pretrained_model
auto_dialogue_evaluation_seq2seq_naive_finetuned_model
auto_dialogue_evaluation_seq2seq_att_finetuned_model
auto_dialogue_evaluation_keywords_finetuned_model
auto_dialogue_evaluation_human_finetuned_model

下载目录：
/Users/hcxiong/.paddlehub/cache/
/Users/hcxiong/.paddlehub/modules/

pip3 install torch==1.1.0.post2
https://github.com/pytorch/hub
下载目录：
/Users/hcxiong/.cache/torch/hub/

百度AI项目
https://aistudio.baidu.com/aistudio/projectoverview
公开的数据集
https://aistudio.baidu.com/aistudio/datasetlist/2

垃圾邮件 数据集
https://plg.uwaterloo.ca/cgi-bin/cgiwrap/gvcormac/foo06
https://plg.uwaterloo.ca/cgi-bin/cgiwrap/gvcormac/trec06c.tgz

https://github.com/yangboz/LotteryPrediction
https://github.com/google-research/lottery-ticket-hypothesis
https://github.com/chengstone/LotteryPredict

图中文描述
https://github.com/foamliu/Image-Captioning-v2
https://challenger.ai/dataset/caption
https://github.com/kelvinxu/arctic-captions
https://github.com/foamliu/Image-Captioning-v2/releases/download/v1.0/BEST_checkpoint_.pth.tar
https://github.com/tensorflow/models/tree/master/research/im2txt
https://github.com/tensorflow/models/tree/master/research/slim#tensorflow-slim-image-classification-library
https://python.ctolib.com/TimoYoung-im2txt_Chinese.html

超分辨率网络
https://github.com/foamliu/Super-Resolution-Net

https://github.com/foamliu/Deep-Image-Matting

吃鸡超级玛丽
https://github.com/mroyale/mroyale-server
https://github.com/Igoorx/PyRoyale

那么哪里可以找到小程序的安装包？
1、https://servicewechat.com/weapp/release/${appid}/${version_num}.wxapkg
http://123.125.9.32/resstatic.servicewechat.com/weapp/release/${appid}/${version_num}.wxapkg

2、在android手机中/data/data/com.tencent.mm/MicroMsg/${userid}/appband/pkg
adb shell
su
cd /data/data/com.tencent.mm/MicroMsg/${userid}/appband/pkg
adb pull /data/data/com.tencent.mm/MicroMsg/{User}/appbrand/pkg

git clone https://github.com/thedreamwork/unwxapkg
cd unwxapkg
npm install && npm link

细粒度图像识别
https://github.com/JDAI-CV/DCL
https://www.kaggle.com/datasets
https://www.kaggle.com/c/ifood-2019-fgvc6/data
https://www.kaggle.com/c/fieldguide-challenge-moths-and-butterflies/data
https://www.kaggle.com/c/imaterialist-product-2019/data

手写数字数据集MNIST：
http://yann.lecun.com/exdb/mnist/

https://github.com/onnx/tutorials
https://github.com/onnx/models
pip3 install onnx

车识别
https://github.com/michalgdak/car-recognition
http://ai.stanford.edu/~jkrause/cars/car_dataset.html


https://github.com/openai/gpt-2
https://github.com/allenai/allennlp
pip3 install allennlp
https://github.com/zalandoresearch/flair
https://github.com/huggingface/pytorch-transformers
https://github.com/kimiyoung/transformer-xl
https://github.com/google-research/bert
https://github.com/brightmart/text_classification
https://github.com/graykode/nlp-tutorial

视频语义分割
https://github.com/NVIDIA/semantic-segmentation

https://www.paperswithcode.com/sota
https://www.paperswithcode.com/area/computer-vision
https://www.paperswithcode.com/paper/transformer-xl-attentive-language-models
https://www.paperswithcode.com/paper/bert-pre-training-of-deep-bidirectional

价格上涨/下跌时通知机器人
https://github.com/kwf2030/hiprice-chatbot

自动将字幕与视频同步
https://github.com/smacke/subsync
自动编辑视频
https://github.com/carykh/jumpcutter

https://github.com/sfyc23/EverydayWechat
[性感渣男在线教学] 一个教你说情话的网站.
https://www.v2ex.com/t/569853
https://api.lovelive.tools/api/SweetNothings
GET https://api.lovelive.tools/api/SweetNothings/:count/Serialization/:serializationType
GET https://api.lovelive.tools/api/SweetNothings/Serialization/:serializationType/:count
GET https://api.lovelive.tools/api/SweetNothings/Serialization/:serializationType
GET https://api.lovelive.tools/SweetNothings/:count
GET https://api.lovelive.tools/api/SweetNothings/3/Serialization/Json
https://chp.shadiao.app/
https://chp.shadiao.app/api.php
骂人宝典
https://nmsl.shadiao.app/
https://nmsl.shadiao.app/api.php
https://nmsl.shadiao.app/api.php?level=min
每日一言
http://guozhivip.com/nav/yiyan.html
http://guozhivip.com/nav/api/api.php
https://www.juzimi.com/
http://open.iciba.com/?c=api
http://wufazhuce.com/
天气
https://www.sojson.com/blog/305.html
AI人工智能机器人
http://www.yige.ai/
http://www.turingapi.com/
http://api.qingyunke.com/
查询天气：http://api.qingyunke.com/api.php?key=free&appid=0&msg=天气梅州
ＩＰ查询：http://api.qingyunke.com/api.php?key=free&appid=0&msg=127.0.0.1
手机查询：http://api.qingyunke.com/api.php?key=free&appid=0&msg=13430108888
智能聊天：http://api.qingyunke.com/api.php?key=free&appid=0&msg=你好
智能闲聊（腾讯）
https://ai.qq.com/product/nlpchat.shtml
https://www.tianapi.com/apiview/47
https://ruyi.ai/
星座屋
https://www.xzw.com/
万年历
https://www.sojson.com/api/lunar.html

从网易云音乐、QQ音乐、酷狗音乐、百度音乐、虾米音乐等搜索和下载歌曲
https://github.com/0xHJK/music-dl
pip3 install pymusic-dl
music-dl --help
music-dl -l -k "周杰伦"
https://github.com/darknessomi/musicbox
https://github.com/YongHaoWu/NeteaseCloudMusicFlac
https://github.com/EvilCult/Video-Downloader
https://github.com/soimort/you-get
电影美剧搜索
https://github.com/EvilCult/moviecatcher
代理
https://github.com/0xHJK/Proxies

点击查询搜狗词库表
https://gitee.com/tyoui/word
https://github.com/jtyoui/Jtyoui/tree/master/jtyoui/sogou
常见的距离公式
https://github.com/jtyoui/Jtyoui/tree/master/jtyoui/statistics/distance
https://blog.csdn.net/jiangjiang_jian/article/details/77527855
造句
http://zaojv.com/
百科
https://github.com/jtyoui/Jtyoui/blob/master/jtyoui/baidu/Encyclopedias.py
翻译
https://github.com/jtyoui/Jtyoui/blob/master/jtyoui/jp/Japan.py
https://github.com/jtyoui/Jtyoui/blob/master/jtyoui/language/Translates.py

目标检测
https://zhuanlan.zhihu.com/p/34142321
https://yuanxiaosc.github.io/2019/04/30/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/

图片对象检查
git clone https://github.com/pjreddie/darknet
cd darknet
make
pip install .
wget https://pjreddie.com/media/files/yolov3.weights
./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg
./darknet detector test cfg/coco.data cfg/yolov3.cfg yolov3.weights data/dog.jpg
./darknet detect cfg/yolov3.cfg yolov3.weights
./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg -thresh 0
wget https://pjreddie.com/media/files/yolov3-tiny.weights
./darknet detect cfg/yolov3-tiny.cfg yolov3-tiny.weights data/dog.jpg
./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights
./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights <video file>
wget https://pjreddie.com/media/files/darknet53.conv.74
./darknet detector train cfg/voc.data cfg/yolov3-voc.cfg darknet53.conv.74
wget https://pjreddie.com/media/files/yolov3-openimages.weights
./darknet detector test cfg/openimages.data cfg/yolov3-openimages.cfg yolov3-openimages.weights
https://pjreddie.com/darknet/yolo/
flow --imgdir sample_img/ --model cfg/tiny-yolo.cfg --load bin/tiny-yolo.weights --json
flow --model cfg/yolo-new.cfg --load bin/yolo-new.weights --demo videofile.avi
flow --model cfg/yolo-new.cfg --load bin/yolo-new.weights --demo videofile.avi --gpu 1.0

from darkflow.net.build import TFNet
import cv2
options = {"model": "cfg/yolo.cfg", "load": "bin/yolo.weights", "threshold": 0.1}
tfnet = TFNet(options)
imgcv = cv2.imread("./sample_img/sample_dog.jpg")
result = tfnet.return_predict(imgcv)
print(result)

Raspberry Pi 3D打印
https://github.com/nordprojects/lantern
用于单板计算机的视频监控操作系统
https://github.com/ccrisan/motioneyeos
https://github.com/chrispcampbell/qrocodile

https://github.com/jjwang/laibot-client/wiki/Jasper%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8
https://github.com/flyingtimes/image-recognition
https://github.com/jasperproject/jasper-client/
https://github.com/KhaosT/HAP-NodeJS
https://github.com/nfarina/homebridge
Raspberry PI3
aplay -l
arecord -l
nano ~/.asoundrc
arecord -t wav -f S16_LE -c 2 -d 10 -r 24000 temp.wav
-t 录音文件的类型,这里录音文件类型为wav；
-f 文件格式,格式为S16_LE；
-c 声道,这里设为2，双声道；
-r 设置波特率,波特率为24000；
-d 录音时间,录音时间为10秒。
b.使用aplay指令测试放音工作情况
  $ aplay temp.wav

wget -c http://sourceforge.net/projects/e-guidedog/files/Ekho/7.6/ekho-7.6.tar.xz
cd ekho
./configure
make
make install
ekho "hello 123"
http://www.eguidedog.net/cn/WebSpeech_cn.php
http://120.24.87.124/cgi-bin/ekho2.pl?cmd=SPEAK&voice=BaiduMandarinFemale&speedDelta=0&pitchDelta=0&volumeDelta=0&text=%E5%90%AC%E5%88%B0%E5%A3%B0%E9%9F%B3%E4%BA%86%E5%90%976
http://120.24.87.124/cgi-bin/ekho2.pl?cmd=SPEAK&voice=BaiduMandarinMale&speedDelta=0&pitchDelta=0&volumeDelta=0&text=%E5%90%AC%E5%88%B0%E5%A3%B0%E9%9F%B3%E4%BA%86%E5%90%97%EF%BC%9F
http://120.24.87.124/cgi-bin/ekho2.pl?cmd=SPEAK&voice=iflytek&speedDelta=0&pitchDelta=0&volumeDelta=0&text=%E5%90%AC%E5%88%B0%E5%A3%B0%E9%9F%B3%E4%BA%86%E5%90%97%EF%BC%9F
http://120.24.87.124/cgi-bin/ekho2.pl?cmd=SPEAK&voice=iflytekXiaomei&speedDelta=0&pitchDelta=0&volumeDelta=0&text=%E5%90%AC%E5%88%B0%E5%A3%B0%E9%9F%B3%E4%BA%86%E5%90%97%EF%BC%9F

wget -c https://liquidtelecom.dl.sourceforge.net/project/e-guidedog/zhspeak/zhspeak_4.2.0_generic.tar.xz
tar xJvf zhspeak_4.2.0_generic.tar.xz
bin/zhspeak -xclip -zh
bin/zhspeak -xclip -zhy

用于音频和音乐分析的Python库
https://github.com/librosa/librosa
https://nbviewer.jupyter.org/github/librosa/librosa/blob/master/examples/LibROSA%20demo.ipynb
https://nbviewer.jupyter.org/github/librosa/librosa/blob/master/examples/LibROSA%20audio%20effects%20and%20playback.ipynb

中文数据集
AISHELL-1
178小时
AISHELL-ASR0009录音文本涉及智能家居、无人驾驶、工业生产等11个领域。录制过程在安静室内环境中， 同时使用3种不同设备： 高保真麦克风（44.1kHz，16-bit）；Android系统手机（16kHz，16-bit）；iOS系统手机（16kHz，16-bit）。高保真麦克风录制的音频降采样为16kHz，用于制作AISHELL-ASR0009-OS1。400名来自中国不同口音区域的发言人参与录制。经过专业语音校对人员转写标注，并通过严格质量检验，此数据库文本正确率在95%以上。分为训练集、开发集、测试集。（支持学术研究，未经允许禁止商用。）
AISHELL-2
1000小时
希尔贝壳中文普通话语音数据库AISHELL-2的语音时长为1000小时，其中718小时来自AISHELL-ASR0009-[ZH-CN]，282小时来自AISHELL-ASR0010-[ZH-CN]。录音文本涉及唤醒词、语音控制词、智能家居、无人驾驶、工业生产等12个领域。录制过程在安静室内环境中， 同时使用3种不同设备： 高保真麦克风（44.1kHz，16bit）；Android系统手机（16kHz，16bit）；iOS系统手机（16kHz，16bit）。AISHELL-2采用iOS系统手机录制的语音数据。1991名来自中国不同口音区域的发言人参与录制。经过专业语音校对人员转写标注，并通过严格质量检验，此数据库文本正确率在96%以上。（支持学术研究，未经允许禁止商用。）
AISHELL-EVAL
（AISHELL2-2018A-EVAL）
TEST DATA: 5000 utterances from 10 speakers
 DEV DATA: 2500 utterances from 5 speaker
Sampling Rate :         16kHz
Sample Format :        16bit
Environment :             Indoor
Speech Data Type :    PCM
Channel Number :     1
Recording Equipment :  iOS / Android / High Fidelity Microphone
THCHS30
30
THCHS30是一个很经典的中文语音数据集了，包含了1万余条语音文件，大约40小时的中文语音数据，内容以文章诗句为主，全部为女声。它是由清华大学语音与语言技术中心（CSLT）出版的开放式中文语音数据库。原创录音于2002年由朱晓燕教授在清华大学计算机科学系智能与系统重点实验室监督下进行，原名为“TCMSD”，代表“清华连续”普通话语音数据库’。13年后的出版由王东博士发起，并得到了朱晓燕教授的支持。他们希望为语音识别领域的新入门的研究人员提供玩具级别的数据库，因此，数据库对学术用户完全免费。
ST-CMDS
500
由Surlingtech（www.surking.ai）提供的免费中文普通话语料库，包含855个发言者的话语，102600个话语，该语料库是在室内用手机安静记录下来的。它有855个扬声器。每个演讲者有120个发言。所有的话语都被人仔细地抄写和核对过。保证了转录的准确性。
Primewords Chinese Corpus Set 1
100
这套免费中文普通话语音语料库由上海普锐斯信息技术有限公司发布，语料库由296名母语为中文的智能手机录制。转录准确率大于98%，置信水平为95%。这是学术上的免费使用。成绩单和发言之间的映射是以JSON格式给出的。
aidatatang
Aidatatang_200zh是由北京数据科技有限公司（数据堂）提供的开放式中文普通话电话语音库。
语料库长达200小时，由Android系统手机（16kHz，16位）和iOS系统手机（16kHz，16位）记录。邀请来自中国不同重点区域的600名演讲者参加录音，录音是在安静的室内环境或环境中进行，其中包含不影响语音识别的背景噪音。参与者的性别和年龄均匀分布。语料库的语言材料是设计为音素均衡的口语句子。每个句子的手动转录准确率大于98％。
MAGICDATA Mandarin Chinese Read Speech Corpus
Magic Data技术有限公司的语料库，语料库包含755小时的语音数据，其主要是移动终端的录音数据。邀请来自中国不同重点区域的1080名演讲者参与录制。句子转录准确率高于98％。录音在安静的室内环境中进行。数据库分为训练集，验证集和测试集，比例为51：1：2。诸如语音数据编码和说话者信息的细节信息被保存在元数据文件中。录音文本领域多样化，包括互动问答，音乐搜索，SNS信息，家庭指挥和控制等。还提供了分段的成绩单。该语料库旨在支持语音识别，机器翻译，说话人识别和其他语音相关领域的研究人员。因此，语料库完全免费用于学术用途。
https://blog.ailemon.me/2018/11/21/free-open-source-chinese-speech-datasets/
https://voice.mozilla.org/zh-CN/datasets
https://www.datatang.com/webfront/opensource.html
开源的中文语音合成数据，感谢标贝公司
【数据下载】https://weixinxcxdb.oss-cn-beijing.aliyuncs.com/gwYinPinKu/BZNSYP.rar 【数据说明】http://www.data-baker.com/open_source.html
英文数据集：
1.LibriSpeech ASR corpus：该数据集是包含大约1000小时的英语语音的大型语料库。这些数据来自LibriVox项目的有声读物。它已被分割并正确对齐，如果你正在寻找一个起点，请查看已准备好的声学模型，这些模型在kaldi-asr.org和语言模型上进行了训练，适合评估。
https://www.openslr.org/12
Mini LibriSpeech ASR corpus：用于回归测试的一个子集 http://www.openslr.org/31/
2.TED-LIUM：http://www.openslr.org/7/
TED-LIUMv2：http://www.openslr.org/19/
TED-LIUM Release 3：https://www.openslr.org/51/
3.VoxForge：该数据集是带口音的语音清洁数据集，对测试模型在不同重音或语调下的鲁棒性非常有用。
http://www.voxforge.org/
https://voice.mozilla.org/zh-CN/data
4.TIMIT数据集 百度云链接：https://pan.baidu.com/s/1YJNIFdBiSPqebTq_GyOdog 密码：sqw7
5.Free ST American English Corpus：http://www.openslr.org/45/
https://keithito.com/LJ-Speech-Dataset/

绘画/风格转移/对象变形/季节转移/照片增强
https://github.com/junyanz/CycleGAN
brew install findutils coreutils luarocks
https://github.com/phillipi/pix2pix
https://github.com/junyanz/iGAN
https://github.com/soumith/dcgan.torch
https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix

信息抽取https://zhuanlan.zhihu.com/p/74803327
中文命名实体识别：https://github.com/EOA-AILab/NER-Chinese
中文分词与词性标注：https://github.com/EOA-AILab/Seg_Pos
Jieba 分词 + BertNER 作自定义词典 + Pyltp 词性标注
指代消解模型
Stanford coreNLP/BertNER
https://blog.csdn.net/macanv/article/details/85684284

裸露检查
https://github.com/gearsystems/nonude
https://github.com/yuanxiaosc/DeepNude-an-Image-to-Image-technology
https://github.com/zhengyima/DeepNude_NoWatermark_withModel

合成人
https://github.com/NVlabs/stylegan
https://github.com/NVlabs/stylegan3

中文文本纠错工具
https://github.com/shibing624/pycorrector
pip3 install pycorrector
wget http://kheafield.com/code/kenlm.tar.gz
tar -xvf kenlm.tar.gz
cd kenlm
python3 setup.py install
致命错误：Python.h：没有那个文件或目录
yum install python36-devel.x86_64
import pycorrector
corrected_sent, detail = pycorrector.correct('少先队员因该为老人让坐')
print(corrected_sent, detail)
pycorrector.correct('少先队员因该为老人让坐')
https://github.com/ccheng16/correction
https://github.com/PengheLiu/Cn_Speck_Checker
https://github.com/apanly/proofreadv1
https://github.com/taozhijiang/chinese_correct_wsd
https://github.com/beyondacm/Autochecker4Chinese
https://github.com/SeanLee97/xmnlp
http://norvig.com/spell-correct.html

https://github.com/deepmipt/DeepPavlov
https://github.com/RasaHQ/rasa
https://github.com/gunthercox/ChatterBot
https://github.com/baidu/AnyQ
https://github.com/DouYishun/KB-QA
https://github.com/warmheartli/ChatBotCourse

淘宝模拟登录
https://github.com/pig6/login_taobao

https://github.com/Angel-ML/angel

WIDER FACE(lsl3)
https://pan.baidu.com/s/1sJTO7TcQ2576RUqR_IIhbQ#list/path=%2F
http://mmlab.ie.cuhk.edu.hk/archive/CNN_FacePoint.htm
https://github.com/kuaikuaikim/DFace

Enterprise VPN server
https://github.com/pritunl/pritunl
sudo tee /etc/yum.repos.d/mongodb-org-4.0.repo << EOF
[mongodb-org-4.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc
EOF

sudo tee /etc/yum.repos.d/pritunl.repo << EOF
[pritunl]
name=Pritunl Repository
baseurl=https://repo.pritunl.com/stable/yum/centos/7/
gpgcheck=1
enabled=1
EOF

sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 7568D9BB55FF9E5287D586017AE645C0CF8E292A
gpg --armor --export 7568D9BB55FF9E5287D586017AE645C0CF8E292A > key.tmp; sudo rpm --import key.tmp; rm -f key.tmp
sudo yum -y install pritunl mongodb-org
sudo systemctl start mongod pritunl
sudo systemctl enable mongod pritunl
https://docs.pritunl.com/docs/connecting

https://github.com/clockworkpi

在线运行PYTHON代码
https://trinket.io/
https://tool.lu/coderunner/
https://c.runoob.com/compile/6
http://www.pythontip.com/coding/run
https://colab.research.google.com/notebooks/welcome.ipynb
https://aistudio.baidu.com/aistudio/usercenter
https://jupyter.org/
https://github.com/jupyter/jupyter
pip3 install jupyter
jupyter notebook
jupyter notebook --generate-config
https://blog.csdn.net/countofdane/article/details/82013676
https://github.com/mwouts/jupytext

文本
https://zhuanlan.zhihu.com/p/76912493
https://github.com/HCIILAB/Scene-Text-Detection
https://github.com/tesseract-ocr/tesseract
https://ocr.wdku.net/
https://www.onlineocr.net/
https://github.com/Calamari-OCR/calamari

使用 CuPy 在 GPU 上运行
pip3 install cupy

http://www.18lou.net/tech_32988.html
https://github.com/facebookresearch/FixRes
https://github.com/facebookresearch/multigrain
https://pytorch.org/hub/facebookresearch_WSL-Images_resnext/
https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101/
https://pytorch.org/hub/research-models

微软翻译
http://api.microsofttranslator.com/V2/Ajax.svc/Translate?appId=78280AF4DFA1CE1676AFE86340C690023A5AC139&from=en&to=zh&text=hello
https://api.cognitive.microsofttranslator.com/translate?to=zh&text=hello

http://peiyin.xunfei.cn/make/?ftype=1
curl 'http://www.peiyinge.com/web-server/1.0/text_segment' -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: http://peiyin.xunfei.cn/make/?ftype=1' -H 'Origin: http://peiyin.xunfei.cn' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36' -H 'Content-Type: application/json' --data-binary '{"req":"D4dQntyzB0uB+8r7u80/8d+tHs1r6VOFpEQxk2KEYVHVpZpe6Kc+59hggO2HFNCY40Kzi+MVlqO7DuWY26+pNnYx39GfFkkmRS3tToizC721xeVL146MV33P02dMFK7UXqb+fb5juqwNLm5CJ0scT0hjH1kg/6aszsvs4AJPZPJa81yBssJu1Rp+WqoasTCHxY8XFp5LmIHBgViR3+hSQJziwoHNCN6g0Yxf5SB08xV6U63uvGJYfLBm/x79h+++OWPutlzFPECZcxYaAmfeGV7gLefWYZx2qVc23BHgyjeuL16us5YIs6w2wQlFLvgpao21+k+W9YWuR6LFfN7M5kARhSjNiB5USzl6rerfffc="}' --compressed --insecure

https://www.xfyun.cn/services/online_tts
curl 'https://www.xfyun.cn/herapi/solution/synthesis/v2?challenge=adbb524b555e7cf3e886afa98fe4a5aa&validate=32c53e4906e596833fcf93e03c15e7a8&seccode=32c53e4906e596833fcf93e03c15e7a8%7Cjordan' -H 'sec-fetch-mode: cors' -H 'origin: https://www.xfyun.cn' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: zh-CN,zh;q=0.9,zh-TW;q=0.8' -H 'x-requested-with: XMLHttpRequest' -H 'cookie: SESSION=1d46270c-45f0-4352-9680-e92599c9ab65; Hm_lvt_83a57cc9e205b0add91afc6c4f0babcc=1568866200; di_c_mti=6737d25a-106d-6a64-970d-3d102210b172; gr_user_id=b95e5bdb-8821-4646-8472-2fdd3502ce6d; 8473744dbcf62d60_gr_session_id=ccbc3156-44e1-4032-8da8-77d0a276a364; 8473744dbcf62d60_gr_session_id_ccbc3156-44e1-4032-8da8-77d0a276a364=true; grwng_uid=401880c3-f161-438f-a3e8-5b9008f9d610; _wafuid=31476926; ssoSessionId=null; account_id=null; pgv_pvi=8885302272; pgv_si=s792815616; Hm_lpvt_83a57cc9e205b0add91afc6c4f0babcc=1568867087; connect.sid=s%3Afs1044V-NXHYmsEVUfYnyvf37aVnCJav.V1Vq8eGsjzvEN26MEEMTBzZsou%2By%2BLm4joHH2YmUPu4' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36' -H 'content-type: application/json; charset=UTF-8' -H 'accept: application/json, text/javascript, */*; q=0.01' -H 'referer: https://www.xfyun.cn/services/online_tts' -H 'authority: www.xfyun.cn' -H 'sec-fetch-site: same-origin' --data-binary '{"voice_name":"aisxping","volume":70,"speed":"50","text":"科大讯飞成立于1999年，是中国先进的智能化语音技术提供商，其语音核心技术代表世界先进水平。我们提供的语音合成效果，达到了真正可商用的标准，您可以在这里输入任意文本进行语音合成体验。","engine_type":"intp65"}' --compressed
curl 'https://www.xfyun.cn/herapi/solution/synthesis/v2?challenge=6d07a0c03ab670b4be7a111e00c4011c&validate=516e202de774a8f944f9967f4b5b853c&seccode=516e202de774a8f944f9967f4b5b853c%7Cjordan' -H 'sec-fetch-mode: cors' -H 'origin: https://www.xfyun.cn' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: zh-CN,zh;q=0.9,zh-TW;q=0.8' -H 'x-requested-with: XMLHttpRequest' -H 'cookie: SESSION=1d46270c-45f0-4352-9680-e92599c9ab65; Hm_lvt_83a57cc9e205b0add91afc6c4f0babcc=1568866200; di_c_mti=6737d25a-106d-6a64-970d-3d102210b172; gr_user_id=b95e5bdb-8821-4646-8472-2fdd3502ce6d; 8473744dbcf62d60_gr_session_id=ccbc3156-44e1-4032-8da8-77d0a276a364; 8473744dbcf62d60_gr_session_id_ccbc3156-44e1-4032-8da8-77d0a276a364=true; grwng_uid=401880c3-f161-438f-a3e8-5b9008f9d610; _wafuid=31476926; ssoSessionId=null; account_id=null; pgv_pvi=8885302272; pgv_si=s792815616; Hm_lpvt_83a57cc9e205b0add91afc6c4f0babcc=1568867087; connect.sid=s%3Afs1044V-NXHYmsEVUfYnyvf37aVnCJav.V1Vq8eGsjzvEN26MEEMTBzZsou%2By%2BLm4joHH2YmUPu4' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36' -H 'content-type: application/json; charset=UTF-8' -H 'accept: application/json, text/javascript, */*; q=0.01' -H 'referer: https://www.xfyun.cn/services/online_tts' -H 'authority: www.xfyun.cn' -H 'sec-fetch-site: same-origin' --data-binary '{"voice_name":"x_xiaoyan","volume":70,"speed":"50","text":"科大讯飞成立于1999年，是中国先进的智能化语音技术提供商，其语音核心技术代表世界先进水平。我们提供的语音合成效果，达到了真正可商用的标准，您可以在这里输入任意文本进行语音合成体验。","engine_type":"intp65"}' --compressed
<audio controls="controls" autobuffer="autobuffer" autoplay="autoplay">
<source autoplay src="data:audio/mpeg;base64," />

https://www.ffkuaidu.com/
curl 'https://www.ffkuaidu.com/pc/api/synVox/speechSynth?T=1568873629137' -H 'sec-fetch-mode: cors' -H 'origin: https://www.ffkuaidu.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: zh-CN,zh;q=0.9,zh-TW;q=0.8' -H 'authorization: null' -H 'cookie: UM_distinctid=16d47d15b0f164-0df9375420d3d5-38607501-1aeaa0-16d47d15b108f0; CNZZDATA1276553400=1308769637-1568866053-%7C1568866053; Hm_lvt_bf769641971db0cf47de095087a6a786=1568867966; Hm_lpvt_bf769641971db0cf47de095087a6a786=1568867966' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36' -H 'content-type: application/json;charset=UTF-8' -H 'accept: application/json, text/plain, */*' -H 'referer: https://www.ffkuaidu.com/' -H 'authority: www.ffkuaidu.com' -H 'sec-fetch-site: same-origin' --data-binary '{"bgVoxId":"","bgVoxPath":"","readerID":31,"duration":"","isStatistics":1,"openId":"","speed":50,"title":"","ttsContent":"%E8%AF%B7%E8%BE%93%E5%85%A5%E9%9C%80%E8%A6%81%E8%BD%AC%E8%AF%AD%E9%9F%B3%E7%9A%84%E6%96%87%E5%AD%97","unionId":"","volume":0,"way":2,"readerVolume":5,"pitch":50,"bgVoxType":1,"ipAddress":"219.139.206.147"}' --compressed

https://ai.baidu.com/tech/speech/tts
curl 'https://ai.baidu.com/aidemo' -H 'sec-fetch-mode: cors' -H 'origin: https://ai.baidu.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: zh-CN,zh;q=0.9,zh-TW;q=0.8' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: */*' -H 'referer: https://ai.baidu.com/tech/speech/tts' -H 'authority: ai.baidu.com' -H 'cookie: BAIDUID=DD2D4164660D9A45D9CA1C87672B4987:FG=1; PSTM=1565443054; BIDUPSID=343B79F60CF91639AD40AB15B66BC65A; BDUSS=URmeXZtODE2ZWNGSGNwOEYtcHdJSlJxSEttYjZoTk5WempnNjdDeHR6amlNNGRkRVFBQUFBJCQAAAAAAAAAAAEAAABkhRsAY2V4bzI1NQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOKmX13ipl9da; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; delPer=0; PSINO=7; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; H_PS_PSSID=1446_21114_20697_29522_29721_29568_29220; Hm_lvt_8b973192450250dd85b9011320b455ba=1566821657,1568867996; Hm_lpvt_8b973192450250dd85b9011320b455ba=1568867996' -H 'sec-fetch-site: same-origin' --data 'type=tns&spd=5&pit=5&vol=5&per=103&tex=%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6AI%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0' --compressed

http://tools.bugscaner.com/tts/
https://developer.baidu.com/vcast

pi百度语音TTS
命令行播放器 mpg123
sudo apt-get install mpg123
pip install ilangbd
ilang "你好，世界！"
https://translate.google.cn/translate_tts?ie=UTF-8&q=hello%20world&tl=en&client=tw-ob

https://translate.google.com.vn/translate_tts?ie=UTF-8&q=hello world&tl=en&client=tw-ob
https://translate.google.com.vn/translate_tts?ie=UTF-8&q=%E4%BD%A0%E5%A5%BD%E5%90%97%EF%BC%9F&tl=zh-CN&client=tw-ob
https://translate.google.com.vn/translate_tts?ie=UTF-8&q=%E4%BD%A0%E5%A5%BD%E5%90%97%EF%BC%9F&tl=en&client=tw-ob
sudo apt-get install festival
echo “Just what do you think you're doing, Dave?” | festival --tts
speak RPi’s IP address:
hostname -I | festival -tts
sudo apt-get install espeak
espeak -ven+f3 -k5 -s150 "I've just picked up a fault in the AE35 unit"
sudo nano /etc/mplayer/mplayer.conf
nolirc=yes
nano speech.sh
#!/bin/bash
say() { local IFS=+;/usr/bin/mplayer -ao alsa -really-quiet -noconsolecontrols "http://translate.google.com/translate_tts?tl=en&q=$*"; }
say $*
chmod u+x speech.sh
./speech.sh Look Dave, I can see you're really upset about this.
$ apt-get install festival
$ festival -v
festival: Festival Speech Synthesis System: 2.1:release November 2010
echo 'hello boy' |festival --tts

$ wget http://www.cstr.ed.ac.uk/downloads/festival/1.95/festvox_us1.tar.gz
$ tar -xzvf festvox_us1.tar.gz
festival/lib/voices/english/us1_mbrola/festvox/us1_mbrola.scm
festival/lib/voices/english/us1_mbrola/festvox/usdurtreeZ.scm
festival/lib/voices/english/us1_mbrola/usradio
$ cp festival/lib/voices/english/us1_mbrola /usr/share/festival/voices/english/ -R
#
$ wget http://tcts.fpms.ac.be/synthesis/mbrola/dba/us1/us1-980512.zip
$ unzip us1_mbrola.zip -d /usr/share/festival/voices/english/us1_mbrola/
festival> (voice.list)
(us1_mbrola kal_diphone)
festival> (voice_us1_mbrola)
us1_mbrola
festival> (SayText "hello boy")

$ apt-get install festlex-cmu
cd /usr/share/festival/voices/english/
#这个压缩包100多M
sudo wget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_clb_arctic-0.95-release.tar.bz2
sudo tar jxf cmu_us_clb_arctic-0.95-release.tar.bz2
sudo ln -s cmu_us_clb_arctic cmu_us_clb_arctic_clunits

festival> (voice_cmu_us_clb_arctic_clunits)
cmu_us_clb_arctic_clunits
festival> (SayText "hello boy")

sudo cp /etc/festival.scm /etc/festival.scm.backup
sudo echo "(set! voice_default 'voice_cmu_us_clb_arctic_clunits)" >> /etc/festival.scm

$ apt-get install mpg123
$ mpg123 'http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=today+is+sunday'

单声道、16位、16000HZ采样率
arecord -r 16000 -c 1 -t wav -f S16_LE test.wav

输入设备是麦克风，输出可以是HDMI、耳机或音响，我这里用了音响。下面是我的树莓派照片。4个USB接口分别连了无线网卡、无线键盘、麦克风、音响供电。
arecord -D "plughw:1" -f S16_LE -r 16000 test.wav

apt-get install arecord ffmpeg omxplayer
arecord -D "plughw:1,0" -d 5 file.wav
ffmpeg -i file.wav -ar 16000 -acodec flac file.flac
wget -q -U "Mozilla/5.0" --post-file file.flac --header "Content-Type: audio/x-flac; rate=16000" -O - "[color=blue !important]http://www.google.com/speech-api/v1/recognize?lang=zh-cn&client=chromium"
所以要选择Analog输出，这里就需要做一些配置:安装声卡服务
sudo apt-get install alsa-utils
sudo modprobe snd_bcm2835
设置Analog输出模式:
sudo amixer cset numid=3 1
sudo aplay test.wav
检查是否识别出了 USB 设备
lsusb
dmesg | grep USB
安装 ALSA 的录音应用软件
sudo apt-get -y  install  alsa-utils   pulseseaudio
arecord  -L
arecord –device=hw:1,0 –format S16_LE –rate 44100 -c1 test.wav
–device=hw:1,0 是定义录音的设备. –format S16_LE 是定义 signed 16-bit (S16_LE) 音频. 码率是: 44100 Hz (--rate 44100) 后面的参数是定义为mono 格式 (-c1) , 文件名为: test.wav
aplay –device=plughw:1,0 test.wav
调节麦克风音量
alsamixer -c 1
http://www.52pi.net/archives/1596
Python开发的语音控制框架
https://github.com/jasperproject/jasper-client
树莓派、荔枝派、NanoPi、香蕉派、香橙派
树莓派3B并安装Raspbian jessie系统
对麦克风来说，比较重要的几个指标有拾音距离、回声消除、拾音角度、灵敏度等PlayStation Eye和ReSpeaker 2 Mics Pi HAT
音响havit/海威特 M13无线蓝牙音箱手机迷你音响便携户外低音小钢炮49.9元
aplay -l
card 0是树莓派自带的声卡，3.5mm接口的音箱设备，也就是我插的这个音箱，用的是这个声卡，其设备编号为device 0。 device 1则是HDMI的音频输出用到的，这里可以忽略。如果你用具有声音输出的HDMI显示设备，那么可能就需要关注这个device 1了。
nano /home/pi/.asoundrc
pcm.!default {
    type asym
        playback.pcm {
            type plug
            slave.pcm "hw:0,0"
        }
        capture.pcm {
            type plug
            slave.pcm "hw:1,0"
        }
}
ctl.!default {
    type hw
    card 2
}
arecord -d 3 temp.wav
aplay temp.wav
https://post.smzdm.com/p/595414/
sudo apt-get update
sudo apt-get upgrade --yes
sudo apt-get install sox libsox-fmt-mp3 git-core python-dev bison libasound2-dev libportaudio-dev python-pyaudio libatlas-base-dev python-pymad --yes
sudo easy_install pip
https://github.com/wzpan/dingdang-robot
https://github.com/dingdang-robot/dingdang-robot
https://github.com/wzpan/wukong-robot
https://github.com/musistudio/wukong-robot-install-script
http://www.turingapi.com/
https://github.com/jasperproject/jasper-client
https://github.com/yunxiyinzhe/jasper-client

http://www.yfworld.com/?p=2416
树莓派的默认登录密码是什么？
A: 用户名: pi，密码: raspberry。
#设置root密码
$sudo passwd root
#解锁root用户
$sudo passwd --unlock root
#切换当前用户到root
$su root
启动树莓派的图形界面
命令行中输入startx。如果要设置开机启动默认为图形模式，可使用 raspi-config 命令进行配置
Q: 如何格式化输出当前系统时间？
A: 使用 date -d today +“格式化参数” 。如下例所示，引号内为格式化字符串，可自行修改为需要的格式：
date -d today +"%Y-%m-%d %H:%M:%S"
A: 查看CPU温度（读数除以1000）：
$cat /sys/class/thermal/thermal_zone0/temp
查看GPU温度：
$/opt/vc/bin/vcgencmd measure_temp
如何修改树莓派HDMI显示的分辨率？
A: 修改SD卡中的 config.txt  配置文件，配置方法见此处。
树莓派如何设置静态IP地址？
A: 修改 /etc/network/interfaces  配置文件，配置方法为：
iface eth0 inet static
address 192.168.1.100  # Static IP Address
netmask 255.255.255.0  # Netmask
gateway 192.168.1.1    # Gateway
Q: 如何查看树莓派已载入的模块和已加载的USB设备？
A: 分别使用 lsmod 和 lsusb 命令。如果要查看所有加载的设备，直接输入 ls /dev 查看设备虚拟文件夹。
Q: 树莓派支持哪些USB摄像头？
A: 见 RPi USB Webcameras。支持的较好的还是罗技和微软的低分辨率型号。有些摄像头功耗较大，需要外部供电。
http://elinux.org/RPi_USB_Webcams
Q: 树莓派支持哪些USB无线网卡？
A: 见 RPi USB Wi-Fi Adaptors。推荐EDUP的迷你WiFi网卡以及树莓派官方销售的配套网卡。
https://elinux.org/RPi_USB_Wi-Fi_Adapters
Q: 树莓派如何配置无线网络？
A: 分为两步：1、设置wlan0接口，2、设置WiFi配置文件。
第一步，在树莓派命令行中输入：sudo vim /etc/network/interfaces
在打开的文件中添加：
auto wlan0
allow-hotplug wlan0
iface wlan0 inet dhcp
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
第二步，在树莓派命令行中输入：sudo vim /etc/wpa_supplicant/wpa_supplicant.conf
在打开的文件中末尾添加WiFi ssid和密码：
network={
ssid="无线网络ssid"
psk="无线网络密码"
proto=RSN
key_mgmt=WPA-PSK
pairwise=CCMP
auth_alg=OPEN
}
插入无线网卡，重启树莓派即可。
Q: 树莓派兼容的SD卡？
A: 该页面给出了所有树莓派可以使用的SD卡型号和大小：RPi_SD_cards。
https://elinux.org/RPi_SD_cards
sudo apt-get install mplayer
Q: 树莓派如何播放视频？
A: 安装 omxplayer，支持 1080P 的 AVI 和 MP4 硬解码。
$sudo apt-get install libopencv-dev python-opencv

sudo apt-get install libavahi-compat-libdnssd-dev
sudo npm install -g --unsafe-perm homebridge
sudo npm install -g homebridge-homeassistant
sudo pip3 install homeassistant
mkdir ~/.homeassistant
vi ~/.homeassistant/configuration.yaml
sudo hass --open-ui

brew install swig portaudio sox
Snowboy唤醒
　　1、一个支持 Snowboy，并带有麦克风的设备；
　　2、一个训练好的模型，可以从 https://snowboy.kitt.ai/dashboard 获取，可以自己训练，也可以下载训练好的模型，但是下载的时候，需要自己录入自己的语音。
下载安装
https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/rpi-arm-raspbian-8.0-1.2.0.tar.bz2
获取源代码：$ git clone https://github.com/Kitt-AI/snowboy.git
编译 Python3 绑定：$ cd snowboy/swig/Python3 && make
$ sudo apt-get install pulseaudio
sudo apt-get install sox
sox -d -d #对着麦克风说话，确认可以听到自己的声音
sudo apt-get install python3-pyaudio python-pyaudio libasound2-dev
sudo apt-get install swig3.0
wget http://downloads.sourceforge.net/swig/swig-3.0.10.tar.gz
sudo apt-get install libpcre3 libpcre3-dev
./configure --prefix=/usr                  \
        --without-clisp                    \
        --without-maximum-compile-warnings &&
make
make install &&
install -v -m755 -d /usr/share/doc/swig-3.0.10 &&
cp -v -R Doc/* /usr/share/doc/swig-3.0.10
sudo apt-get install libmagic-dev libatls-base-dev
wget http://www.portaudio.com/archives/pa_stable_v190600_20161030.tgz
tar -zxf pa_stable_v190600_20161030.tgz
#解压之后的文件夹名称是 portaudio
cd portaudio
sudo ./configure
sudo make && make install
pip install pyaudio
rec temp.wav
python demo.py snowboy.pmdl
如果使用的是树莓派，你还需要在~/.asoundrc更改声卡设置：
  type asym
   playback.pcm {
     type plug
     slave.pcm "hw:0,0"
   }
   capture.pcm {
     type plug
     slave.pcm "hw:1,0"
   }
}
python3 demo.py resources/models/snowboy.umdl
输入 sudo apt-get install vim
sudo apt-get update
更换源
sudo vim /etc/apt/sources.list
deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi
sudo apt-get update
sudo vim /etc/apt/sources.list.d/raspi.list
deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui
deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get -y install ttf-wqy-zenhei
sudo raspi-config
选择 Localisation Options 然后再选 Change Locale
去掉 en_GB.UTF-8 UTF-8 ，勾上 en_US.UTF-8 UTF-8 和zh_CN.UTF-8 UTF-8 和 zh_CN.GBK GBK ，然后按下Tab键，选确定，然后选zh_CN.UTF-8
安装拼音输入法
sudo apt-get -y install scim-pinyin
安装五笔输入法
sudo apt-get -y install scim-tables-zh
sudo reboot
vi ~/.asoundrc 更改声卡设置
type asym
   playback.pcm {
     type plug
     slave.pcm "hw:0,0"
   }
   capture.pcm {
     type plug
     slave.pcm "hw:1,0"
   }
}
进入官方示例目录 snowboy/examples/Python3 并运行以下命令：
$ python3 demo.py resources/models/snowboy.umdl
然后对着麦克风清晰地讲出“snowboy”，如果可以听到“滴”的声音，则安装配置成功。
PS：官方源代码使用 Python3 测试有报错，经测试需修改 snowboy/examples/Python3 目录下的 snowboydecoder.py 文件。
将第 5 行代码 from * import snowboydetect 改为 import snowboydetect 即可直接运行。
https://www.cnblogs.com/lovesKey/p/11080448.html

Phabricator ，据说是 Facebook 内部使用的 Code Review 平台。我在搭建试用了几分钟后就觉得这个就是我们要的平台：
基于 LAMP 架构，部署简单；
无需像 Gerrit 那样强绑定代码仓库；
多次 commit 自动合并成一个；
提供了配套的 CLI 工具 Arcanist；
平台开放 API （尽管不怎么完善）；
类似 Facebook 的 UI，颜值够高，容易上手。

pip3 install myqr
myqr http://weixin.qq.com/r/khy5oY7EN9NIrcrC90mA
myqr http://weixin.qq.com/r/khy5oY7EN9NIrcrC90mA -n Python3X.jpg -d E:\
myqr http://weixin.qq.com/r/khy5oY7EN9NIrcrC90mA  -v 10 -l M
-v ：定义二维码的大小，范围为 1 ~ 40，默认大小取决于输入的内容。
-l ： 定义二维码纠错率，也就是说二维码被遮挡一部分仍然被识别出来，有四个等级，分别是L(7%)、M(15%)、Q(25%)、H(30%)。默认情况是最高等级的H
myqr http://weixin.qq.com/r/khy5oY7EN9NIrcrC90mA -p peiqi.jpg -c
myqr http://weixin.qq.com/r/khy5oY7EN9NIrcrC90mA -p pig.gif -n Python3X.gif -c

TF模型
https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models-coco-models
中文书写字数据集
http://www.nlpr.ia.ac.cn/databases/handwriting/Home.html


https://github.com/SkalskiP/yolov3
https://github.com/ultralytics/yolov3
pip3 install -U -r requirements.txt

python3 detect.py --source ...
Image: --source file.jpg
Video: --source file.mp4
Directory: --source dir/
Webcam: --source 0
RTSP stream: --source rtsp://170.93.143.139/rtplive/470011e600ef003a004ee33696235daa
HTTP stream: --source http://wmccpinetop.axiscam.net/mjpg/video.mjpg
python3 detect.py --cfg cfg/yolov3.cfg --weights weights/yolov3.weights
python3 detect.py --cfg cfg/yolov3-tiny.cfg --weights weights/yolov3-tiny.weights
python3 detect.py --cfg cfg/yolov3-spp.cfg --weights weights/yolov3-spp.weights

https://drive.google.com/drive/folders/1uxgUBemJVw9wZsdpboYbzUN4bcRhsuAI

https://github.com/ultralytics/xview-yolov3

图片生成
https://github.com/nuno-faria/tiler
https://github.com/youyuge34/PI-REC

人脸变形
pip3 install pychubby
https://github.com/jankrepl/pychubby
pc list
pc perform Smile INPUT_IMG_PATH
pc perform Smile INPUT_IMG_PATH OUTPUT_IMG_PATH

自动问答游戏
https://github.com/googlearchive/dialogflow-trivia-game-nodejs

测试网速
pip3 install speedtest-cli
speedtest-cli -h

高质量的动漫视频实时升频器
https://github.com/bloc97/Anime4K

MACOS开源应用
https://github.com/serhii-londar/open-source-mac-os-apps

重复图像查找
https://github.com/idealo/imagededup
pip3 install imagededup
from imagededup.methods import PHash
phasher = PHash()
encodings = phasher.encode_images(image_dir='path/to/image/directory')
duplicates = phasher.find_duplicates(encoding_map=encodings)
from imagededup.utils import plot_duplicates
plot_duplicates(image_dir='path/to/image/directory', duplicate_map=duplicates, filename='ukbench00120.jpg')

配置同步工具（OSX/LINUX）
https://github.com/lra/mackup
https://github.com/alichtman/shallow-backup

开源工具
https://github.com/geeeeeeeeek/electronic-wechat
https://github.com/overtake/TelegramSwift
https://github.com/dbeaver/dbeaver
https://dbeaver.io/download/
https://github.com/Studio3T/robomongo
https://github.com/Paxa/postbird
https://github.com/Uncommon/Xit
https://github.com/onmyway133/IconGenerator
https://github.com/agalwood/Motrix
https://github.com/qilin-editor/qilin-app
https://github.com/wellsjo/JSON-Splora
https://github.com/wesnoth/wesnoth
https://github.com/gragrance/CaptuocrToy
https://github.com/onmyway133/GifCapture
https://github.com/BafS/Material-Colors-native
https://github.com/objective-see/LuLu
https://github.com/shadowsocks/ShadowsocksX-NG
https://github.com/eczarny/spectacle
https://github.com/threatland/TL-BOTS
https://github.com/threatland/TL-TROJAN
https://github.com/threatland/TL-FRAUD
https://github.com/Awesome-Windows/Awesome
https://github.com/luong-komorebi/Awesome-Linux-Software
https://github.com/luong-komorebi/Awesome-Linux-Software/blob/master/README_zh-CN.md
https://github.com/yadox666/The-Hackers-Hardware-Toolkit
https://github.com/zhaoolee/StarsAndClown
https://github.com/hzlzh/Best-App
https://github.com/Louiszhai/tool
https://github.com/Mortennn/Dozer
https://github.com/wting/autojump
https://github.com/Louiszhai/IHeader
http://wproxy.org/whistle/install.html
https://github.com/webtorrent/webtorrent
https://github.com/iikira/BaiduPCS-Go

https://github.com/zhaoolee/ChromeAppHeroes
https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop
https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?utm_source=chrome-ntp-icon
https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc
https://chrome.google.com/webstore/detail/page-ruler/emliamioobfffbgcfdchabfibonehkme
https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi
https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd
https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc
https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom
https://chrome.google.com/webstore/detail/blipshot-one-click-full-p/mdaboflcmhejfihjcbmdiebgfchigjcf

学习
https://github.com/imhuay/Algorithm_Interview_Notes-Chinese
https://github.com/apachecn/AiLearning
https://github.com/0voice/interview_internal_reference
https://github.com/wangzheng0822/algo
https://github.com/WenDesi/lihang_book_algorithm
https://github.com/yuanxiaosc/DeepNude-an-Image-to-Image-technology
https://github.com/QUANTAXIS/QUANTAXIS
https://github.com/apachecn/sklearn-doc-zh
https://github.com/SmirkCao/Lihang
https://github.com/Jack-Lee-Hiter/AlgorithmsByPython
https://github.com/apachecn/pytorch-doc-zh
https://github.com/makelove/OpenCV-Python-Tutorial
https://github.com/yoyoyo-yo/Gasyori100knock
https://github.com/daliansky/XiaoMi-Pro-Hackintosh
https://github.com/scutan90/DeepLearning-500-questions
https://github.com/unknwon/the-way-to-go_ZH_CN
https://github.com/Snailclimb/JavaGuide

个人微信机器人
https://github.com/littlecodersh/ItChat
https://github.com/youfou/wxpy
https://github.com/Urinx/WeixinBot
https://github.com/offu/WeRoBot
https://github.com/littlecodersh/itchatmp

爬虫
https://github.com/testerSunshine/12306
https://github.com/Jack-Cherish/python-spider
https://github.com/jhao104/proxy_pool
https://github.com/pjialin/py12306
https://github.com/zhaipro/easy12306
https://github.com/sfyc23/EverydayWechat
https://github.com/pwxcoo/chinese-xinhua
https://github.com/wangshub/Douyin-Bot
https://github.com/houtianze/bypy
https://github.com/shengqiangzhang/examples-of-web-crawlers
https://github.com/PeterDing/iScript
https://github.com/lining0806/PythonSpiderNotes
https://github.com/chyroc/WechatSogou
https://github.com/Kr1s77/Python-crawler-tutorial-starts-from-zero
https://github.com/XuShaohua/bcloud
https://github.com/Nyloner/Nyspider
https://github.com/lanbing510/DouBanSpider
https://github.com/loadchange/amemv-crawler
https://github.com/xianhu/PSpider
https://github.com/jumper2014/lianjia-beike-spider
https://github.com/moyuanz/DevilYuan

https://github.com/qq547276542/Agriculture_KnowledgeGraph
实时获取新浪 / 腾讯 的免费股票行情 / 集思路的分级基金行情
https://github.com/shidenggui/easyquotation
链家二手房租房在线数据，存量房交易服务平台数据，详细数据分析教程
https://github.com/XuefengHuang/lianjia-scrawler
owllook-在线网络小说阅读网站&小说搜索引擎&小说推荐系统[搜索、追书、收藏、追更、小说API]
https://www.owllook.net/
https://github.com/howie6879/owllook
https://github.com/howie6879/NIYT
https://github.com/howie6879/owllook_gui
https://github.com/howie6879/owllook_api
股票量化框架，支持行情获取以及交易
https://github.com/shidenggui/easyquant
Bilibili 用户爬虫
https://github.com/airingursb/bilibili-user
一个拍照做题程序。输入一张包含数学计算题的图片，输出识别出的数学计算式以及计算结果
https://github.com/Roujack/mathAI
中文命名实体识别
https://github.com/Determined22/zh-NER-TF
https://github.com/ymcui/Chinese-BERT-wwm

动态二维码
https://github.com/sylnsfar/qrcode
pip3 install myqr
myqr https://github.com
myqr https://github.com -v 10 -l Q
myqr https://github.com -n github_qr.jpg -d .../paths/
myqr https://github.com -p github.jpg
myqr https://github.com -p github.jpg -c
myqr https://github.com -p github.jpg [-c] -con 1.5 -bri 1.6

https://ai.qq.com/doc/detectface.shtml
https://api.ai.qq.com/fcgi-bin/face/face_detectface
https://api.ai.qq.com/fcgi-bin/face/face_detectmultiface

陌陌风控系统
https://github.com/momosecurity/aswan

使用spring boot打造文件文档在线预览项目解决方案，支持doc、docx、ppt、pptx、xls、xlsx、zip、rar、mp4，mp3以及众多类文本如txt、html、xml、java、properties、sql、js、md、json、conf、ini、vue、php、py、bat、gitignore等文件在线预览
https://github.com/kekingcn/kkFileView
ERP
https://github.com/osbzr/gooderp_addons

把萌萌哒的看板娘抱回家
https://github.com/stevenjoezhang/live2d-widget
https://github.com/fghrsh/live2d_api
表情包
https://github.com/zhaoolee/ChineseBQB
女装
https://github.com/komeiji-satori/Dress
压缩图片
https://github.com/GoogleChromeLabs/squoosh/
思源黑体 | 思源黑體 | 思源黑體字体
https://github.com/adobe-fonts/source-han-sans

纯 Go 写的直播服务器
https://github.com/gwuhaolin/livego
syncd是一款开源的代码部署工具
https://github.com/dreamans/syncd
扩展企业安全测试主动诱导型开源蜜罐框架系统
https://github.com/hacklcx/HFish

https://github.com/poodarchu/Det3D

https://github.com/Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement
身份证提取
https://github.com/awslabs/autogluon/
深度学习
https://alim0x.gitbooks.io/awesome-linux-software-zh_cn/content/
LINUX常用软件

https://gitee.com/zfj1128/ZFJObsLib_dmg
IOS包混淆工具

抠图
https://github.com/saic-mdal/lama
https://github.com/senguptaumd/Background-Matting
集成检测和跟踪
https://github.com/feichtenhofer/Detect-Track
https://github.com/xingyizhou/CenterTrack
https://github.com/longcw/MOTDT
https://github.com/phil-bergmann/tracking_wo_bnw
https://github.com/Zhongdao/Towards-Realtime-MOT
https://github.com/nightmaredimple/libmot
语义分割新trick，条纹池化取代空间池化
https://github.com/Andrew-Qibin/SPNet
图像生成
https://github.com/tohinz/ConSinGAN
联合检测分割网络
https://github.com/luogen1996/MCN
目标检测
https://github.com/sfzhang15/ATSS
https://github.com/KiveeDong/CentripetalNet
https://github.com/amusi/awesome-object-detection
https://github.com/WongKinYiu/CrossStagePartialNetworks
https://github.com/JaminFong/FNA
https://github.com/arashwan/matrixnet
https://github.com/Thinklab-SJTU/R3Det_Tensorflow
https://github.com/chaozhong2010/HRSID
3D目标检测
https://github.com/google/mediapipe
Excel人脸检测、OCR
https://github.com/amzn/computer-vision-basics-in-microsoft-excel
机器人聊天
https://github.com/jiangdongguo/ChitChatAssistant

变脸
https://github.com/AliaksandrSiarohin/first-order-model
https://github.com/alievk/avatarify
https://github.com/mcreed/zoombot
https://github.com/sdkcarlos/artyom.js/
git clone https://github.com/alievk/avatarify.git
cd avatarify
bash scripts/install_mac.sh

物体识别检测
https://github.com/google/automl
https://github.com/zylo117/Yet-Another-EfficientDet-Pytorch
https://github.com/toandaominh1997/EfficientDet.Pytorch
https://github.com/signatrix/ficientdet
https://github.com/yhenon/pytorch-retinanet
https://github.com/lukemelas/EfficientNet-PyTorch
https://github.com/amdegroot/ssd.pytorch
https://github.com/open-mmlab/mmdetection

人脸识别
https://github.com/dlunion/DBFace
https://storage.googleapis.com/tfjs-models/demos/facemesh/index.html
https://storage.googleapis.com/tfjs-models/demos/handpose/index.html
https://github.com/google/mediapipe/tree/master/mediapipe/graphs/face_detection
https://github.com/google/mediapipe/blob/master/mediapipe/docs/hand_tracking_mobile_gpu.md
https://www.kaggle.com/c/deepfake-detection-challenge/overview

深度神经网络的一种新的优化技术
https://github.com/Yonghongwei/Gradient-Centralization

算法
https://github.com/labuladong/fucking-algorithm

2D照片变3D
https://github.com/bmild/nerf
https://github.com/vt-vl-lab/3d-photo-inpainting

支持输出格式：CSV	YOLO	VOC XML	VGG JSON	COCO	PIXEL MASK
https://github.com/SkalskiP/make-sense
https://www.makesense.ai/
https://github.com/SkalskiP/ILearnDeepLearning.py/tree/master/02_data_science_toolkit/02_yolo_object_detection
https://github.com/SkalskiP/ILearnDeepLearning.py

从单个图像进行3D人体重建
https://github.com/ZhengZerong/DeepHuman
检测3D对象
https://github.com/sshaoshuai/PCDet

深度学习做自动驾驶
https://github.com/ikergarcia1996/Self-Driving-Car-in-Video-Games

拼音首字母缩写翻译工具
https://github.com/itorr/nbnhhsh
https://lab.magiconch.com/nbnhhsh/

https://github.com/Wakinguup/Underwater_detection
https://github.com/zhanghang1989/ResNeSt

https://github.com/Adamdad/keras-YOLOv3-mobilenet
https://github.com/rafaelpadilla/Object-Detection-Metrics

聊天机器人
https://github.com/ideamark/roby-chatbot
https://github.com/cisco/mindmeld
简繁中文拼写检查工具 中文拼写检错 / 中文拼写纠错 / 中文拼写检查
https://github.com/iqiyi/FASPell

开源矢量相似度搜索引擎
https://github.com/milvus-io/milvus
VR 图像合成系统
https://github.com/facebookresearch/DeepFocus
对象检测工具
https://github.com/open-mmlab/mmdetection
https://github.com/open-mmlab/mmcv
12306验证码识别
https://github.com/aaronshan/12306-captcha
端到端自动语音识别（ASR）
https://github.com/paddlepaddle/DeepSpeech
人脸识别算法
https://github.com/wy1iu/sphereface

实时隐身
https://github.com/jasonmayes/Real-Time-Person-Removal
https://codepen.io/jasonmayes/pen/GRJqgma
https://github.com/zllrunning/video-object-removal

目标跟踪/目标检测/目标分割
https://github.com/Stephenfang51/tracklite
https://github.com/facebookresearch/moco
https://github.com/ucas-vg/TinyBenchmark
https://github.com/WXinlong/SOLO
https://github.com/youngwanLEE/vovnet-detectron2
https://github.com/youngwanLEE/CenterMask
https://github.com/youngwanLEE/centermask2
https://github.com/aim-uofa/AdelaiDet
https://github.com/facebookresearch/detectron2/tree/master/projects/PointRend
https://github.com/zju3dv/snake
https://github.com/xieenze/PolarMask
https://github.com/AlexeyAB/darknet
https://mp.weixin.qq.com/s/PY3-EMZrtnfacslLUNLDcg
https://github.com/jario-jin/spire-image-manager
https://github.com/bfshi/DGAM-Weakly-Supervised-Action-Localization
https://github.com/TuSimple/simpledet

用于多语言无监督或受监督词嵌入的库
https://github.com/facebookresearch/MUSE
用于快速最近邻居搜索
https://github.com/facebookresearch/faiss
用于快速文本表示和分类的库
https://github.com/facebookresearch/fastText/
https://fasttext.cc/docs/en/crawl-vectors.html

https://github.com/facebookresearch/LASER
https://github.com/facebookresearch/UnsupervisedMT
https://github.com/facebookresearch/XLM


https://github.com/PyTorchLightning/pytorch-lightning
alfred-py：深度学习实用程序库，用于可视化和传感器融合
https://github.com/jinfagang/alfred
https://github.com/jinfagang/thor
https://github.com/NVIDIA/runx
基于PyTorch的计算机视觉深度学习框架 https://pytorchcv.com
https://github.com/donnyyou/torchcv

移动视觉模型和代码
https://github.com/facebookresearch/mobile-vision
https://github.com/facebookresearch/ClassyVision

对象检测和分割平台
https://github.com/facebookresearch/detectron2
https://github.com/facebookresearch/Detectron
推理系统
https://github.com/facebookresearch/ReAgent
自然语言建模框架
https://github.com/facebookresearch/pytext
Minecraft中的虚拟助手机器人
https://github.com/facebookresearch/craftassist
PyRobot：开源机器人研究平台
https://github.com/facebookresearch/pyrobot

人像卡通化探索项目
https://github.com/minivision-ai/photo2cartoon

声音分离
https://github.com/google-research/sound-separation

https://github.com/PKUbahuangliuhe/CBNet
https://github.com/VDIGPKU/CBNet
https://github.com/PaddlePaddle/PaddleDetection
https://github.com/tensorflow/tpu/tree/master/models/official/detection

https://github.com/google/automl/tree/master/efficientdet
https://github.com/zylo117/Yet-Another-EfficientDet-Pytorch
3D人体姿态与形态估计
https://github.com/mkocabas/VIBE

StyleGAN 人脸合成 换脸
https://github.com/podgorskiy/ALAE

https://github.com/HRNet/HRNet-Object-Detection
https://github.com/HRNet/HRNet-Image-Classification
https://github.com/HRNet/HRNet-Facial-Landmark-Detection
密集场景检测新方法：一个候选框，多个预测结果
https://github.com/Purkialo/CrowdDet

对象检测
https://github.com/ShuLiu1993/PANet
https://github.com/qijiezhao/M2Det
https://github.com/ruinmessi/ASFF
https://github.com/google/automl/tree/master/efficientdet
https://github.com/zylo117/Yet-Another-EfficientDet-Pytorch
https://github.com/ifzhang/FairMOT

YOLOv4
https://github.com/WongKinYiu/PyTorch_YOLOv4
https://github.com/argusswift/YOLOv4-PyTorch
https://github.com/ultralytics/yolov3
https://github.com/amusi/YOLO-Reproduce-Summary

https://github.com/pjreddie/darknet
https://github.com/AlexeyAB/darknet
cd darknet
vi Makefile
GPU=0
CUDNN=0
CUDNN_HALF=0
OPENCV=1
make -j8
make -j$(sysctl -n hw.ncpu)

clang: fatal error: unsupported option '-fopenmp'
brew install gcc
brew link --overwrite gcc
brew install llvm
ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang
ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang++


检测单张图像
./darknet detector test cfg/coco.data cfg/yolov4.cfg models/yolov4.weights -thresh 0.25
检测给定路径的单张图像（参数最后的路径需要写待检测图像的路径
./darknet detector test cfg/coco.data cfg/yolov4.cfg models/yolov4.weights -ext_output ./test.jpg
检测给定路径的单个视频
./darknet detector demo cfg/coco.data cfg/yolov4.cfg models/yolov4.weights -ext_output ./test.mp4
检测给定路径的单个视频，并将检测结果保存为视频
./darknet detector demo cfg/coco.data cfg/yolov4.cfg models/yolov4.weights ./test.mp4 -out_filename res.avi
利用摄像机实时检测（YOLOv4）
./darknet detector demo cfg/coco.data cfg/yolov4.cfg models/yolov4.weights -c 0
利用摄像机实时检测（YOLOv3-Tiny）
./darknet detector demo cfg/coco.data cfg/yolov3-tiny.cfg models/yolov3-tiny.weights -c 0
在GPU1上检测给定路径的单个视频
./darknet detector demo cfg/coco.data cfg/yolov3-tiny.cfg models/yolov3-tiny.weights -i 1 test.mp4
检测列表data/train.txt中图像，并将结果保存在result.json
./darknet detector test cfg/coco.data cfg/yolov4.cfg models/yolov4.weights -ext_output -dont_show -out result.json < data/train.txt
检测列表data/train.txt中图像，并将结果保存在result.txt
./darknet detector test cfg/coco.data cfg/yolov4.cfg models/yolov4.weights -dont_show -ext_output < data/train.txt > result.txt
./darknet detector demo data/coco.data yolov4.cfg yolov4.weights http://192.168.0.80:8080/video?dummy=param.mjpg -i 0

./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights test.mp4 -dont_show -ext_output
./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights test.mp4 -benchmark

下载数据集标注工具：(https://pan.baidu.com/s/1EE52cDStjIxsRgM_a9pWQQ) (password: 4b2q) 或者 http://121.36.68.10/tools/ImageLabelTools-4.1.7.zip.
数据集管理软件github地址：https://github.com/jario-jin/spire-image-manager
https://mp.weixin.qq.com/s/nKpijexBnMJIf8FhTXktwQ
https://pjreddie.com/darknet/yolo/
https://pjreddie.com/darknet/train-cifar/

./darknet detector train data/test3/yolov4-test3.data cfg/yolov4-c3.cfg models/yolov4.conv.137
 mosaic=1 - compile Darknet with OpenCV for using mosaic=1
修改：cfg/yolov4-test3.cfg 文件 mosaic=0

./darknet classifier train cfg/cifar.data cfg/cifar_small.cfg
./darknet classifier valid cfg/cifar.data cfg/cifar_small.cfg backup/cifar_small.backup
./darknet classifier train cfg/cifar.data cfg/cifar_small.cfg backup/cifar_small.backup
./darknet classifier valid cfg/cifar.data cfg/cifar_small.cfg backup/cifar_small.backup
./darknet classifier predict cfg/cifar.data cfg/cifar_small.cfg backup/cifar_small.weights 0_cat.png

./darknet detector train data/VOC2007/voc.data cfg/yolov3-voc.cfg models/darknet53.conv.74
# 从0开始训练
./darknet detector train data/VOC2007/voc.data cfg/yolov3-voc.cfg
# 加载预训练模型
# wget https://pjreddie.com/media/files/darknet53.conv.74
./darknet detector train data/VOC2007/voc.data cfg/yolov3-voc.cfg darknet53.conv.74
# 多GPU训练
./darknet detector train data/VOC2007/voc.data cfg/yolov3-voc.cfg -gpu 0,1,2,3,4,5,6
# 断点训练
./darknet detector train data/VOC2007/voc.data cfg/yolov3-voc.cfg backup/xxx.backup

./darknet detector train data/hat/yolov4-hat.data cfg/yolov4-test3.cfg models/yolov4.conv.137
./darknet detector train data/hat/yolov4-hat.data cfg/yolov4-test3.cfg backup/yolov4-test3.backup
./darknet detector test data/hat/yolov4-hat.data cfg/yolov4-test3.cfg backup/yolov4.weights -ext_output ./test.jpg

find `pwd`/train -name \*.png > train.list
find `pwd`/train -name \*.jpg > train.list

labelImg
https://github.com/tzutalin/labelImg
brew install qt
brew install libxml2
or using pip
pip3 install pyqt5 lxml
make qt5py3
python3 labelImg.py
python3 labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]

pip3 install labelImg
labelImg

https://github.com/wkentaro/labelme
brew install pyqt  # maybe pyqt5
pip install labelme  # both python2/3 should work
# or install standalone executable / app
# NOTE: this only installs the `labelme` command
brew install wkentaro/labelme/labelme
brew cask install wkentaro/labelme/labelme
labelme  # just open gui
# tutorial (single image example)
cd examples/tutorial
labelme apc2016_obj3.jpg  # specify image file
labelme apc2016_obj3.jpg -O apc2016_obj3.json  # close window after the save
labelme apc2016_obj3.jpg --nodata  # not include image data but relative image path in JSON file
labelme apc2016_obj3.jpg \
  --labels highland_6539_self_stick_notes,mead_index_cards,kong_air_dog_squeakair_tennis_ball  # specify label list
# semantic segmentation example
cd examples/semantic_segmentation
labelme data_annotated/  # Open directory to annotate all images in it
labelme data_annotated/ --labels labels.txt  # specify label list with a file

https://rectlabel.com/
http://www.jinglingbiaozhu.com/

https://github.com/opencv/cvat
https://github.com/microsoft/VoTT
https://github.com/Labelbox/Labelbox
http://www.robots.ox.ac.uk/~vgg/software/via/
https://gitlab.com/vgg/via/tree/master
https://github.com/abreheret/PixelAnnotationTool
https://github.com/AlexeyAB/Yolo_mark
https://github.com/puzzledqs/BBox-Label-Tool
https://github.com/lanbing510/ImageLabel
https://github.com/drainingsun/ybat
https://github.com/springzfx/point-cloud-annotation-tool
https://github.com/cvondrick/vatic
https://github.com/cvhciKIT/sloth
https://github.com/tzutalin/ImageNet_Utils

https://github.com/google-research/google-research

BlockPi树莓派图形化编程
https://github.com/alienzhangyw/BlockPi
视频补帧 AI 工具 DAIN
https://github.com/baowenbo/DAIN
POSE动画
https://github.com/yemount/pose-animator/
用于合成多视图行人检测数据集的工具箱MultiviewX
https://github.com/hou-yz/MultiviewX

人脸检测YOLOv3
https://github.com/ouyanghuiyu/darknet_face_with_landmark
./darknet detector test ./data/face.data  ./cfg/mbv2_yolov3_face.cfg  ./models/mbv2_yolov3_face_final.weights  ./test_imgs/input/selfie.jpg  -dont_show

https://github.com/huawei-noah/Disout

vn.py是一套基于Python的开源量化交易系统开发框架
https://github.com/vnpy/vnpy

kkfileview 文件在线预览
https://github.com/kekingcn/kkFileView
docker pull keking/kkfileview
docker run -it -p 8012:8012 keking/kkfileview

视频补帧工具 DAIN
https://github.com/baowenbo/DAIN
分辨率提升工具 ESRGAN
https://github.com/xinntao/ESRGAN
黑白图像着色工具 DeOldify
https://github.com/jantic/DeOldify

Python生成测试数据 伪数据包
pip install Faker
https://github.com/joke2k/faker
https://github.com/fzaninotto/Faker
from faker import Faker
fake = Faker(['zh_CN'])

https://github.com/apple/coremltools
https://github.com/ultralytics/yolov3
https://github.com/likedan/Awesome-CoreML-Models

https://github.com/ouyanghuiyu/chineseocr_lite
https://github.com/chineseocr/chineseocr
https://github.com/chineseocr/darknet-ocr
cd darknet && cp Makefile-cpu Makefile && make
sudo pip3 install -r requirements.txt
python3 app.py 8080
https://github.com/WenmuZhou/PSENet.pytorch
https://github.com/chineseocr/table-ocr

物体检测End-to-End Object Detection with Transformers
https://github.com/facebookresearch/detr
飞船生成器
https://github.com/a1studmuffin/SpaceshipGenerator

https://github.com/openai/gpt-2
https://github.com/openai/gpt-3
https://github.com/openai/image-gpt
https://github.com/karpathy/minGPT
https://github.com/huggingface/transformers

https://github.com/wangyuxin87/ContourNet
https://github.com/joe-siyuan-qiao/DetectoRS
https://github.com/ultralytics/yolov5
https://github.com/JuliaLang/julia
https://github.com/scipy/scipy
https://github.com/penrose/penrose
红警1 游戏开源
https://github.com/electronicarts/CnC_Remastered_Collection
拯救渣画质，马赛克图秒变高清
https://github.com/adamian98/pulse

https://github.com/amusi/CVPR2020-Code
https://github.com/AdamKortylewski/CompositionalNets
https://github.com/shenyunhang/NA-fWebSOD/
https://github.com/caiqi/sample-weighting-network
https://github.com/JialeCao001/D2Det
https://github.com/Anymake/DRN_CVPR2020
https://github.com/jshilong/SEPC
https://github.com/Sense-X/TSD
https://github.com/jshilong/SEPC
https://github.com/megvii-model/CrowdDetection
https://github.com/NVlabs/wetectron
https://github.com/sfzhang15/ATSS
https://github.com/ZiweiWangTHU/BiDet
https://github.com/chaoqichen/HTCN
https://github.com/KiveeDong/CentripetalNet
https://github.com/ggjy/HitDet.pytorch
https://github.com/google/automl/tree/master/efficientdet
https://github.com/skyhehe123/SA-SSD
https://github.com/NUAAXQ/MLCVNet
https://github.com/tomztyang/3DSSD
https://github.com/mileyan/pseudo-LiDAR_e2e
https://github.com/zju3dv/disprcn
https://github.com/chenyilun95/DSGN
https://github.com/yinjunbo/3DVID
https://github.com/sshaoshuai/PV-RCNN
https://github.com/WeijingShi/Point-GNN
https://github.com/Scalsol/mega.pytorch
https://github.com/ohhhyeahhh/SiamCAR
https://github.com/alanlukezic/d3s
https://github.com/skyoung/ROAM
https://github.com/VisualComputingInstitute/SiamR-CNN
https://github.com/MasterBin-IIAU/CSA
https://github.com/Daikenan/LTMU
https://github.com/vision4robotics/AutoTrack
https://github.com/visionml/pytracking
https://github.com/zlai0/MAST
https://github.com/hqucv/siamban
https://github.com/Alpha-Video/AlphaVideo

Anaconda Installers
https://www.anaconda.com/products/individual
https://github.com/spyder-ide/spyder
pip3 install spyder
spyder3
https://ftp.gnu.org/gnu/octave
brew install octave
https://octave.sourceforge.io/packages.php
http://www.gnu.org/software/octave/
https://wiki.octave.org/Octave_for_macOS
https://github.com/octave-app/octave-app/releases/download/v4.4.1-u1/Octave-4.4.1-u1.dmg
https://octave-app.org/Download.html
https://octave-app.org/Developer-Downloads.html
https://julialang.org/downloads/
https://github.com/JuliaLang/julia
https://www.scilab.org/download/6.1.0
http://www.7d-soft.com/
http://www.gnuplot.info/download.html

TensorFlow、PyTorch、Apache MXNet、Chainer、Keras、Gluon、Horovod、Scikit-learn 和 Deep Graph Library

计数项目：https://sites.google.com/view/repnet
论文：http://openaccess.thecvf.com/content_CVPR_2020/papers/Dwibedi_Counting_Out_Time_Class_Agnostic_Video_Repetition_Counting_in_the_CVPR_2020_paper.pdf
Countix 数据集：https://storage.googleapis.com/deepmind-media/Datasets/countix.tar.gz
Colab Notebook：https://colab.research.google.com/github/google-research/google-research/blob/master/repnet/repnet_colab.ipynb

https://github.com/apache/incubator-mxnet
https://github.com/deepinsight/insightface

https://github.com/supervisely/supervisely
https://github.com/huawei-noah/ghostnet
https://github.com/open-mmlab/OpenSelfSup
https://github.com/aim-uofa/AdelaiDet

离线IP地址定位库
https://github.com/lionsoul2014/ip2region

https://github.com/amusi/YOLO-Reproduce-Summary
PyTorch
https://github.com/Tianxiaomo/pytorch-YOLOv4
https://github.com/bubbliiiing/yolov4-pytorch
TensorFlow
https://github.com/hunglc007/tensorflow-yolov4-tflite
https://github.com/rrddcc/YOLOv4_tensorflow
Keras
https://github.com/david8862/keras-YOLOv3-model-set
https://github.com/miemie2013/Keras-YOLOv4
https://github.com/bubbliiiing/yolov4-keras
https://github.com/Ma-Dan/keras-yolo4
PaddlePaddle
https://github.com/miemie2013/Paddle-YOLOv4
Caffe
https://github.com/ChenYingpeng/caffe-yolov3
https://github.com/ChenYingpeng/darknet2caffe
TensorRT
https://github.com/CaoWGG/TensorRT-YOLOv4
tkDNN
https://github.com/ceccocats/tkDNN

换女装
https://github.com/clovaai/stargan-v2
人体姿势
https://github.com/ildoonet/tf-pose-estimation

https://github.com/didi/athena
https://github.com/didi/ChineseNLP
https://github.com/didi/delta

https://github.com/Media-Smart/vedastr

目标感知
https://github.com/researchmm/TracKit

https://lionbridge.ai/datasets/tensorflow-datasets-machine-learning/
https://medium.com/better-programming/the-22-most-used-python-packages-in-the-world-7020a904b2e

https://github.com/google/tsunami-security-scanner
nmap >= 7.80
ncrack >= 0.7
docker run --name unauthenticated-jupyter-notebook -p 8888:8888 -d jupyter/base-notebook start-notebook.sh --NotebookApp.token=''
bash -c "$(curl -sfL https://raw.githubusercontent.com/google/tsunami-security-scanner/master/quick_start.sh)"
docker 安装
docker run --name unauthenticated-jupyter-notebook -p 8888:8888 -d jupyter/base-notebook start-notebook.sh --NotebookApp.token=''
docker build -t tsunami .
docker run  --network="host" -v "$(pwd)/logs":/usr/tsunami/logs tsunami

https://mp.weixin.qq.com/s/z9fe3upFmoZBbFQOJlrAww
https://opensource.com/article/20/6/kubernetes-raspberry-pi

OCR
https://github.com/JaidedAI/EasyOCR
https://github.com/clovaai/CRAFT-pytorch
https://github.com/clovaai/deep-text-recognition-benchmark
pip install easyocr
pip install git+git://github.com/jaidedai/easyocr.git
import easyocr
reader = easyocr.Reader(['ch_sim','en'])
reader.readtext('chinese.jpg')
easyocr -l ch_sim en -f chinese.jpg --detail=1 --gpu=True

https://github.com/UZ-SLAMLab/ORB_SLAM3
github.com/VDIGPKU/DADA

https://github.com/Shawn-Shan/fawkes

妆造数据集：
http://www.antitza.com/makeup-datasets.html
http://liusi-group.com/projects/BeautyGAN

https://github.com/MCG-NKU/Sal100K
https://github.com/geekxh/hello-algorithm
https://github.com/Oneflow-Inc/oneflow
https://github.com/yangyanli/DO-Conv
https://github.com/iduta/pyconv
https://github.com/Nandan91/ULSAM
https://github.com/zhoudaquan/rethinking_bottleneck_design
https://github.com/zhuogege1943/dgc
https://github.com/eccv2020-4574/DCANet
https://github.com/d-li14/PSConv
https://github.com/megvii-model/WeightNet
https://github.com/ZHANGDONG-NJUST/FPT

https://www.kaggle.com/
https://github.com/microsoft/PowerToys/releases/

https://github.com/jshilong/SEPC
https://github.com/williamhyin/yolov5s_bdd100k
https://github.com/nerminsamet/ppdet
https://github.com/PyTorchLightning/pytorch-lightning
FFA 去雾算法
https://github.com/zhilin007/FFA-Net

Jupyter Notebook 的 28 个技巧
https://mp.weixin.qq.com/s/LbXAoon8xbjjAR_gywOXew

https://github.com/calebcheng00/nba_predictions/blob/master/nba.ipynb
流程自动化工具
https://github.com/mcg-helper/mcg-helper
将图像和视频转换成卡通
https://github.com/experience-ml/cartoonize
https://algorithmia.com/developers
pip install gunicorn
gunicorn --bind 0.0.0.0:8080 --workers 1 --threads 8 --timeout 0 app:app
https://github.com/SystemErrorWang/White-box-Cartoonization
https://github.com/SystemErrorWang/FacialCartoonization
https://github.com/nagadomi/lbpcascade_animeface
https://github.com/nagadomi/animeface-2009

Snowflake（雪花）是Twitter开源的高性能ID生成算法（服务）
https://github.com/twitter-archive/snowflake/tree/scala_28
https://github.com/zjcscut/framework-mesh/tree/master/java-snowflake

https://github.com/google/tensorflow-recorder

中文依存句法分析
https://github.com/baidu/DDParser

逆向工程
https://github.com/blackberry/pe_tree
https://github.com/NationalSecurityAgency/ghidra
python自动检查
https://github.com/facebook/pyre-check
入侵检测
https://github.com/snort3/snort3
C#代码反编译
https://github.com/icsharpcode/ILSpy/releases/tag/v6.1
PcapXray 是一个网络取证工具，它可以捕获网络数据包，并可视化为包括设备标识的网络图，并突出显示重要的通信和文件操作
https://github.com/Srinivas11789/PcapXray
是一个旁路部署的全流量、实时、高性能网络安全监控引擎，基于DPDK开发，集成了DDOS检测和IDPS模块
https://github.com/iqiyi/qnsm
Linux 资源监视器，可以显示处理器、内存、磁盘、网络和进程的使用情况与状态
https://github.com/aristocratos/bashtop
WatchAD 是 360 公司在面临高级域渗透活动的威胁下，研发出的一款威胁检测产品
https://github.com/0Kee-Team/WatchAD
https://www.bigyoung.cn/posts/23/
自动格式化PY代码
https://github.com/hhatto/autopep8
pip install --upgrade autopep8
autopep8 --in-place --aggressive --aggressive <filename>
autopep8 --in-place --recursive .
检查你的代码
pip install flake8

https://github.com/rancher/k3s
GO文件在线预览
https://github.com/leeli73/goFileView
Jessibuca是一款开源的纯H5直播流播放器
https://github.com/langhuihui/jessibuca
http://jessibuca.monibuca.com/

pytorch常用预训练模型
https://github.com/pytorch/vision/tree/master/torchvision/models
https://pytorch-cn.readthedocs.io/zh/latest/torchvision/torchvision-models/
Vearch 是一个分布式向量搜索系统，可以用来计算向量相似度，或用于机器学习领域，如：图像识别、视频识别或自然语言处理等各个领域
https://vearch.readthedocs.io/en/latest/
https://github.com/vearch/vearch
为 VTOL 和无人机设计的开源自主飞行开发框架
https://www.gaas.dev/
https://github.com/generalized-intelligence/GAAS

https://github.com/microsoft/computervision-recipes
https://github.com/microsoft/computervision-recipes/blob/master/scenarios
https://github.com/microsoft/computervision-recipes/blob/master/utils_cv

将 Python 计算代码转换为 Latex 公式
https://github.com/connorferster/handcalcs
链式跟踪算法
https://github.com/pjl1995/CTracker
JS代码转TypeScript
https://github.com/airbnb/ts-migrate
差分隐私
https://github.com/pytorch/opacus

https://github.com/didi/heteta

https://github.com/google-research/tensorflow-coder
https://github.com/seata/seata/releases

https://github.com/intel-isl/OpenBot/tree/master/body

自制树莓派复古街机
https://github.com/maxvfischer/DIY-arcade
https://github.com/maxvfischer/DIY-arcade/tree/master/cad_files

EXCEL操作
pip install openpyxl
https://foss.heptapod.net/openpyxl/openpyxl

https://github.com/dog-qiuqiu/Yolo-Fastest
https://github.com/dog-qiuqiu/MobileNet-Yolo

人体姿态 人体关键点检测
https://github.com/HuangJunJie2017/UDP-Pose

https://github.com/tiangolo/fastapi
https://github.com/apache/airflow
https://github.com/apachecn/AiLearning

金融数据
https://github.com/ranaroussi/yfinance
https://github.com/pydata/pandas-datareader.git
http://tushare.org/macro.html#id7
https://github.com/waditu/tushare

通用的数据生成工具
https://github.com/easysoft/zendata
comNG 是一款具有现代化 UI 设计并且功能强大的串口助手软件。
https://github.com/itas109/CommLite
https://github.com/xenkuo/comNG

人脸识别
https://github.com/biubug6/Pytorch_Retinaface

实例分割
https://github.com/aim-uofa/AdelaiDet
https://github.com/longrongyang/LNCIS
https://github.com//IPIU-detection/SEANet
https://github.com/WXinlong/SOLO
https://github.com/sabarim/STEm-Seg
https://github.com/JialeCao001/SipMask
https://github.com/fanq15/FewX
https://github.com/twangnh/SimCal
https://github.com/Kainmueller-Lab/PatchPerPix
https://github.com/csrhddlam/axial-deeplab
目标检测
https://github.com/CoCoPIE-Pruning/CoCoPIE-ModelZoo/tree/master/YOLObile
https://github.com/Megvii-BaseDetection/BorderDet
https://github.com/Duankaiwen/CPNDet
https://github.com/dbolya/tide
https://github.com/pjl1995/CTracker
https://github.com/open-mmlab/mmdetection
https://github.com/wwdkl/AABO
https://github.com/hkzhang95/DynamicRCNN
https://github.com/aosokin/os2d
https://github.com/kkhoot/PAA
https://github.com/nerminsamet/houghnet
https://github.com/tensorflow/tpu/tree/master/models/official/detection
https://github.com/justimyhxu/Dense-RepPoints
https://github.com/clobotics/piou
https://github.com/Thinklab-SJTU/CSL_RetinaNet_Tensorflow
https://github.com/jiangzhengkai/LSTS
https://github.com/youthHan/HVRNet
https://github.com/shenyunhang/DRN-WSOD
https://github.com/NVlabs/wetectron
https://github.com/mikuhatsune/wsod_transfer
https://github.com/GanlongZhao/CST_DA_detection
https://github.com/chengchunhsu/EveryPixelMatters
https://github.com/jiaxi-wu/MPSR
https://github.com/Peterchen111/FERNet
https://github.com/yijingru/BBAVectors-Oriented-Object-Detection
https://github.com/dog-qiuqiu/Yolo-Fastest
https://github.com/kuanhungchen/awesome-tiny-object-detection

单张图像去噪的空间自适应网络
https://github.com/JimmyChame/SADNet

提升标准ResNet50精度
https://github.com/szq0214/MEAL-V2
https://github.com/rwightman/pytorch-image-models

人像照片卡通化
https://github.com/AliaksandrSiarohin/first-order-model
https://github.com/NVlabs/stylegan2
https://github.com/NVlabs/stylegan3
https://github.com/manicman1999/StyleGAN2-Tensorflow-2.0
Wav2Lip 项目地址：
https://github.com/Rudrabha/Wav2Lip
Lip2Wav 项目地址：
https://github.com/Rudrabha/Lip2Wav

肖像画，完美复刻人物细节
https://github.com/NathanUA/U-2-Net

https://github.com/nidhaloff/igel
英伟达开源「Imaginaire」！九大图像及视频合成方法
https://github.com/NVlabs/imaginaire

Latex工具包
https://github.com/connorferster/handcalcs
识别「幻影」
https://github.com/ymirsky/GhostBusters
语义分割
https://github.com/mrgloom/awesome-semantic-segmentation

https://github.com/spotify/klio
https://github.com/huiyang865/plugnet
股票交易
https://github.com/freqtrade/freqtrade
自动续订 Let’s Encrypt 的免费 SSL 证书
https://github.com/jaygreco/PA_SSL_AutoRenew
机器翻译
https://github.com/pytorch/fairseq/tree/master/examples/m2m_100

上海交大开源医疗版MNIST数据集
https://github.com/MedMNIST/MedMNIST

https://github.com/lfwa/carbontracker

开源飞行模拟器飞机
https://www.flightgear.org/download/
视频会议
https://github.com/jitsi/jitsi
https://github.com/jitsi/jitsi-meet
https://meet.jit.si/

https://github.com/HiLab-git/SSL4MIS
人脸识别的可解释性(XFR)
https://github.com/stresearch/xfr

图像分类是图像分割、目标检测的基础
https://github.com/PaddlePaddle/PaddleClas

编程网站，边玩游戏，边学Python
https://www.codingame.com/
https://codecombat.com/play
https://checkio.org/
http://www.codewars.com/

词向量 Word2vec GloVe
https://github.com/danielfrg/word2vec
https://github.com/stanfordnlp/GloVe
https://github.com/maciejkula/glove-python

FGVC 算法本质上是一个基于光流法的视频修复算法。
https://github.com/vt-vl-lab/FGVC
https://github.com/princeton-vl/RAFT#requirements

https://github.com/valuesimplex/FinBERT
https://github.com/ymcui/Chinese-BERT-wwm/
https://github.com/huggingface/transformers

YOLOv5在建筑工地中安全帽佩戴检测的应用
https://github.com/PeterH0323/Smart_Construction
https://github.com/njvisionpower/Safety-Helmet-Wearing-Dataset
https://mp.weixin.qq.com/s/zt2U9vcLmoA5chumz2eP8Q
https://github.com/yitu-opensource/ConvBert

小型 Autograd Tensor 库 tinygrad
https://github.com/geohot/tinygrad

移动端 Anchor-free 目标检测模型
https://github.com/RangiLyu/nanodet

中文分词
https://github.com/XiaoMi/MiNLP/tree/main/minlp-tokenizer
爬虫：目前支持数据源包括GitHub、QQ邮箱、网易邮箱、阿里邮箱、新浪邮箱、Hotmail邮箱、Outlook邮箱、京东、淘宝、支付宝、中国移动、中国联通、中国电信、知乎、哔哩哔哩、网易云音乐、QQ好友、QQ群、生成朋友圈相册、浏览器浏览历史、12306、博客园、CSDN博客、开源中国博客、简书
https://github.com/kangvcar/InfoSpider
https://mp.weixin.qq.com/s/N5Wc_KoXl0Ze1Qo4TRnH3w
数据可视化
https://mp.weixin.qq.com/s/ABAzeK8HkuQdZJ8LLjclTQ
数据降纬
https://mp.weixin.qq.com/s/wGiZVopNJtCwRaJj8wFCQg
数据增广
https://mp.weixin.qq.com/s/Xt6oeSe-ugBRbMeaQbUUoA

使用机器学习放大 图片/视频/GIF
https://github.com/AaronFeng753/Waifu2x-Extension-GUI

超轻量级中文ocr，支持竖排文字识别, 支持ncnn推理 ( dbnet(1.8M) + crnn(2.5M) + anglenet(378KB)) 总模型仅4.7M
https://github.com/microsoft/onnxruntime
https://github.com/ouyanghuiyu/chineseocr_lite
https://github.com/alisen39/TrWebOCR
https://github.com/ouyanghuiyu/yolo-face-with-landmark

https://github.com/Uniswap/uniswap-v2-core
https://github.com/Uniswap/uniswap-v2-periphery
https://github.com/Basis-Cash/basiscash-protocol
https://github.com/api3dao/airnode
https://github.com/NEST-Protocol/NEST-Oracle-V3
https://github.com/smartcontractkit/chainlink

https://github.com/mwaskom/seaborn

https://github.com/odashi/latexify_py #生成 LaTeX 公式
https://github.com/csxmli2016/DFDNet

https://github.com/laekov/fastmoe
无人机渗透测试
https://github.com/dhondta/dronesploit
生成高质量、多样化和逼真的图像
https://github.com/RameenAbdal/StyleFlow
https://github.com/NVlabs/stylegan2-ada
视觉识别
https://github.com/openai/CLIP
以太坊GPU挖矿软件
https://github.com/ethereum-mining/ethminer
去中心化的分布式微博
https://github.com/tootsuite/mastodon
Protobuf 编码
https://github.com/protocolbuffers/protobuf
视频上传与分享服务 去中心化
https://github.com/Chocobozzz/PeerTube
区块链技术的新型无广告Web浏览
https://github.com/brave/brave-browser
神经网络的可视化工具和绘图软件
https://github.com/HarisIqbal88/PlotNeuralNet
面向物联网的嵌入式实时操作系统 构建简单的传感器网络、可穿戴设备以及小型物联网无线网关
https://github.com/zephyrproject-rtos/zephyr
安全帽佩戴检测
https://github.com/PeterH0323/Smart_Construction
对王之王——对穿肠
https://github.com/wb14123/seq2seq-couplet
文本多分类任务
https://github.com/percent4/keras_bert_text_classification
自监督模型 物体检测、分割和图像分类等任务上优于最新的自监督
https://github.com/facebookresearch/vissl
旋转目标检测新方法
https://github.com/yangxue0827/RotationDetection
https://github.com/implus/GFocalV2
人脸多属性篡改
https://github.com/imlixinyang/HiSD
无卷积！金字塔视觉Transformer(PVT)：用于密集预测的多功能backbone
https://github.com/whai362/PVT
基于Transformer的DALL-E
https://github.com/openai/DALL-E
https://github.com/sacmehta/delight
https://github.com/yitu-opensource/T2T-ViT
通过视频-文本对匹配的视频预训练模型
https://github.com/MCG-NJU/CPD-Video

https://github.com/WeChatCV/opencv_3rdparty
https://github.com/opencv/opencv_contrib

https://github.com/ultralytics/yoloV5
https://github.com/Akbonline/Social-Distancing-using-YOLOv5
基于细粒度动态网络的目标检测器
https://github.com/StevenGrove/DynamicHead
https://github.com/Vegeta2020/CIA-SSD
https://github.com/Banconxuan/RTS3D
https://github.com/Thinklab-SJTU/R3Det_Tensorflow
https://github.com/nightsnack/YOLObile
行人重识别
https://github.com/naver-ai/relabel_imagenet
https://github.com/JDAI-CV/fast-reid
https://github.com/mangye16/ReID-Survey

OCTA-500数据集下载地址
https://ieee-dataport.org/open-access/octa-500
https://www.paperswithcode.com/datasets
https://google.github.io/aistplusplus_dataset/


SoftPool：一种新的池化方法
https://github.com/alexandrosstergiou/SoftPool
刷爆AI圈的DALL·E
https://github.com/lucidrains/DALLE-pytorch
目标跟踪 支持单/多目标跟踪、视频目标检测
https://github.com/open-mmlab/mmtracking

Transformers是2020年在Papers with Code上被访问最多的代码库
Transformers — Hugging Face — https://github.com/huggingface/transformers
PyTorch Image Models — Ross Wightman — https://github.com/rwightman/pytorch-image-models
Detectron2 — FAIR — https://github.com/facebookresearch/detectron2
InsightFace — DeepInsight — https://github.com/deepinsight/insightface
Imgclsmob — osmr — https://github.com/osmr/imgclsmob
DarkNet — pjreddie — https://github.com/pjreddie/darknet
PyTorchGAN — Erik Linder-Norén — https://github.com/eriklindernoren/PyTorch-GAN
MMDetection — OpenMMLab — https://github.com/open-mmlab/mmdetection
FairSeq — PyTorch — https://github.com/pytorch/fairseq
Gluon CV — DMLC — https://github.com/dmlc/gluon-cv

ImageNet是2020年在Papers with Code上访问最多的benchmark
ImageNet — Image Classification — https://paperswithcode.com/sota/image-classification-on-imagenet
COCO — Object Detection / Instance Segmentation — https://paperswithcode.com/sota/object-detection-on-coco
Cityscapes — Semantic Segmentation — https://paperswithcode.com/sota/semantic-segmentation-on-cityscapes
CIFAR-10 — Image Classification — https://paperswithcode.com/sota/image-classification-on-cifar-10
CIFAR-100 — Image Classification — https://paperswithcode.com/sota/image-classification-on-cifar-100
PASCAL VOC 2012 — Semantic Segmentation — https://paperswithcode.com/sota/semantic-segmentation-on-pascal-voc-2012
MPII Human Pose — Pose Estimation — https://paperswithcode.com/sota/pose-estimation-on-mpii-human-pose
Market-1501 — Person Re-Identification — https://paperswithcode.com/sota/person-re-identification-on-market-1501
MNIST — Image Classification — https://paperswithcode.com/sota/image-classification-on-mnist
Human 3.6M — Human Pose Estimation -https://paperswithcode.com/sota/pose-estimation-on-mpii-human-pose

https://github.com/microsoft/EdgeML
目标检测
https://github.com/Megvii-BaseDetection/AutoAssign
https://github.com/fundamentalvision/Deformable-DETR
https://github.com/Megvii-BaseDetection/DeFCN
去除阴影
https://github.com/kavyamusty/Shading-removal-of-images

无人驾驶数据集
http://www.orca-tech.cn/datasets

语音识别、说话者识别、语音增强、多麦克风信号处理和语音识别系统等，且拥有相当出色的性能
https://github.com/speechbrain/speechbrain
 3D 全息图
https://github.com/liangs111/tensor_holography

https://github.com/xingyizhou/CenterNet2
https://github.com/genforce/sefa
https://github.com/FederatedAI/FedVision
人脸数据集
https://www.face-benchmark.org
无需锚框（Anchor-Free）的行人搜索框架
https://github.com/daodaofr/AlignPS
聊天机器人
https://rasa.com/docs/rasa/installation/
https://github.com/happilyeverafter95/demo-bot
去马赛克
https://github.com/beurtschipper/Depix
绘制不同期刊格式图表
https://github.com/garrettj403/SciencePlots
GAN生成图像可以卡音效 音画同步
https://github.com/mikaelalafriz/lucid-sonic-dreams
https://github.com/justinpinkney/awesome-pretrained-stylegan2
from lucidsonicdreams import LucidSonicDream
L = LucidSonicDream(song = 'chemical_love.mp3', style = 'abstract photos')
L.hallucinate(file_name = 'chemical_love.mp4')
from lucidsonicdreams import show_styles
show_styles()
L = LucidSonicDream('pancake_feet.mp3', style = 'modern art')
L.hallucinate(file_name = 'pancake_feet.mp4',
              speed_fpm = 0,
              motion_react = 0.8,
              contrast_strength = 0.5,
              flash_strength = 0.7)
L = LucidSonicDream(song = 'raspberry.mp3', style = 'VisionaryArt.pkl')
L.hallucinate(file_name = 'raspberry.mp4',
              pulse_react = 1.2,
              motion_react = 0.7,
              contrast_strength = 0.5,
              flash_strength = 0.5)
L = LucidSonicDream(song = 'lucidsonicdreams_main.mp3',
                    pulse_audio = 'lucidsonicdreams_pulse.mp3',
                    class_audio = 'lucidsonicdreams_class.mp3',
                    style = 'wikiart')

L.hallucinate('lucidsonicdreams.mp4', 
              pulse_react = 0.25,
              motion_react = 0,
              classes = [1,5,9,16,23,27,28,30,50,68,71,89],
              dominant_classes_first = True,
              class_shuffle_seconds = 8,
              class_smooth_seconds = 4,
              class_pitch_react = 0.2,
              contrast_strength = 0.3)
import numpy as np 
from skimage.transform import swirl
from lucidsonicdreams import EffectsGenerator


def swirl_func(array, strength, amplitude):
  swirled_image = swirl(array, 
                        rotation = 0, 
                        strength = 100 * strength * amplitude,
                        radius=650)
  return (swirled_image*255).astype(np.uint8)

swirl_effect = EffectsGenerator(swirl_func,
                                audio = 'unfaith.mp3', 
                                strength = 0.2, 
                                percussive = False)

L = LucidSonicDream('unfaith.mp3',
                    style = 'textures')

L.hallucinate('unfaith.mp4',
              motion_react = 0.15,
              speed_fpm = 2,
              pulse_react = 1.5,
              contrast_strength = 1,
              flash_strength = 1, 
              custom_effects = [swirl_effect])

files.download("unfaith.mp4")
from pytorch_pretrained_biggan import BigGAN, convert_to_images
import torch

biggan = BigGAN.from_pretrained('biggan-deep-512')
biggan.to('cuda:0')

def biggan_func(noise_batch, class_batch):
  noise_tensor = torch.from_numpy(noise_batch).cuda()
  class_tensor = torch.from_numpy(class_batch).cuda()
  with torch.no_grad():
    output_tensor = biggan(noise_tensor.float(), class_tensor.float(), truncation = 1)
  return convert_to_images(output_tensor.cpu())

L = LucidSonicDream('sea_of_voices_inst.mp3',
                    style = biggan_func, 
                    input_shape = 128, 
                    num_possible_classes = 1000)

L.hallucinate('sea_of_voices.mp4',
              output_audio = 'sea_of_voices.mp3',
              speed_fpm = 3,
              classes = [13, 14, 22, 24, 301, 84, 99, 100, 134, 143, 393, 394],
              class_shuffle_seconds = 10, 
              class_shuffle_strength = 0.1,
              class_complexity = 0.5,
              class_smooth_seconds = 4,
              motion_react = 0.35,
              flash_strength = 1,
              contrast_strength = 1)

GPT-3
https://github.com/EleutherAI/gpt-neo/
https://pile.eleuther.ai/

提取字幕
https://github.com/apm1467/videocr
https://www.bilibili.com/read/cv292343
https://github.com/YaoFANGUK/video-subtitle-extractor

知乎数据集
https://cloud.tsinghua.edu.cn/d/d6c045c55aa14bb39ebc/
https://github.com/THUIR/ZhihuRec-Dataset

视频转换
https://github.com/HandBrake/HandBrake
照片恢复
https://github.com/Thmen/EGVSR
https://github.com/skycrapers/TecoGAN-PyTorch

数据接口：百度、谷歌、头条、微博指数,宏观数据，利率数据，货币汇率，千里马、独角兽公司，新闻联播文字稿，影视票房数据，高校名单，疫情数据…
https://github.com/justinzm/gopup

https://github.com/sql-machine-learning/models

23个数据集
https://mp.weixin.qq.com/s/_2dhl-kgDXd_xZIAfjHsdg

对抗网络
https://github.com/VITA-Group/DeblurGANv2
https://github.com/eriklindernoren/PyTorch-GAN
文本对抗性攻击工具包
https://github.com/thunlp/OpenAttack
原神自动钓鱼
https://github.com/7eu7d7/genshin_auto_fish

XTDrone是基于PX4、ROS与Gazebo的无人机通用仿真平台
https://gitee.com/robin_shaun/XTDrone
https://github.com/robin-shaun/XTDrone
