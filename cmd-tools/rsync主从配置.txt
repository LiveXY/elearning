rsync 命令参数：
```
rsync [OPTION]... SRC DEST
rsync [OPTION]... SRC [USER@]host:DEST
rsync [OPTION]... [USER@]HOST:SRC DEST
rsync [OPTION]... [USER@]HOST::SRC DEST
rsync [OPTION]... SRC [USER@]HOST::DEST
rsync [OPTION]...
rsync://[USER@]HOST[:PORT]/SRC [DEST]

-v, --verbose 详细模式输出
-q, --quiet 精简输出模式
-c, --checksum 打开校验开关，强制对文件传输进行校验
-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD
-r, --recursive 对子目录以递归模式处理
-R, --relative 使用相对路径信息
-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。
--backup-dir 将备份文件(如~filename)存放在在目录下。
-suffix=SUFFIX 定义备份文件前缀
-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)
-l, --links 保留软链结
-L, --copy-links 想对待常规文件一样处理软链结
--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结
--safe-links 忽略指向SRC路径目录树以外的链结
-H, --hard-links 保留硬链结
-p, --perms 保持文件权限
-o, --owner 保持文件属主信息
-g, --group 保持文件属组信息
-D, --devices 保持设备文件信息
-t, --times 保持文件时间信息
-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间
-n, --dry-run现实哪些文件将被传输
-W, --whole-file 拷贝文件，不进行增量检测
-x, --one-file-system 不要跨越文件系统边界
-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节
-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步
--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息
-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件
--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件
--delete 删除那些DST中SRC没有的文件
--delete-excluded 同样删除接收端那些被该选项指定排除的文件
--delete-after 传输结束以后再删除
--ignore-errors 及时出现IO错误也进行删除
--max-delete=NUM 最多删除NUM个文件
--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输
--force 强制删除目录，即使不为空
--numeric-ids 不将数字的用户和组ID匹配为用户名和组名
--timeout=TIME IP超时时间，单位为秒
-I, --ignore-times 不跳过那些有同样的时间和长度的文件
--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间
--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0
-T --temp-dir=DIR 在DIR中创建临时文件
--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份
-P 等同于 --partial
--progress 显示备份过程
-z, --compress 对备份的文件在传输时进行压缩处理
--exclude=PATTERN 指定排除不需要传输的文件模式
--include=PATTERN 指定不排除而需要传输的文件模式
--exclude-from=FILE 排除FILE中指定模式的文件
--include-from=FILE 不排除FILE指定模式匹配的文件
--version 打印版本信息
--address 绑定到特定的地址
--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件
--port=PORT 指定其他的rsync服务端口
--blocking-io 对远程shell使用阻塞IO
-stats 给出某些文件的传输状态
--progress 在传输时现实传输过程
--log-format=formAT 指定日志文件格式
--password-file=FILE 从FILE中得到密码
--bwlimit=KBPS 限制I/O带宽，KBytes per second
-h, --help 显示帮助信息
rsync命令使用中，如果源参数的末尾有斜线，只会复制指定目录的内容，而不复制目录本身，没有斜线，则会复制目录本身，包括目录
使用一个远程 shell 程序（如 rsh、ssh）来实现将本地机器的内容拷贝到远程机器。当 DST 路径地址包含单个冒号 ":" 分隔符时启动该模式。
使用一个远程 shell 程序（如 rsh、ssh）来实现将远程机器的内容拷贝到本地机器。当 SRC 地址路径包含单个冒号 ":" 分隔符时启动该模式。

配置说明
pid file = <FILE> 进程写入文件。
port =  指定端口，默认是 873。
address = 指定服务器 IP 地址。
uid = 服务器端传输文件时，指定用户执行，默认 nobody。
gid = 服务器端传输文件时，指定用户组执行，默认 nobody。
use chroot =  服务器守护程序将 chroot 到文件系统的目录中，好处在于保护系统不被安装漏洞侵袭。缺点是需要超级用户权限。
read only = yes|no  只读选择，不让客户端上传文件到服务器上。
write only = yes|no 写入选择。
hosts allow = 限制 IP 或网段，可以指定单个 IP，也可以指定整个网段，提高安全性。格式是空格间隔。
max connections = 客户端最多连接数。
motd file = <FILE>  用于定义服务器信息，当用户登录时会看到文件中的内容信息。
log file = <FILE> 服务器的日志。
transfer logging = yes|no 是否打印传输日志
log format =  日志格式（%t %a %m %f %b）
lock file = <FILE>  加锁文件。
path = <DIR>  指定同步文件目录所在位。
auth users =  认证用户，必须在服务器上存在的用户。
list = yes|no 是否把 rsync 服务器上提供同步数据的目录在服务器上模块显示出来。默认为 yes。
ignore errors 忽略 IO 错误。
secrets file = <FILE> 密码存放文件，有密码登录时用到。
comment = 注释可自定义。
exclude = 排除目录或文件，目录之间可用空格分开。
rsync 的主要有三个配置文件 rsyncd.conf（主配置文件）、rsyncd.passwd（密码文件）、rsyncd.motd（rysnc 服务器信息）。

将 rsyncd.passwd 密码文件的文件属性设为 root 拥有，且权限要设为 600，否则无法备份成功。
出于安全目的，文件的属性必需是只有属主可读。

密码文件格式为：用户名:密码
```
常用代码
```
rsync -avzP -e 'ssh -p22' 本地目录/  root@远程服务器:服务器目录/ #使用ssh 22端口上传数据
echo "hadoop:password123" > /etc/rsyncd.passwd
chmod 600 /etc/rsyncd.passwd
rsync -avz --progress  --password-file=/etc/rsyncd.passwd  hadoop@192.168.6.168::/home/ /home/test
rsync -rogpav --delete /home /tmp #同步两边的目录
rsync -avzrtopg --progress --delete /src  /dst #--delete选项指定以rsync服务器端为基础进行数据镜像同步，也就是要保持rsync服务器端目录与客户端目录的完全一致；
```

主从配置
主：：：：：：：：

yum install rsync -y
cd /tmp
wget --no-check-certificate http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz
tar -zxvf inotify-tools-3.14.tar.gz
cd inotify-tools-3.14
./configure
make
make install

echo "rsyncpass">/root/rsyncpass
chmod 600 /root/rsyncpass

;编辑主服务器同步监测脚本监测目录是/home
vim /root/inotify_rsync.sh

#!/bin/sh
#date:2014-3-26
#function:rysnc 10.232.48.106  to  10.232.48.109
if [ ! -f /root/rsyncpass ];then
        echo "rsyncpass">/root/rsyncpass
        /bin/chmod 600 /root/rsyncpass
fi
log=/var/log/rsync.log
src="/home/"
host="10.232.48.109"
module="web"

/usr/local/bin/inotifywait -mr --timefmt '%d/%m/%y %H:%M' --format '%T %w %f' -e close_write,modify,delete,create,attrib $src |  while read DATE TIME DIR FILE; do

       FILECHANGE=${DIR}${FILE}

       /usr/bin/rsync -avH --delete  --progress --password-file=/root/rsyncpass $src backup@$host::$module &>/dev/null
 echo "At ${TIME} on ${DATE}, file $FILECHANGE was backed up via rsync" >> $log
done



chmod +x /root/inotify_rsync.sh
echo "/root/inotify_rsync.sh">>/etc/rc.local

./inotify_rsync.sh &


从：：：
yum install rsync -y

echo -e "uid = root
gid = root
use chroot = no
max connections = 10
pid file = /var/run/rsyncd.pid
lock file = /var/run/rsync.lock
log file = /var/log/rsyncd.log
hosts allow = 10.232.48.106

[web]
path = /home/
read only = no
list = no
auth users = backup
secrets file = /root/rsyncpass" > /etc/rsyncd.conf

echo -e '#!/bin/bash
#
# rsyncd   This shell script takes care of starting and stopping standalone rsync.
#
# chkconfig: - 99 50
# description: rsync is a file transport daemon
# processname: rsync
# config: /etc/rsyncd.conf

# Source function library
. /etc/rc.d/init.d/functions

RETVAL=0
prog="rsync"

PPATH="/usr/bin/"

# Your rsync config file path
CFILE="/etc/rsyncd.conf"

OPTIONS="--daemon -4 --config $CFILE"

start() {
        # Start daemons.
        [ -x $PPATH$prog ] || { echo "FATAL: No such programme"; exit 4; }
        [ -f $CFILE ] || { echo "FATAL: config file does not exist"; exit 6; }
        echo -n $"Starting $prog: "
        daemon $PPATH$prog $OPTIONS
        RETVAL=$?
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/$prog
        echo
        return $RETVAL
}

stop() {
        # Stop daemons.
        echo -n $"Shutting down $prog: "
        killproc $prog
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/$prog
       return $RETVAL
}

# call the function we defined
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|reload)
        stop
        start
        RETVAL=$?
        ;;
  status)
        status $prog
        RETVAL=$?
       ;;
  *)
        echo $"Usage: $0 {start|stop|restart|reload|status}"
        exit 2
esac

exit $RETVAL' > /etc/init.d/rsyncd

chmod +x /etc/init.d/rsyncd

service rsyncd start



/usr/bin/rsync -rvu /www/home homezz@remoter.server.com:/home/homezz/backup 这个命令就是将 /www/home 同步到 remoter.server.com 服务器上的/home/homezz/backup目录下，命令中 homezz表示远程服务器的ssh登陆名，如果您设置了免密码登陆，这个命令就不会弹出密码，直接开始同步了
0 */2 * * * /root/backup.php >/dev/null 2>&1
0 */3 * * * /usr/bin/rsync -rvu /backup/mysql homezz@remoter.server.com:/home/homezz/mysql >/dev/null 2>&1
0 */5 * * * /usr/bin/rsync -rvu /www/home homezz@remoter.server.com:/home/homezz/backup >/dev/null 2>&1



文件同步rsync scp 管道

rsync options source destination

镜像同步备份文件
rsync -avzrtopg --progress --delete /src  /dst
--delete选项指定以rsync服务器端为基础进行数据镜像同步，也就是要保持rsync服务器端目录与客户端目录的完全一致；
--exclude选项用于排除不需要传输的文件类型；

如果文件比较大，可使用nohup将进程放到后台执行。
nohup rsync -avzrtopgL  --progress /data/opt /data2/  >/var/log/$(date +%Y%m%d).mail.log &
nohup rsync -avzP --delete /data/51learning-data/data1/ root@172.21.11.173:/data/51learning-data/data1/ &

我如何通过rsync只复制目录结构，忽略掉文件呢？　
rsync -av --include '*/' --exclude '*' source-dir dest-dir

我能将更改过或者删除的文件也备份上来吗
rsync -avzP --delete -b --backup-dir=/backup20220831 /data/51learning-data/data1/ root@172.21.11.173:/data/51learning-data/data1/

增量备份本地文件
rsync -avzrtopgL  --progress /src /dst
-v是“--verbose”,即详细模式输出； -z表示“--compress”，即传输时对数据进行压缩处理；
-r表示“--recursive”，即对子目录以递归的模式处理；-t是“--time”，即保持文件时间信息；
-o表示“owner”，用来保持文件属主信息；-p是“perms”，用来保持文件权限；
-g是“group”，用来保持文件的属组信息；
--progress用于显示数据镜像同步的过程；

镜像目录与内容
rsync  -av duying  /tmp/test


两个目录间完成文件拷贝：
rsync -zvr /var/opt/lx/ /root/temp/
-z 传输前进行压缩
-v 显示命令执行详细信息
-r 递归拷贝目录
若要保留原文件时间戳、属主/属组、权限属性，我们可以使用 -a 选项：
rsync -azv /var/opt/lx/ /root/temp/

本地与远程主机间完成数据同步
rsync -avz /root/temp/ lx@192.168.1.103:/home/lx/tmp/

使用ssh通道进行数据同步
rsync -avz -e ssh /root/temp/ lx@192.168.1.103:/home/lx/tmp/

经常出现这样的场景，我们对源文件和目的地文件均作了修改，同时想将源文件作的修改同步到目的地，但又保留对目的地文件的更改，此时可以使用 -u 选项：
rsync -avzu /var/opt/lx/ /root/temp/

对于不存在于源目录，但存在于目的地的文件，有时我们想在做文件同步时删除它们，--delete 选项可以满足要求：
rsync -avz --delete /var/opt/lx/ /root/temp/

有时我们只想对目的地已经有的文件进行同步，而不理会源目录新增的文件，此时可以使用 --existing 选项：
rsync -avz --existing /var/opt/lx/ /root/temp/

显示执行进度
rsync -avz --progress /var/opt/lx/ /root/temp/

source 与 destination 有两处不同，一处为 a.c 的文件大小，第二处为 b.c 的属主，此时添加 -i 选项进行数据同步，有以下输出：
rsync -avzi /var/opt/lx/ /root/temp/
> 指示传输到本地
f  指示所传为文件
s  指示文件大小不一致
t  指示时间戳不一致
o  指示属主不一致

按指定模式进行同步
使用 --include 和 --exclude 选项，可以帮助我们完成只同步特定文件的目的，例如以下只同步以 'a' 开头的文件：
rsync -avz --include 'a*' --exclude '*' /var/opt/lx/ /root/temp/

限制传输文件的大小
rsync -avz --max-size='100K' /var/opt/lx/ /root/temp/
以上命令限制传输的文件大小只能小于或等于100K，另可以使用 M 和 G 作为大小单位。

默认情况下 rsync 采用增量拷贝，这样能节省带宽，在所同步文件不大的情况下，我们可以通过 -W 选项实现全拷贝：
rsync -avzW /var/opt/lx/ /root/temp/

二进制差异同步
rsync -av /backup/ -e ssh root@192.168.1.110:/bak
管道同步
gzip -c cdio_bak.sql | ssh root@192.168.1.110 "gunzip -c - > /bak/cdio.sql”

删除大文件：
rsync --delete-before -avH --progress --stats DEST SRC
解释：
当SRC和DEST性质都为文件【f】时，意思是清空文件内容而不是删除文件
当SRC和DEST性质都为目录【d】时，意思是删除该目录下的所有文件，使其变为空目录
eg:
mkdir empty
rsync --delete-before -avH --progress --stats /root/empty/ /tmp/test/log/

同步文件保存全部属性、权限、软链接，时间信息，目标文件不做删除操作，只增加和覆盖
rsync -ratoglp /home/upload/ /opt/bak/upload/
完全一致备份
rsync -ratoglp --delete /home/upload/ /opt/bak/upload/


Syncthing
=====
https://syncthing.net/downloads/
https://github.com/canton7/SyncTrayzor/releases
https://github.com/syncthing/syncthing-macos/releases
https://github.com/syncthing/syncthing/releases/download/v1.3.3/syncthing-linux-amd64-v1.3.3.tar.gz
https://github.com/syncthing/syncthing/releases/download/v1.3.3/syncthing-macos-amd64-v1.3.3.tar.gz
tar -zxvf syncthing-linux-amd64-v1.3.3.tar.gz
cd syncthing-linux-amd64-v1.3.3
cp syncthing /usr/local/bin/
syncthing
syncthing --upgrade
nohup syncthing &
vim ~/.config/syncthing/config.xml
<address>127.0.0.1:8384</address>
改成
<address>0.0.0.0:8384</address>
http://ip:8384
vim /usr/lib/systemd/system/syncthing@.service
[Unit]
Description=Syncthing - Open Source Continuous File Synchronization for %I
Documentation=man:syncthing(1)
After=network.target

[Service]
User=%i
ExecStart=/usr/local/bin/syncthing -no-browser -no-restart -logflags=0
Restart=on-failure
SuccessExitStatus=3 4
RestartForceExitStatus=3 4

[Install]
WantedBy=multi-user.target

# 启动syncthing
systemctl start syncthing@hcxiong.service
# 查看syncthing运行状态
systemctl status syncthing@hcxiong.service
# 停止syncthing
systemctl stop syncthing@hcxiong.service
# 设置syncthing开机自启
systemctl enable syncthing@hcxiong.service
# 关闭syncthing开机自启
systemctl disable syncthing@hcxiong.service
systemctl --hcxiong start syncthing


Stow
=====
yum install epel-release
yum install stow -y
ll /usr/local/stow/
cd /usr/local/stow/
stow hello
stow --delete hello

rdiff-backup 备份
rdiff-backup /home/tux/ /run/media/tux/my_backup_drive/
rdiff-backup /home/tux/ tux@example.com::/my_backup_drive/
恢复一个文件在四天前的版本
rdiff-backup --restore-as-of 4D /run/media/tux/foo.txt ~/foo_4D.txt
最新版本
rdiff-backup --restore-as-of now /run/media/tux/foo.txt ~/foo_4D.txt

Transmission
=====
Transmission 是一种 BitTorrent 客户端，以跨平台的服务端和简洁的用户界面著称。
yum install transmission transmission-daemon
systemctl start transmission-daemon
systemctl enable transmission-daemon
启动后即可通过浏览器 http://IP:9091 访问和使用 transmission 服务。
修改配置文件之前必须先停止 transmission-daemon，否则不生效，修改完成后再启动。
systemctl stop transmission-daemon
vi /var/lib/transmission/.config/transmission-daemon/settings.json
systemctl start transmission-daemon
{
    // 是否启用时段限速，默认关闭
    "alt-speed-enabled": false,

    // 时段限速下载最大值，默认50（KB/s）
    "alt-speed-down": 50,

    // 时段限速开始时间
    "alt-speed-time-begin": 540,

    // 时段限速结束时间
    "alt-speed-time-end": 1020,

    // 是否启用时段限速日期，默认关闭
    "alt-speed-time-enabled": false,

    // 时段限速日期（星期几），127表示每天
    "alt-speed-time-day": 127,

    // 时段限速值，默认50（KB/s）
    "alt-speed-up": 50,

    // IPv4地址绑定
    "bind-address-ipv4": "0.0.0.0",

    // IPv6地址绑定
    "bind-address-ipv6": "::",

    // 是否启用黑名单，默认关闭
    "blocklist-enabled": false,

    // 黑名单列表
    "blocklist-url": "http://www.example.com/blocklist",

    // 缓存大小（MB），建议设置为内存大小的1/6~1/4
    "cache-size-mb": 4,

    // 是否启用DHT网络，默认启用
    "dht-enabled": true,

    // 下载完成的保存路径
    "download-dir": "/mnt/usb/STATION/Download",

    // 是否启用下载队列，默认启用
    "download-queue-enabled": true,

    // 下载队列数，默认5，即最多同时下载5个任务
    "download-queue-size": 5,

    // 0：不加密，1：优先加密（默认），2：必须加密
    "encryption": 1,

    // 是否启用空闲时间停止做种，默认关闭
    "idle-seeding-limit-enabled": false,

    // 空闲多长时间后停止做种，默认30（分钟）
    "idle-seeding-limit": 30,

    // 是否启用未下载完成的保存路径，默认关闭
    "incomplete-dir-enabled": false,

    // 未下载完成的保存路径
    "incomplete-dir": "/var/lib/transmission/Downloads",

    // 是否启用LDP（用于在本地网络寻找节点）
    "lpd-enabled": false,

    // 日志消息等级，默认1
    "message-level": 1,
    "peer-congestion-algorithm": "",
    "peer-id-ttl-hours": 6,
    "peer-limit-global": 200,
    "peer-limit-per-torrent": 50,
    "peer-port": 51413,
    "peer-port-random-high": 65535,
    "peer-port-random-low": 49152,
    "peer-port-random-on-start": false,
    "peer-socket-tos": "default",
    "pex-enabled": true,
    "port-forwarding-enabled": true,

    // 预分配文件磁盘空间，0：关闭，1：快速（默认），2：完全
    "preallocation": 1,
    "prefetch-enabled": true,
    "queue-stalled-enabled": true,
    "queue-stalled-minutes": 30,

    // 是否启用上传下载比例，默认关闭
    "ratio-limit-enabled": false,

    // 上传下载比例达到多少停止做种
    "ratio-limit": 2,

    // 是否启用在未完成的文件名后添加后缀，默认开启
    "rename-partial-files": true,

    // 是否开启远程连接，默认启用
    "rpc-enabled": true,

    // 是否启用远程连接授权验证，默认关闭
    "rpc-authentication-required": false,

    // 远程连接地址绑定，默认0.0.0.0，表示任何地址都能访问
    "rpc-bind-address": "0.0.0.0",

    // 是否启用白名单，默认启用
    "rpc-host-whitelist-enabled": true,

    // 白名单列表，默认空
    "rpc-host-whitelist": "",

    // 远程连接用户名，默认空
    "rpc-username": "",

    // 远程连接密码，修改后会自动加密
    "rpc-password": "{73e73ac09d844dd25fa129ba88b6f996bb980501Q8JgkDQV",

    // 网页服务端口
    "rpc-port": 9091,

    // 远程接口路径
    "rpc-url": "/transmission/",

    // 是否启用白名单，默认关闭，启用后只有白名单地址才能远程连接
    "rpc-whitelist-enabled": false,

    // 白名单列表，默认127.0.0.1
    "rpc-whitelist": "127.0.0.1",

    "scrape-paused-torrents-enabled": true,

    // 是否在下载完成后执行脚本，默认关闭
    "script-torrent-done-enabled": false,

    // 下载完成后执行脚本的路径
    "script-torrent-done-filename": "",

    "seed-queue-enabled": false,
    "seed-queue-size": 10,

    // 是否启用下载限速，默认关闭
    "speed-limit-down-enabled": true,

    // 下载速度限制，默认100（KB/s）
    "speed-limit-down": 4096,

    // 是否启用上传限速，默认关闭
    "speed-limit-up-enabled": true,

    // 上传速度限制，默认100（KB/s）
    "speed-limit-up": 0,

    // 是否添加种子文件后自动开始，默认是
    "start-added-torrents": true,

    // 文件权限掩码：18相当于755权限，0相当于777权限
    "umask": 18,

    // 每个种子上传连接数，默认14
    "upload-slots-per-torrent": 14,

    // 是否启用UTP传输，默认启用
    "utp-enabled": true,

    // 是否启用自动监控种子目录，该选项需手动添加
    "watch-dir-enabled": true,

    // 自动监控种子目录路径，该选项需手动添加
    "watch-dir": "/mnt/usb/STATION/Torrents",

    // 是否自动删除监控目录的种子文件，默认否
    "trash-original-torrent-files": true
}

